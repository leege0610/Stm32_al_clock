
stm32_clock_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08008398  08008398  00018398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800853c  0800853c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800853c  0800853c  0001853c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008544  08008544  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800854c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000002c8  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004a4  200004a4  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018dd5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000312c  00000000  00000000  00038fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0003c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001360  00000000  00000000  0003d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270bb  00000000  00000000  0003e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019663  00000000  00000000  0006599b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f03f8  00000000  00000000  0007effe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016f3f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005aa4  00000000  00000000  0016f44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008380 	.word	0x08008380

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08008380 	.word	0x08008380

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <I2C_Scan>:
#include "lcd.h"

uint8_t _numlines;
uint8_t _row_offsets[4];

void I2C_Scan() {
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	b098      	sub	sp, #96	; 0x60
 800059c:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 800059e:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <I2C_Scan+0xc0>)
 80005a0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ae:	6020      	str	r0, [r4, #0]
 80005b0:	3404      	adds	r4, #4
 80005b2:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fe19 	bl	80001f0 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	4824      	ldr	r0, [pc, #144]	; (800065c <I2C_Scan+0xc4>)
 80005cc:	f006 fa85 	bl	8006ada <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005d6:	e02f      	b.n	8000638 <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	b299      	uxth	r1, r3
 80005e0:	230a      	movs	r3, #10
 80005e2:	2201      	movs	r2, #1
 80005e4:	481e      	ldr	r0, [pc, #120]	; (8000660 <I2C_Scan+0xc8>)
 80005e6:	f003 fe67 	bl	80042b8 <HAL_I2C_IsDeviceReady>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d113      	bne.n	8000620 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005fc:	1d38      	adds	r0, r7, #4
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <I2C_Scan+0xcc>)
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	f007 fa5b 	bl	8007abc <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fdf1 	bl	80001f0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	1d39      	adds	r1, r7, #4
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	4810      	ldr	r0, [pc, #64]	; (800065c <I2C_Scan+0xc4>)
 800061a:	f006 fa5e 	bl	8006ada <HAL_UART_Transmit>
 800061e:	e006      	b.n	800062e <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	2201      	movs	r2, #1
 8000626:	4910      	ldr	r1, [pc, #64]	; (8000668 <I2C_Scan+0xd0>)
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <I2C_Scan+0xc4>)
 800062a:	f006 fa56 	bl	8006ada <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 800062e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000632:	3301      	adds	r3, #1
 8000634:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000638:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800063c:	2b7f      	cmp	r3, #127	; 0x7f
 800063e:	d9cb      	bls.n	80005d8 <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2202      	movs	r2, #2
 8000646:	4909      	ldr	r1, [pc, #36]	; (800066c <I2C_Scan+0xd4>)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <I2C_Scan+0xc4>)
 800064a:	f006 fa46 	bl	8006ada <HAL_UART_Transmit>
}
 800064e:	bf00      	nop
 8000650:	3760      	adds	r7, #96	; 0x60
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	080083a8 	.word	0x080083a8
 800065c:	2000027c 	.word	0x2000027c
 8000660:	200002c0 	.word	0x200002c0
 8000664:	08008398 	.word	0x08008398
 8000668:	080083a0 	.word	0x080083a0
 800066c:	080083a4 	.word	0x080083a4

08000670 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	460b      	mov	r3, r1
 800067c:	71bb      	strb	r3, [r7, #6]
 800067e:	4613      	mov	r3, r2
 8000680:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	b299      	uxth	r1, r3
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	2201      	movs	r2, #1
 800068c:	4822      	ldr	r0, [pc, #136]	; (8000718 <LCD_SendInternal+0xa8>)
 800068e:	f003 fe13 	bl	80042b8 <HAL_I2C_IsDeviceReady>
 8000692:	4603      	mov	r3, r0
 8000694:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d000      	beq.n	800069e <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800069c:	e7f1      	b.n	8000682 <LCD_SendInternal+0x12>
            break;
 800069e:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	f023 030f 	bic.w	r3, r3, #15
 80006a6:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006ae:	7bba      	ldrb	r2, [r7, #14]
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f043 030c 	orr.w	r3, r3, #12
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006be:	7bba      	ldrb	r2, [r7, #14]
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006ce:	7b7a      	ldrb	r2, [r7, #13]
 80006d0:	797b      	ldrb	r3, [r7, #5]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	f043 030c 	orr.w	r3, r3, #12
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006de:	7b7a      	ldrb	r2, [r7, #13]
 80006e0:	797b      	ldrb	r3, [r7, #5]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	b299      	uxth	r1, r3
 80006f2:	f107 0208 	add.w	r2, r7, #8
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2304      	movs	r3, #4
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <LCD_SendInternal+0xa8>)
 8000700:	f003 fcdc 	bl	80040bc <HAL_I2C_Master_Transmit>
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000708:	2005      	movs	r0, #5
 800070a:	f002 f8d9 	bl	80028c0 <HAL_Delay>
    return res;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200002c0 	.word	0x200002c0

0800071c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 800072c:	79b9      	ldrb	r1, [r7, #6]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2200      	movs	r2, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff9c 	bl	8000670 <LCD_SendInternal>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <LCD_SendData>:
  }

  LCD_SendCommand(LCD_ADDR, LCD_SETDDRAMADDR | (col + _row_offsets[row]));
}

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	460a      	mov	r2, r1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000750:	79b9      	ldrb	r1, [r7, #6]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2201      	movs	r2, #1
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff8a 	bl	8000670 <LCD_SendInternal>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2130      	movs	r1, #48	; 0x30
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffd2 	bl	800071c <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2102      	movs	r1, #2
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ffcd 	bl	800071c <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	210c      	movs	r1, #12
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ffc8 	bl	800071c <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2101      	movs	r1, #1
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ffc3 	bl	800071c <LCD_SendCommand>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	6039      	str	r1, [r7, #0]
 80007a8:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007aa:	e009      	b.n	80007c0 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffc3 	bl	8000740 <LCD_SendData>
        str++;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f1      	bne.n	80007ac <LCD_SendString+0xe>
    }
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LCD_Print>:

void LCD_Print(int line_num, char *str) {
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	6039      	str	r1, [r7, #0]
  if(line_num == 0)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d108      	bne.n	80007f4 <LCD_Print+0x22>
  {
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	204e      	movs	r0, #78	; 0x4e
 80007e6:	f7ff ff99 	bl	800071c <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, str);
 80007ea:	6839      	ldr	r1, [r7, #0]
 80007ec:	204e      	movs	r0, #78	; 0x4e
 80007ee:	f7ff ffd6 	bl	800079e <LCD_SendString>
  else if(line_num == 1)
  {
	    LCD_SendCommand(LCD_ADDR, 0b11000000);
	    LCD_SendString(LCD_ADDR, str);
  }
}
 80007f2:	e00a      	b.n	800080a <LCD_Print+0x38>
  else if(line_num == 1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d107      	bne.n	800080a <LCD_Print+0x38>
	    LCD_SendCommand(LCD_ADDR, 0b11000000);
 80007fa:	21c0      	movs	r1, #192	; 0xc0
 80007fc:	204e      	movs	r0, #78	; 0x4e
 80007fe:	f7ff ff8d 	bl	800071c <LCD_SendCommand>
	    LCD_SendString(LCD_ADDR, str);
 8000802:	6839      	ldr	r1, [r7, #0]
 8000804:	204e      	movs	r0, #78	; 0x4e
 8000806:	f7ff ffca 	bl	800079e <LCD_SendString>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <init>:

void init() {
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
    I2C_Scan();
 8000816:	f7ff febf 	bl	8000598 <I2C_Scan>
    LCD_Init(LCD_ADDR);
 800081a:	204e      	movs	r0, #78	; 0x4e
 800081c:	f7ff ffa2 	bl	8000764 <LCD_Init>
   // LCD_SendString(LCD_ADDR, " Using 1602 LCD");

    // set address to 0x40
  //  LCD_SendCommand(LCD_ADDR, 0b11000000);
  //  LCD_SendString(LCD_ADDR, "  over I2C bus");
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <update_nvitems>:
volatile int timer_count;
uint32_t ADC_value;  //ADC button value get
uint32_t last_time,current_time,time_interval, last_time_interval;  //pc13 user button separate select, double click, long key

HAL_StatusTypeDef update_nvitems()  //Flash rom save
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
	uint32_t FirstSector,NbOfSectors,SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error= HAL_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    uint32_t Address,i;
    uint64_t Data;
    uint8_t *ptr;

	HAL_FLASH_Unlock();
 8000830:	f002 fe3e 	bl	80034b0 <HAL_FLASH_Unlock>
	FirstSector = FLASH_SECTOR_23;
 8000834:	2317      	movs	r3, #23
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000840:	2302      	movs	r3, #2
 8000842:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector        = FirstSector;
 8000844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000846:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	60fb      	str	r3, [r7, #12]

	error = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 800084c:	f107 0214 	add.w	r2, r7, #20
 8000850:	463b      	mov	r3, r7
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f002 ff9d 	bl	8003794 <HAL_FLASHEx_Erase>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(error != HAL_OK)
 8000860:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000864:	2b00      	cmp	r3, #0
 8000866:	d002      	beq.n	800086e <update_nvitems+0x4a>
	{
		return error;
 8000868:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800086c:	e02b      	b.n	80008c6 <update_nvitems+0xa2>
	}

	ptr = (uint8_t*)&default_nvitem;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <update_nvitems+0xac>)
 8000870:	627b      	str	r3, [r7, #36]	; 0x24

	for(i=0;i<sizeof(NVitemTypeDef);i++)
 8000872:	2300      	movs	r3, #0
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
 8000876:	e021      	b.n	80008bc <update_nvitems+0x98>
	{
		Address = (uint8_t*)nv_items + i;
 8000878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800087a:	f103 6301 	add.w	r3, r3, #135266304	; 0x8100000
 800087e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8000882:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*)ptr+ i);
 8000884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error =	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,Address,Data);
 8000896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800089a:	6a39      	ldr	r1, [r7, #32]
 800089c:	2000      	movs	r0, #0
 800089e:	f002 fdb3 	bl	8003408 <HAL_FLASH_Program>
 80008a2:	4603      	mov	r3, r0
 80008a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(error != HAL_OK)
 80008a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <update_nvitems+0x92>
		{
			return error;
 80008b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008b4:	e007      	b.n	80008c6 <update_nvitems+0xa2>
	for(i=0;i<sizeof(NVitemTypeDef);i++)
 80008b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b8:	3301      	adds	r3, #1
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
 80008bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008be:	2b0b      	cmp	r3, #11
 80008c0:	d9da      	bls.n	8000878 <update_nvitems+0x54>
		}
	}

	HAL_FLASH_Lock();
 80008c2:	f002 fe17 	bl	80034f4 <HAL_FLASH_Lock>
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3738      	adds	r7, #56	; 0x38
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000000 	.word	0x20000000

080008d4 <_60_Cvt>:

void _60_Cvt(TimeTypeDef* time)  //Time converter
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	if(time->seconds > 59)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80008e2:	2b3b      	cmp	r3, #59	; 0x3b
 80008e4:	dd0c      	ble.n	8000900 <_60_Cvt+0x2c>
	{
		time->minutes++;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	3301      	adds	r3, #1
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	b25a      	sxtb	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	705a      	strb	r2, [r3, #1]
		time->seconds = 0;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	709a      	strb	r2, [r3, #2]
 80008fe:	e010      	b.n	8000922 <_60_Cvt+0x4e>
	}
	else if(time->seconds < 0)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000906:	2b00      	cmp	r3, #0
 8000908:	da0b      	bge.n	8000922 <_60_Cvt+0x4e>
	{
		time->minutes--;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	3b01      	subs	r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	b25a      	sxtb	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	705a      	strb	r2, [r3, #1]
		time->seconds = 59;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	223b      	movs	r2, #59	; 0x3b
 8000920:	709a      	strb	r2, [r3, #2]
	}

	if(time->minutes > 59)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000928:	2b3b      	cmp	r3, #59	; 0x3b
 800092a:	dd0c      	ble.n	8000946 <_60_Cvt+0x72>
	{
		time->hours++;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f993 3000 	ldrsb.w	r3, [r3]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	3301      	adds	r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	b25a      	sxtb	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	701a      	strb	r2, [r3, #0]
		time->minutes = 0;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	705a      	strb	r2, [r3, #1]
 8000944:	e010      	b.n	8000968 <_60_Cvt+0x94>
	}
	else if(time->minutes < 0)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800094c:	2b00      	cmp	r3, #0
 800094e:	da0b      	bge.n	8000968 <_60_Cvt+0x94>
	{
		time->hours--;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f993 3000 	ldrsb.w	r3, [r3]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	3b01      	subs	r3, #1
 800095a:	b2db      	uxtb	r3, r3
 800095c:	b25a      	sxtb	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	701a      	strb	r2, [r3, #0]
		time->minutes = 59;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	223b      	movs	r2, #59	; 0x3b
 8000966:	705a      	strb	r2, [r3, #1]
	}

	if(time->hours > 23)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f993 3000 	ldrsb.w	r3, [r3]
 800096e:	2b17      	cmp	r3, #23
 8000970:	dd03      	ble.n	800097a <_60_Cvt+0xa6>
	{
		time->hours = 0;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	e007      	b.n	800098a <_60_Cvt+0xb6>
	}
	else if(time->hours < 0)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f993 3000 	ldrsb.w	r3, [r3]
 8000980:	2b00      	cmp	r3, #0
 8000982:	da02      	bge.n	800098a <_60_Cvt+0xb6>
	{
		time->hours = 23;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2217      	movs	r2, #23
 8000988:	701a      	strb	r2, [r3, #0]
	}

	if(time->hours < 12)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f993 3000 	ldrsb.w	r3, [r3]
 8000990:	2b0b      	cmp	r3, #11
 8000992:	dc03      	bgt.n	800099c <_60_Cvt+0xc8>
	{
		ampm[0] = 'A';
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <_60_Cvt+0xe4>)
 8000996:	2241      	movs	r2, #65	; 0x41
 8000998:	701a      	strb	r2, [r3, #0]
	}
	else if(time->hours >= 12)
	{
		ampm[0] = 'P';
	}
}
 800099a:	e007      	b.n	80009ac <_60_Cvt+0xd8>
	else if(time->hours >= 12)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f993 3000 	ldrsb.w	r3, [r3]
 80009a2:	2b0b      	cmp	r3, #11
 80009a4:	dd02      	ble.n	80009ac <_60_Cvt+0xd8>
		ampm[0] = 'P';
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <_60_Cvt+0xe4>)
 80009a8:	2250      	movs	r2, #80	; 0x50
 80009aa:	701a      	strb	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	20000168 	.word	0x20000168

080009bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)  //time ++
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009cc:	d11e      	bne.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if((timer_count % 100) == 0)
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009d4:	fb83 1302 	smull	r1, r3, r3, r2
 80009d8:	1159      	asrs	r1, r3, #5
 80009da:	17d3      	asrs	r3, r2, #31
 80009dc:	1acb      	subs	r3, r1, r3
 80009de:	2164      	movs	r1, #100	; 0x64
 80009e0:	fb01 f303 	mul.w	r3, r1, r3
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10b      	bne.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			ctime.seconds++;
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	3301      	adds	r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	b25a      	sxtb	r2, r3
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009fa:	709a      	strb	r2, [r3, #2]
			_60_Cvt(&ctime);
 80009fc:	481c      	ldr	r0, [pc, #112]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009fe:	f7ff ff69 	bl	80008d4 <_60_Cvt>
		}
		timer_count++;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a0a:	6013      	str	r3, [r2, #0]
	}

	ALARM_Check();
 8000a0c:	f000 ff7c 	bl	8001908 <ALARM_Check>

	if(htim->Instance == TIM4)  //music play
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d11f      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x9e>
	{
		if(alFlag == 1 && musicOn == 1)
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d11b      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x9e>
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d117      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x9e>
		{
			switch(default_nvitem.alarm_music_num)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000a2c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d00e      	beq.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x96>
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	dc12      	bgt.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x86>
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d004      	beq.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x8e>
				break;
			case 2:
				MUSIC_Play(airplane);
				break;
			default:
				break;
 8000a40:	e00d      	b.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0xa2>
				MUSIC_Play(schoolBell);
 8000a42:	4810      	ldr	r0, [pc, #64]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000a44:	f000 fee4 	bl	8001810 <MUSIC_Play>
				break;
 8000a48:	e00a      	b.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0xa4>
				MUSIC_Play(beep);
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000a4c:	f000 fee0 	bl	8001810 <MUSIC_Play>
				break;
 8000a50:	e006      	b.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0xa4>
				MUSIC_Play(airplane);
 8000a52:	480e      	ldr	r0, [pc, #56]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000a54:	f000 fedc 	bl	8001810 <MUSIC_Play>
				break;
 8000a58:	e002      	b.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0xa4>
			}
		}
 8000a5a:	bf00      	nop
 8000a5c:	e000      	b.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0xa4>
				break;
 8000a5e:	bf00      	nop
	}

}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000468 	.word	0x20000468
 8000a6c:	51eb851f 	.word	0x51eb851f
 8000a70:	2000036c 	.word	0x2000036c
 8000a74:	40000800 	.word	0x40000800
 8000a78:	20000203 	.word	0x20000203
 8000a7c:	200001f8 	.word	0x200001f8
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000044 	.word	0x20000044
 8000a88:	200000a4 	.word	0x200000a4
 8000a8c:	20000104 	.word	0x20000104

08000a90 <Select_Key>:

void Select_Key()  //Select operate
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	if(current_state.mode == NORMAL_STATE)
 8000a94:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <Select_Key+0xc8>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d115      	bne.n	8000ac8 <Select_Key+0x38>
	{
		if(musicOn == 0) current_state.mode = TIME_SETTING;
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <Select_Key+0xcc>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d103      	bne.n	8000aac <Select_Key+0x1c>
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <Select_Key+0xc8>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
			memcpy(&default_nvitem.alarm_music_num, &alarm_music[pos].music_num, sizeof(uint8_t));
			update_nvitems();
			current_state.mode = NORMAL_STATE;
		}
	}
}
 8000aaa:	e052      	b.n	8000b52 <Select_Key+0xc2>
			musicOn = 0;
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <Select_Key+0xcc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
			seq = 0;
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <Select_Key+0xd0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
			stop = 0;
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <Select_Key+0xd4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000abe:	2104      	movs	r1, #4
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <Select_Key+0xd8>)
 8000ac2:	f005 f8f3 	bl	8005cac <HAL_TIM_PWM_Stop>
}
 8000ac6:	e044      	b.n	8000b52 <Select_Key+0xc2>
		if(current_state.mode == TIME_SETTING)
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <Select_Key+0xc8>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d117      	bne.n	8000b00 <Select_Key+0x70>
			memcpy(&default_nvitem.setting_time, &stime, sizeof(TimeTypeDef));
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <Select_Key+0xdc>)
 8000ad2:	4a27      	ldr	r2, [pc, #156]	; (8000b70 <Select_Key+0xe0>)
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	8019      	strh	r1, [r3, #0]
 8000adc:	3302      	adds	r3, #2
 8000ade:	0c12      	lsrs	r2, r2, #16
 8000ae0:	701a      	strb	r2, [r3, #0]
			update_nvitems();
 8000ae2:	f7ff fe9f 	bl	8000824 <update_nvitems>
			memcpy(&ctime, &default_nvitem.setting_time, sizeof(TimeTypeDef));
 8000ae6:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <Select_Key+0xe4>)
 8000ae8:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <Select_Key+0xdc>)
 8000aea:	3304      	adds	r3, #4
 8000aec:	8819      	ldrh	r1, [r3, #0]
 8000aee:	789b      	ldrb	r3, [r3, #2]
 8000af0:	8011      	strh	r1, [r2, #0]
 8000af2:	7093      	strb	r3, [r2, #2]
			position = 0;
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <Select_Key+0xe8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
			current_state.mode = NORMAL_STATE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <Select_Key+0xc8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
		if(current_state.mode == ALARM_TIME_SETTING)
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <Select_Key+0xc8>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d10e      	bne.n	8000b26 <Select_Key+0x96>
			memcpy(&default_nvitem.alarm_time, &atime, sizeof(TimeTypeDef));
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <Select_Key+0xdc>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <Select_Key+0xec>)
 8000b0c:	3307      	adds	r3, #7
 8000b0e:	8811      	ldrh	r1, [r2, #0]
 8000b10:	7892      	ldrb	r2, [r2, #2]
 8000b12:	8019      	strh	r1, [r3, #0]
 8000b14:	709a      	strb	r2, [r3, #2]
			update_nvitems();
 8000b16:	f7ff fe85 	bl	8000824 <update_nvitems>
			position = 0;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <Select_Key+0xe8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
			current_state.mode = NORMAL_STATE;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <Select_Key+0xc8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
		if(current_state.mode == MUSIC_SELECT)
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <Select_Key+0xc8>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d111      	bne.n	8000b52 <Select_Key+0xc2>
			memcpy(&default_nvitem.alarm_music_num, &alarm_music[pos].music_num, sizeof(uint8_t));
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <Select_Key+0xf0>)
 8000b30:	f993 3000 	ldrsb.w	r3, [r3]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4613      	mov	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <Select_Key+0xf4>)
 8000b40:	4413      	add	r3, r2
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <Select_Key+0xdc>)
 8000b46:	729a      	strb	r2, [r3, #10]
			update_nvitems();
 8000b48:	f7ff fe6c 	bl	8000824 <update_nvitems>
			current_state.mode = NORMAL_STATE;
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <Select_Key+0xc8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000318 	.word	0x20000318
 8000b5c:	200001f8 	.word	0x200001f8
 8000b60:	20000205 	.word	0x20000205
 8000b64:	20000206 	.word	0x20000206
 8000b68:	20000320 	.word	0x20000320
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	200001fc 	.word	0x200001fc
 8000b74:	2000036c 	.word	0x2000036c
 8000b78:	20000204 	.word	0x20000204
 8000b7c:	20000200 	.word	0x20000200
 8000b80:	20000207 	.word	0x20000207
 8000b84:	2000000c 	.word	0x2000000c

08000b88 <Long_Key>:
void Long_Key()  //Long key operate
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	if(current_state.mode == NORMAL_STATE)
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Long_Key+0x24>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d105      	bne.n	8000ba0 <Long_Key+0x18>
	{
		alFlag = 1;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <Long_Key+0x28>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
		current_state.mode = ALARM_TIME_SETTING;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <Long_Key+0x24>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	701a      	strb	r2, [r3, #0]
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000318 	.word	0x20000318
 8000bb0:	20000203 	.word	0x20000203

08000bb4 <Double_Click>:
void Double_Click()  //Double click operate
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	if(current_state.mode == NORMAL_STATE)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <Double_Click+0x50>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <Double_Click+0x12>
	{
		current_state.mode = MUSIC_SELECT;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <Double_Click+0x50>)
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	701a      	strb	r2, [r3, #0]
	}
	if(current_state.mode == ALARM_TIME_SETTING)
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <Double_Click+0x50>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d10e      	bne.n	8000bec <Double_Click+0x38>
	{
		if(alFlag == 0)	alFlag = 1;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <Double_Click+0x54>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d103      	bne.n	8000bde <Double_Click+0x2a>
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <Double_Click+0x54>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e006      	b.n	8000bec <Double_Click+0x38>
		else if(alFlag == 1) alFlag = 0;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <Double_Click+0x54>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d102      	bne.n	8000bec <Double_Click+0x38>
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <Double_Click+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
	}
	if(current_state.mode == TIME_SETTING)
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <Double_Click+0x50>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d102      	bne.n	8000bfa <Double_Click+0x46>
	{
		current_state.mode = NORMAL_STATE;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <Double_Click+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	20000318 	.word	0x20000318
 8000c08:	20000203 	.word	0x20000203

08000c0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //User key
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;
	int i;

	if(GPIO_Pin == GPIO_PIN_13)
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c1c:	d174      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0xfc>
	{
		current_time = HAL_GetTick();
 8000c1e:	f001 fe43 	bl	80028a8 <HAL_GetTick>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a3a      	ldr	r2, [pc, #232]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c26:	6013      	str	r3, [r2, #0]
		time_interval = current_time - last_time;
 8000c28:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x108>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	4a39      	ldr	r2, [pc, #228]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c34:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a36      	ldr	r2, [pc, #216]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x108>)
 8000c3c:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 8000c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c42:	4836      	ldr	r0, [pc, #216]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x110>)
 8000c44:	f003 f892 	bl	8003d6c <HAL_GPIO_ReadPin>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	72fb      	strb	r3, [r7, #11]

		//printf("<%d,%d>\r\n",pin,time_interval);

		if(time_interval <= 2) // noise
 8000c4c:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d959      	bls.n	8000d08 <HAL_GPIO_EXTI_Callback+0xfc>
		{
			//printf("Noise %d,%d\r\n",pin,time_interval);
		}
		else
		{
			click[2].time = click[1].time;
 8000c54:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c5a:	6113      	str	r3, [r2, #16]
			click[2].level = click[1].level;
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c5e:	7b1a      	ldrb	r2, [r3, #12]
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c62:	751a      	strb	r2, [r3, #20]

			click[1].time = click[0].time;
 8000c64:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a2d      	ldr	r2, [pc, #180]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c6a:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c6e:	791a      	ldrb	r2, [r3, #4]
 8000c70:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c72:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c7c:	601a      	str	r2, [r3, #0]
			click[0].level = pin;
 8000c7e:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	7113      	strb	r3, [r2, #4]

			if(click[2].level == GPIO_PIN_RESET && click[1].level == GPIO_PIN_SET &&  click[0].level ==GPIO_PIN_RESET)
 8000c84:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c86:	7d1b      	ldrb	r3, [r3, #20]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d121      	bne.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xc4>
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c8e:	7b1b      	ldrb	r3, [r3, #12]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d11d      	bne.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xc4>
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c96:	791b      	ldrb	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d119      	bne.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xc4>
			{
				for(i=0;i<3;i++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	e00e      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xb4>
				{
					if(click[i].time>= DOUBLE_CLICK_MIN && click[i].time <= DOUBLE_CLICK_MAX)
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000caa:	2b27      	cmp	r3, #39	; 0x27
 8000cac:	dd0b      	ble.n	8000cc6 <HAL_GPIO_EXTI_Callback+0xba>
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cb6:	2b78      	cmp	r3, #120	; 0x78
 8000cb8:	dc05      	bgt.n	8000cc6 <HAL_GPIO_EXTI_Callback+0xba>
				for(i=0;i<3;i++)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	dded      	ble.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x96>
						continue;
					}
					else
						break;
				}
				if(i==3)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d101      	bne.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xc4>
				{
					Double_Click();
 8000ccc:	f7ff ff72 	bl	8000bb4 <Double_Click>
					//printf("Double Click\r\n");
				}
			}

			if(click[0].level == GPIO_PIN_RESET && click[0].time >=LONG_CLICK_MIN) // long click
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000cd2:	791b      	ldrb	r3, [r3, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d107      	bne.n	8000ce8 <HAL_GPIO_EXTI_Callback+0xdc>
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f240 52db 	movw	r2, #1499	; 0x5db
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	dd01      	ble.n	8000ce8 <HAL_GPIO_EXTI_Callback+0xdc>
			{
				Long_Key();
 8000ce4:	f7ff ff50 	bl	8000b88 <Long_Key>
				//printf("Long Key\r\n");
			}
			if(click[0].level == GPIO_PIN_RESET && click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX)
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000cea:	791b      	ldrb	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10b      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0xfc>
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f240 52db 	movw	r2, #1499	; 0x5db
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	dc05      	bgt.n	8000d08 <HAL_GPIO_EXTI_Callback+0xfc>
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x114>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b78      	cmp	r3, #120	; 0x78
 8000d02:	dd01      	ble.n	8000d08 <HAL_GPIO_EXTI_Callback+0xfc>
			{
				Select_Key();
 8000d04:	f7ff fec4 	bl	8000a90 <Select_Key>
				//printf("Select Key, %d\r\n",click[0].time);
			}
		}
	}
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000314 	.word	0x20000314
 8000d14:	200003d8 	.word	0x200003d8
 8000d18:	2000031c 	.word	0x2000031c
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	2000021c 	.word	0x2000021c

08000d24 <LCD_Blink>:

void LCD_Blink(TimeTypeDef* time, char str[17])  //Setting mode blink
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
	static int8_t blinkFlag = 0;
	static volatile int old_timer_count;

	if(timer_count - old_timer_count > 40)
 8000d2e:	4bb4      	ldr	r3, [pc, #720]	; (8001000 <LCD_Blink+0x2dc>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4bb4      	ldr	r3, [pc, #720]	; (8001004 <LCD_Blink+0x2e0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b28      	cmp	r3, #40	; 0x28
 8000d3a:	dd14      	ble.n	8000d66 <LCD_Blink+0x42>
	{
		if(blinkFlag == 0) blinkFlag = 1;
 8000d3c:	4bb2      	ldr	r3, [pc, #712]	; (8001008 <LCD_Blink+0x2e4>)
 8000d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d103      	bne.n	8000d4e <LCD_Blink+0x2a>
 8000d46:	4bb0      	ldr	r3, [pc, #704]	; (8001008 <LCD_Blink+0x2e4>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e007      	b.n	8000d5e <LCD_Blink+0x3a>
		else if(blinkFlag == 1) blinkFlag = 0;
 8000d4e:	4bae      	ldr	r3, [pc, #696]	; (8001008 <LCD_Blink+0x2e4>)
 8000d50:	f993 3000 	ldrsb.w	r3, [r3]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d102      	bne.n	8000d5e <LCD_Blink+0x3a>
 8000d58:	4bab      	ldr	r3, [pc, #684]	; (8001008 <LCD_Blink+0x2e4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
		old_timer_count = timer_count;
 8000d5e:	4ba8      	ldr	r3, [pc, #672]	; (8001000 <LCD_Blink+0x2dc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4aa8      	ldr	r2, [pc, #672]	; (8001004 <LCD_Blink+0x2e0>)
 8000d64:	6013      	str	r3, [r2, #0]
	}

	_60_Cvt(time);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fdb4 	bl	80008d4 <_60_Cvt>

	if(current_state.mode == TIME_SETTING || (current_state.mode == ALARM_TIME_SETTING && alFlag == 0))
 8000d6c:	4ba7      	ldr	r3, [pc, #668]	; (800100c <LCD_Blink+0x2e8>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d009      	beq.n	8000d88 <LCD_Blink+0x64>
 8000d74:	4ba5      	ldr	r3, [pc, #660]	; (800100c <LCD_Blink+0x2e8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	f040 80fa 	bne.w	8000f72 <LCD_Blink+0x24e>
 8000d7e:	4ba4      	ldr	r3, [pc, #656]	; (8001010 <LCD_Blink+0x2ec>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 80f5 	bne.w	8000f72 <LCD_Blink+0x24e>
	{
		if(time->hours <= 12)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d8e:	2b0c      	cmp	r3, #12
 8000d90:	dc72      	bgt.n	8000e78 <LCD_Blink+0x154>
		{
			if(blinkFlag == 0) sprintf(str,"%s %02d:%02d:%02d     ", ampm, time->hours, time->minutes, time->seconds);
 8000d92:	4b9d      	ldr	r3, [pc, #628]	; (8001008 <LCD_Blink+0x2e4>)
 8000d94:	f993 3000 	ldrsb.w	r3, [r3]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d113      	bne.n	8000dc4 <LCD_Blink+0xa0>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000da2:	4619      	mov	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	9200      	str	r2, [sp, #0]
 8000db6:	460b      	mov	r3, r1
 8000db8:	4a96      	ldr	r2, [pc, #600]	; (8001014 <LCD_Blink+0x2f0>)
 8000dba:	4997      	ldr	r1, [pc, #604]	; (8001018 <LCD_Blink+0x2f4>)
 8000dbc:	6838      	ldr	r0, [r7, #0]
 8000dbe:	f006 feb1 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000dc2:	e1f0      	b.n	80011a6 <LCD_Blink+0x482>
			else if (blinkFlag == 1)
 8000dc4:	4b90      	ldr	r3, [pc, #576]	; (8001008 <LCD_Blink+0x2e4>)
 8000dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	f040 81eb 	bne.w	80011a6 <LCD_Blink+0x482>
			{
				if(position == 0) sprintf(str,"__ %02d:%02d:%02d     ",time->hours, time->minutes, time->seconds);
 8000dd0:	4b92      	ldr	r3, [pc, #584]	; (800101c <LCD_Blink+0x2f8>)
 8000dd2:	f993 3000 	ldrsb.w	r3, [r3]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d111      	bne.n	8000dfe <LCD_Blink+0xda>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f993 3000 	ldrsb.w	r3, [r3]
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000de8:	4619      	mov	r1, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	460b      	mov	r3, r1
 8000df4:	498a      	ldr	r1, [pc, #552]	; (8001020 <LCD_Blink+0x2fc>)
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f006 fe94 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000dfc:	e1d3      	b.n	80011a6 <LCD_Blink+0x482>
				else if(position == 1) sprintf(str,"%s __:%02d:%02d     ", ampm, time->minutes, time->seconds);
 8000dfe:	4b87      	ldr	r3, [pc, #540]	; (800101c <LCD_Blink+0x2f8>)
 8000e00:	f993 3000 	ldrsb.w	r3, [r3]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d10e      	bne.n	8000e26 <LCD_Blink+0x102>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	4a7e      	ldr	r2, [pc, #504]	; (8001014 <LCD_Blink+0x2f0>)
 8000e1c:	4981      	ldr	r1, [pc, #516]	; (8001024 <LCD_Blink+0x300>)
 8000e1e:	6838      	ldr	r0, [r7, #0]
 8000e20:	f006 fe80 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000e24:	e1bf      	b.n	80011a6 <LCD_Blink+0x482>
				else if(position == 2) sprintf(str,"%s %02d:__:%02d     ", ampm, time->hours, time->seconds);
 8000e26:	4b7d      	ldr	r3, [pc, #500]	; (800101c <LCD_Blink+0x2f8>)
 8000e28:	f993 3000 	ldrsb.w	r3, [r3]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d10e      	bne.n	8000e4e <LCD_Blink+0x12a>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f993 3000 	ldrsb.w	r3, [r3]
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	4613      	mov	r3, r2
 8000e42:	4a74      	ldr	r2, [pc, #464]	; (8001014 <LCD_Blink+0x2f0>)
 8000e44:	4978      	ldr	r1, [pc, #480]	; (8001028 <LCD_Blink+0x304>)
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f006 fe6c 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000e4c:	e1ab      	b.n	80011a6 <LCD_Blink+0x482>
				else if(position == 3) sprintf(str,"%s %02d:%02d:__     ", ampm, time->hours, time->minutes);
 8000e4e:	4b73      	ldr	r3, [pc, #460]	; (800101c <LCD_Blink+0x2f8>)
 8000e50:	f993 3000 	ldrsb.w	r3, [r3]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	f040 81a6 	bne.w	80011a6 <LCD_Blink+0x482>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	4a69      	ldr	r2, [pc, #420]	; (8001014 <LCD_Blink+0x2f0>)
 8000e6e:	496f      	ldr	r1, [pc, #444]	; (800102c <LCD_Blink+0x308>)
 8000e70:	6838      	ldr	r0, [r7, #0]
 8000e72:	f006 fe57 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000e76:	e196      	b.n	80011a6 <LCD_Blink+0x482>
			}
		}
		else if(time->hours > 12)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e7e:	2b0c      	cmp	r3, #12
 8000e80:	f340 8191 	ble.w	80011a6 <LCD_Blink+0x482>
		{
			if(blinkFlag == 0) sprintf(str,"%s %02d:%02d:%02d     ", ampm, time->hours-12, time->minutes, time->seconds);
 8000e84:	4b60      	ldr	r3, [pc, #384]	; (8001008 <LCD_Blink+0x2e4>)
 8000e86:	f993 3000 	ldrsb.w	r3, [r3]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d114      	bne.n	8000eb8 <LCD_Blink+0x194>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f993 3000 	ldrsb.w	r3, [r3]
 8000e94:	f1a3 020c 	sub.w	r2, r3, #12
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	9100      	str	r1, [sp, #0]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	4a59      	ldr	r2, [pc, #356]	; (8001014 <LCD_Blink+0x2f0>)
 8000eae:	495a      	ldr	r1, [pc, #360]	; (8001018 <LCD_Blink+0x2f4>)
 8000eb0:	6838      	ldr	r0, [r7, #0]
 8000eb2:	f006 fe37 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000eb6:	e176      	b.n	80011a6 <LCD_Blink+0x482>
			else if (blinkFlag == 1)
 8000eb8:	4b53      	ldr	r3, [pc, #332]	; (8001008 <LCD_Blink+0x2e4>)
 8000eba:	f993 3000 	ldrsb.w	r3, [r3]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	f040 8171 	bne.w	80011a6 <LCD_Blink+0x482>
			{
				if(position == 0) sprintf(str,"__ %02d:%02d:%02d     ",time->hours-12, time->minutes, time->seconds);
 8000ec4:	4b55      	ldr	r3, [pc, #340]	; (800101c <LCD_Blink+0x2f8>)
 8000ec6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d112      	bne.n	8000ef4 <LCD_Blink+0x1d0>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ed4:	f1a3 020c 	sub.w	r2, r3, #12
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	494d      	ldr	r1, [pc, #308]	; (8001020 <LCD_Blink+0x2fc>)
 8000eec:	6838      	ldr	r0, [r7, #0]
 8000eee:	f006 fe19 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000ef2:	e158      	b.n	80011a6 <LCD_Blink+0x482>
				else if(position == 1) sprintf(str,"%s __:%02d:%02d     ", ampm, time->minutes, time->seconds);
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <LCD_Blink+0x2f8>)
 8000ef6:	f993 3000 	ldrsb.w	r3, [r3]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d10e      	bne.n	8000f1c <LCD_Blink+0x1f8>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f04:	461a      	mov	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	4a40      	ldr	r2, [pc, #256]	; (8001014 <LCD_Blink+0x2f0>)
 8000f12:	4944      	ldr	r1, [pc, #272]	; (8001024 <LCD_Blink+0x300>)
 8000f14:	6838      	ldr	r0, [r7, #0]
 8000f16:	f006 fe05 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000f1a:	e144      	b.n	80011a6 <LCD_Blink+0x482>
				else if(position == 2) sprintf(str,"%s %02d:__:%02d     ", ampm, time->hours-12, time->seconds);
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	; (800101c <LCD_Blink+0x2f8>)
 8000f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d10f      	bne.n	8000f46 <LCD_Blink+0x222>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f993 3000 	ldrsb.w	r3, [r3]
 8000f2c:	f1a3 020c 	sub.w	r2, r3, #12
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	4a36      	ldr	r2, [pc, #216]	; (8001014 <LCD_Blink+0x2f0>)
 8000f3c:	493a      	ldr	r1, [pc, #232]	; (8001028 <LCD_Blink+0x304>)
 8000f3e:	6838      	ldr	r0, [r7, #0]
 8000f40:	f006 fdf0 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000f44:	e12f      	b.n	80011a6 <LCD_Blink+0x482>
				else if(position == 3) sprintf(str,"%s %02d:%02d:__     ", ampm, time->hours-12, time->minutes);
 8000f46:	4b35      	ldr	r3, [pc, #212]	; (800101c <LCD_Blink+0x2f8>)
 8000f48:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	f040 812a 	bne.w	80011a6 <LCD_Blink+0x482>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f993 3000 	ldrsb.w	r3, [r3]
 8000f58:	f1a3 020c 	sub.w	r2, r3, #12
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4613      	mov	r3, r2
 8000f66:	4a2b      	ldr	r2, [pc, #172]	; (8001014 <LCD_Blink+0x2f0>)
 8000f68:	4930      	ldr	r1, [pc, #192]	; (800102c <LCD_Blink+0x308>)
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f006 fdda 	bl	8007b24 <siprintf>
		if(time->hours <= 12)
 8000f70:	e119      	b.n	80011a6 <LCD_Blink+0x482>
			}
		}
	}

	else if(current_state.mode == ALARM_TIME_SETTING && alFlag == 1)
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <LCD_Blink+0x2e8>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	f040 8116 	bne.w	80011a8 <LCD_Blink+0x484>
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <LCD_Blink+0x2ec>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	f040 8111 	bne.w	80011a8 <LCD_Blink+0x484>
	{
		if(time->hours <= 12)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f993 3000 	ldrsb.w	r3, [r3]
 8000f8c:	2b0c      	cmp	r3, #12
 8000f8e:	f300 8090 	bgt.w	80010b2 <LCD_Blink+0x38e>
		{
			if(blinkFlag == 0) sprintf(str,"%s %02d:%02d:%02d AL", ampm, time->hours, time->minutes, time->seconds);
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <LCD_Blink+0x2e4>)
 8000f94:	f993 3000 	ldrsb.w	r3, [r3]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d113      	bne.n	8000fc4 <LCD_Blink+0x2a0>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000faa:	461a      	mov	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	9200      	str	r2, [sp, #0]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4a16      	ldr	r2, [pc, #88]	; (8001014 <LCD_Blink+0x2f0>)
 8000fba:	491d      	ldr	r1, [pc, #116]	; (8001030 <LCD_Blink+0x30c>)
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f006 fdb1 	bl	8007b24 <siprintf>
				else if(position == 2) sprintf(str,"%s %02d:__:%02d AL", ampm, time->hours-12, time->seconds);
				else if(position == 3) sprintf(str,"%s %02d:%02d:__ AL", ampm, time->hours-12, time->minutes);
			}
		}
	}
}
 8000fc2:	e0f1      	b.n	80011a8 <LCD_Blink+0x484>
			else if (blinkFlag == 1)
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <LCD_Blink+0x2e4>)
 8000fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	f040 80ec 	bne.w	80011a8 <LCD_Blink+0x484>
				if(position == 0) sprintf(str,"__ %02d:%02d:%02d AL",time->hours, time->minutes, time->seconds);
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <LCD_Blink+0x2f8>)
 8000fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d12e      	bne.n	8001038 <LCD_Blink+0x314>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	490f      	ldr	r1, [pc, #60]	; (8001034 <LCD_Blink+0x310>)
 8000ff6:	6838      	ldr	r0, [r7, #0]
 8000ff8:	f006 fd94 	bl	8007b24 <siprintf>
}
 8000ffc:	e0d4      	b.n	80011a8 <LCD_Blink+0x484>
 8000ffe:	bf00      	nop
 8001000:	20000468 	.word	0x20000468
 8001004:	20000208 	.word	0x20000208
 8001008:	2000020c 	.word	0x2000020c
 800100c:	20000318 	.word	0x20000318
 8001010:	20000203 	.word	0x20000203
 8001014:	20000168 	.word	0x20000168
 8001018:	080083c0 	.word	0x080083c0
 800101c:	20000204 	.word	0x20000204
 8001020:	080083d8 	.word	0x080083d8
 8001024:	080083f0 	.word	0x080083f0
 8001028:	08008408 	.word	0x08008408
 800102c:	08008420 	.word	0x08008420
 8001030:	08008438 	.word	0x08008438
 8001034:	08008450 	.word	0x08008450
				else if(position == 1) sprintf(str,"%s __:%02d:%02d AL", ampm, time->minutes, time->seconds);
 8001038:	4b5d      	ldr	r3, [pc, #372]	; (80011b0 <LCD_Blink+0x48c>)
 800103a:	f993 3000 	ldrsb.w	r3, [r3]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d10e      	bne.n	8001060 <LCD_Blink+0x33c>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4613      	mov	r3, r2
 8001054:	4a57      	ldr	r2, [pc, #348]	; (80011b4 <LCD_Blink+0x490>)
 8001056:	4958      	ldr	r1, [pc, #352]	; (80011b8 <LCD_Blink+0x494>)
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f006 fd63 	bl	8007b24 <siprintf>
}
 800105e:	e0a3      	b.n	80011a8 <LCD_Blink+0x484>
				else if(position == 2) sprintf(str,"%s %02d:__:%02d AL", ampm, time->hours, time->seconds);
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <LCD_Blink+0x48c>)
 8001062:	f993 3000 	ldrsb.w	r3, [r3]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d10e      	bne.n	8001088 <LCD_Blink+0x364>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f993 3000 	ldrsb.w	r3, [r3]
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	4613      	mov	r3, r2
 800107c:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <LCD_Blink+0x490>)
 800107e:	494f      	ldr	r1, [pc, #316]	; (80011bc <LCD_Blink+0x498>)
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f006 fd4f 	bl	8007b24 <siprintf>
}
 8001086:	e08f      	b.n	80011a8 <LCD_Blink+0x484>
				else if(position == 3) sprintf(str,"%s %02d:%02d:__ AL", ampm, time->hours, time->minutes);
 8001088:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <LCD_Blink+0x48c>)
 800108a:	f993 3000 	ldrsb.w	r3, [r3]
 800108e:	2b03      	cmp	r3, #3
 8001090:	f040 808a 	bne.w	80011a8 <LCD_Blink+0x484>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f993 3000 	ldrsb.w	r3, [r3]
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4613      	mov	r3, r2
 80010a6:	4a43      	ldr	r2, [pc, #268]	; (80011b4 <LCD_Blink+0x490>)
 80010a8:	4945      	ldr	r1, [pc, #276]	; (80011c0 <LCD_Blink+0x49c>)
 80010aa:	6838      	ldr	r0, [r7, #0]
 80010ac:	f006 fd3a 	bl	8007b24 <siprintf>
}
 80010b0:	e07a      	b.n	80011a8 <LCD_Blink+0x484>
		else if(time->hours > 12)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f993 3000 	ldrsb.w	r3, [r3]
 80010b8:	2b0c      	cmp	r3, #12
 80010ba:	dd75      	ble.n	80011a8 <LCD_Blink+0x484>
			if(blinkFlag == 0) sprintf(str,"%s %02d:%02d:%02d AL", ampm, time->hours-12, time->minutes, time->seconds);
 80010bc:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <LCD_Blink+0x4a0>)
 80010be:	f993 3000 	ldrsb.w	r3, [r3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d114      	bne.n	80010f0 <LCD_Blink+0x3cc>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f993 3000 	ldrsb.w	r3, [r3]
 80010cc:	f1a3 020c 	sub.w	r2, r3, #12
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010d6:	4619      	mov	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	9100      	str	r1, [sp, #0]
 80010e2:	4613      	mov	r3, r2
 80010e4:	4a33      	ldr	r2, [pc, #204]	; (80011b4 <LCD_Blink+0x490>)
 80010e6:	4938      	ldr	r1, [pc, #224]	; (80011c8 <LCD_Blink+0x4a4>)
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f006 fd1b 	bl	8007b24 <siprintf>
}
 80010ee:	e05b      	b.n	80011a8 <LCD_Blink+0x484>
			else if (blinkFlag == 1)
 80010f0:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <LCD_Blink+0x4a0>)
 80010f2:	f993 3000 	ldrsb.w	r3, [r3]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d156      	bne.n	80011a8 <LCD_Blink+0x484>
				if(position == 0) sprintf(str,"__ %02d:%02d:%02d AL",time->hours-12, time->minutes, time->seconds);
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <LCD_Blink+0x48c>)
 80010fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d112      	bne.n	800112a <LCD_Blink+0x406>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f993 3000 	ldrsb.w	r3, [r3]
 800110a:	f1a3 020c 	sub.w	r2, r3, #12
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001114:	4619      	mov	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	460b      	mov	r3, r1
 8001120:	492a      	ldr	r1, [pc, #168]	; (80011cc <LCD_Blink+0x4a8>)
 8001122:	6838      	ldr	r0, [r7, #0]
 8001124:	f006 fcfe 	bl	8007b24 <siprintf>
}
 8001128:	e03e      	b.n	80011a8 <LCD_Blink+0x484>
				else if(position == 1) sprintf(str,"%s __:%02d:%02d AL", ampm, time->minutes, time->seconds);
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <LCD_Blink+0x48c>)
 800112c:	f993 3000 	ldrsb.w	r3, [r3]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d10e      	bne.n	8001152 <LCD_Blink+0x42e>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <LCD_Blink+0x490>)
 8001148:	491b      	ldr	r1, [pc, #108]	; (80011b8 <LCD_Blink+0x494>)
 800114a:	6838      	ldr	r0, [r7, #0]
 800114c:	f006 fcea 	bl	8007b24 <siprintf>
}
 8001150:	e02a      	b.n	80011a8 <LCD_Blink+0x484>
				else if(position == 2) sprintf(str,"%s %02d:__:%02d AL", ampm, time->hours-12, time->seconds);
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <LCD_Blink+0x48c>)
 8001154:	f993 3000 	ldrsb.w	r3, [r3]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d10f      	bne.n	800117c <LCD_Blink+0x458>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f993 3000 	ldrsb.w	r3, [r3]
 8001162:	f1a3 020c 	sub.w	r2, r3, #12
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4613      	mov	r3, r2
 8001170:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <LCD_Blink+0x490>)
 8001172:	4912      	ldr	r1, [pc, #72]	; (80011bc <LCD_Blink+0x498>)
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f006 fcd5 	bl	8007b24 <siprintf>
}
 800117a:	e015      	b.n	80011a8 <LCD_Blink+0x484>
				else if(position == 3) sprintf(str,"%s %02d:%02d:__ AL", ampm, time->hours-12, time->minutes);
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <LCD_Blink+0x48c>)
 800117e:	f993 3000 	ldrsb.w	r3, [r3]
 8001182:	2b03      	cmp	r3, #3
 8001184:	d110      	bne.n	80011a8 <LCD_Blink+0x484>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f993 3000 	ldrsb.w	r3, [r3]
 800118c:	f1a3 020c 	sub.w	r2, r3, #12
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <LCD_Blink+0x490>)
 800119c:	4908      	ldr	r1, [pc, #32]	; (80011c0 <LCD_Blink+0x49c>)
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f006 fcc0 	bl	8007b24 <siprintf>
}
 80011a4:	e000      	b.n	80011a8 <LCD_Blink+0x484>
		if(time->hours <= 12)
 80011a6:	bf00      	nop
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000204 	.word	0x20000204
 80011b4:	20000168 	.word	0x20000168
 80011b8:	08008468 	.word	0x08008468
 80011bc:	0800847c 	.word	0x0800847c
 80011c0:	08008490 	.word	0x08008490
 80011c4:	2000020c 	.word	0x2000020c
 80011c8:	08008438 	.word	0x08008438
 80011cc:	08008450 	.word	0x08008450

080011d0 <TIME_Setting>:

void TIME_Setting(TimeTypeDef* time, char str[17])  //Settin mode
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	switch(current_state.button)  //ADC button operate
 80011da:	4b70      	ldr	r3, [pc, #448]	; (800139c <TIME_Setting+0x1cc>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	f200 80c0 	bhi.w	8001364 <TIME_Setting+0x194>
 80011e4:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <TIME_Setting+0x1c>)
 80011e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ea:	bf00      	nop
 80011ec:	080011fd 	.word	0x080011fd
 80011f0:	0800128d 	.word	0x0800128d
 80011f4:	08001341 	.word	0x08001341
 80011f8:	0800131d 	.word	0x0800131d
	{
	case UP:
		if(position == 0)
 80011fc:	4b68      	ldr	r3, [pc, #416]	; (80013a0 <TIME_Setting+0x1d0>)
 80011fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d117      	bne.n	8001236 <TIME_Setting+0x66>
		{
			if(time->hours < 12) time->hours += 12;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f993 3000 	ldrsb.w	r3, [r3]
 800120c:	2b0b      	cmp	r3, #11
 800120e:	dc09      	bgt.n	8001224 <TIME_Setting+0x54>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f993 3000 	ldrsb.w	r3, [r3]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	330c      	adds	r3, #12
 800121a:	b2db      	uxtb	r3, r3
 800121c:	b25a      	sxtb	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e008      	b.n	8001236 <TIME_Setting+0x66>
			else time->hours -= 12;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f993 3000 	ldrsb.w	r3, [r3]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	3b0c      	subs	r3, #12
 800122e:	b2db      	uxtb	r3, r3
 8001230:	b25a      	sxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	701a      	strb	r2, [r3, #0]
		}
		if(position == 1) time->hours++;
 8001236:	4b5a      	ldr	r3, [pc, #360]	; (80013a0 <TIME_Setting+0x1d0>)
 8001238:	f993 3000 	ldrsb.w	r3, [r3]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <TIME_Setting+0x82>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f993 3000 	ldrsb.w	r3, [r3]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	3301      	adds	r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	b25a      	sxtb	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	701a      	strb	r2, [r3, #0]
		if(position == 2) time->minutes++;
 8001252:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <TIME_Setting+0x1d0>)
 8001254:	f993 3000 	ldrsb.w	r3, [r3]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d108      	bne.n	800126e <TIME_Setting+0x9e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3301      	adds	r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	b25a      	sxtb	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	705a      	strb	r2, [r3, #1]
		if(position == 3) time->seconds++;
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <TIME_Setting+0x1d0>)
 8001270:	f993 3000 	ldrsb.w	r3, [r3]
 8001274:	2b03      	cmp	r3, #3
 8001276:	d179      	bne.n	800136c <TIME_Setting+0x19c>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	b25a      	sxtb	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	709a      	strb	r2, [r3, #2]
		break;
 800128a:	e06f      	b.n	800136c <TIME_Setting+0x19c>
	case DOWN:
		if(position == 0)
 800128c:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <TIME_Setting+0x1d0>)
 800128e:	f993 3000 	ldrsb.w	r3, [r3]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d117      	bne.n	80012c6 <TIME_Setting+0xf6>
		{
			if(time->hours < 12) time->hours += 12;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f993 3000 	ldrsb.w	r3, [r3]
 800129c:	2b0b      	cmp	r3, #11
 800129e:	dc09      	bgt.n	80012b4 <TIME_Setting+0xe4>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f993 3000 	ldrsb.w	r3, [r3]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	330c      	adds	r3, #12
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	b25a      	sxtb	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e008      	b.n	80012c6 <TIME_Setting+0xf6>
			else time->hours -= 12;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f993 3000 	ldrsb.w	r3, [r3]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3b0c      	subs	r3, #12
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	b25a      	sxtb	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	701a      	strb	r2, [r3, #0]
		}
		if(position == 1) time->hours--;
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <TIME_Setting+0x1d0>)
 80012c8:	f993 3000 	ldrsb.w	r3, [r3]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d108      	bne.n	80012e2 <TIME_Setting+0x112>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f993 3000 	ldrsb.w	r3, [r3]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	3b01      	subs	r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	b25a      	sxtb	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	701a      	strb	r2, [r3, #0]
		if(position == 2) time->minutes--;
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <TIME_Setting+0x1d0>)
 80012e4:	f993 3000 	ldrsb.w	r3, [r3]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d108      	bne.n	80012fe <TIME_Setting+0x12e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	705a      	strb	r2, [r3, #1]
		if(position == 3) time->seconds--;
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <TIME_Setting+0x1d0>)
 8001300:	f993 3000 	ldrsb.w	r3, [r3]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d133      	bne.n	8001370 <TIME_Setting+0x1a0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	3b01      	subs	r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	b25a      	sxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	709a      	strb	r2, [r3, #2]
		break;
 800131a:	e029      	b.n	8001370 <TIME_Setting+0x1a0>
	case LEFT:
		position--;
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <TIME_Setting+0x1d0>)
 800131e:	f993 3000 	ldrsb.w	r3, [r3]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	3b01      	subs	r3, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	b25a      	sxtb	r2, r3
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <TIME_Setting+0x1d0>)
 800132c:	701a      	strb	r2, [r3, #0]
		if(position < 0) position = 3;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <TIME_Setting+0x1d0>)
 8001330:	f993 3000 	ldrsb.w	r3, [r3]
 8001334:	2b00      	cmp	r3, #0
 8001336:	da1d      	bge.n	8001374 <TIME_Setting+0x1a4>
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <TIME_Setting+0x1d0>)
 800133a:	2203      	movs	r2, #3
 800133c:	701a      	strb	r2, [r3, #0]
		break;
 800133e:	e019      	b.n	8001374 <TIME_Setting+0x1a4>
	case RIGHT:
		position++;
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <TIME_Setting+0x1d0>)
 8001342:	f993 3000 	ldrsb.w	r3, [r3]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	3301      	adds	r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	b25a      	sxtb	r2, r3
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <TIME_Setting+0x1d0>)
 8001350:	701a      	strb	r2, [r3, #0]
		if(position > 3) position = 0;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <TIME_Setting+0x1d0>)
 8001354:	f993 3000 	ldrsb.w	r3, [r3]
 8001358:	2b03      	cmp	r3, #3
 800135a:	dd0d      	ble.n	8001378 <TIME_Setting+0x1a8>
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <TIME_Setting+0x1d0>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
		break;
 8001362:	e009      	b.n	8001378 <TIME_Setting+0x1a8>
	default:
		current_state.button = NO_KEY;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <TIME_Setting+0x1cc>)
 8001366:	2204      	movs	r2, #4
 8001368:	705a      	strb	r2, [r3, #1]
		break;
 800136a:	e006      	b.n	800137a <TIME_Setting+0x1aa>
		break;
 800136c:	bf00      	nop
 800136e:	e004      	b.n	800137a <TIME_Setting+0x1aa>
		break;
 8001370:	bf00      	nop
 8001372:	e002      	b.n	800137a <TIME_Setting+0x1aa>
		break;
 8001374:	bf00      	nop
 8001376:	e000      	b.n	800137a <TIME_Setting+0x1aa>
		break;
 8001378:	bf00      	nop
	}

	if(current_state.mode == TIME_SETTING || current_state.mode == ALARM_TIME_SETTING)
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <TIME_Setting+0x1cc>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d003      	beq.n	800138a <TIME_Setting+0x1ba>
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <TIME_Setting+0x1cc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d103      	bne.n	8001392 <TIME_Setting+0x1c2>
	{
		LCD_Blink(time, str);
 800138a:	6839      	ldr	r1, [r7, #0]
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fcc9 	bl	8000d24 <LCD_Blink>
	}
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000318 	.word	0x20000318
 80013a0:	20000204 	.word	0x20000204

080013a4 <MUSIC_Select>:

void MUSIC_Select(char line1[17], char line2[17])  //Music select mode
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	uint8_t count;

	pos = current_state.music_num;
 80013ae:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <MUSIC_Select+0x10c>)
 80013b0:	789b      	ldrb	r3, [r3, #2]
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <MUSIC_Select+0x110>)
 80013b6:	701a      	strb	r2, [r3, #0]
	count = sizeof(alarm_music)/sizeof(alarm_music[0]);  //total music count
 80013b8:	2303      	movs	r3, #3
 80013ba:	73fb      	strb	r3, [r7, #15]

	switch(current_state.button)
 80013bc:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <MUSIC_Select+0x10c>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <MUSIC_Select+0x26>
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d014      	beq.n	80013f2 <MUSIC_Select+0x4e>
			pos = count - 1;
		}
		break;
	default:

		break;
 80013c8:	e02b      	b.n	8001422 <MUSIC_Select+0x7e>
		pos++;
 80013ca:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <MUSIC_Select+0x110>)
 80013cc:	f993 3000 	ldrsb.w	r3, [r3]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	b25a      	sxtb	r2, r3
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <MUSIC_Select+0x110>)
 80013da:	701a      	strb	r2, [r3, #0]
		if(pos == count)
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <MUSIC_Select+0x110>)
 80013de:	f993 3000 	ldrsb.w	r3, [r3]
 80013e2:	461a      	mov	r2, r3
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d118      	bne.n	800141c <MUSIC_Select+0x78>
			pos = 0;
 80013ea:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <MUSIC_Select+0x110>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
		break;
 80013f0:	e014      	b.n	800141c <MUSIC_Select+0x78>
		pos--;
 80013f2:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <MUSIC_Select+0x110>)
 80013f4:	f993 3000 	ldrsb.w	r3, [r3]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <MUSIC_Select+0x110>)
 8001402:	701a      	strb	r2, [r3, #0]
		if(pos < 0)
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MUSIC_Select+0x110>)
 8001406:	f993 3000 	ldrsb.w	r3, [r3]
 800140a:	2b00      	cmp	r3, #0
 800140c:	da08      	bge.n	8001420 <MUSIC_Select+0x7c>
			pos = count - 1;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	3b01      	subs	r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	b25a      	sxtb	r2, r3
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <MUSIC_Select+0x110>)
 8001418:	701a      	strb	r2, [r3, #0]
		break;
 800141a:	e001      	b.n	8001420 <MUSIC_Select+0x7c>
		break;
 800141c:	bf00      	nop
 800141e:	e000      	b.n	8001422 <MUSIC_Select+0x7e>
		break;
 8001420:	bf00      	nop
	}
	current_state.music_num =  pos;
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <MUSIC_Select+0x110>)
 8001424:	f993 3000 	ldrsb.w	r3, [r3]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MUSIC_Select+0x10c>)
 800142c:	709a      	strb	r2, [r3, #2]

	if(pos <= count-2)
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	3b01      	subs	r3, #1
 8001432:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <MUSIC_Select+0x110>)
 8001434:	f992 2000 	ldrsb.w	r2, [r2]
 8001438:	4293      	cmp	r3, r2
 800143a:	dd20      	ble.n	800147e <MUSIC_Select+0xda>
	{
		sprintf(line1,"%s <<",alarm_music[pos].music_title);  // "<" mark is selected music title
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MUSIC_Select+0x110>)
 800143e:	f993 3000 	ldrsb.w	r3, [r3]
 8001442:	461a      	mov	r2, r3
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <MUSIC_Select+0x114>)
 800144e:	4413      	add	r3, r2
 8001450:	3301      	adds	r3, #1
 8001452:	461a      	mov	r2, r3
 8001454:	4919      	ldr	r1, [pc, #100]	; (80014bc <MUSIC_Select+0x118>)
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f006 fb64 	bl	8007b24 <siprintf>
		sprintf(line2,"%s   ",alarm_music[pos+1].music_title);
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MUSIC_Select+0x110>)
 800145e:	f993 3000 	ldrsb.w	r3, [r3]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <MUSIC_Select+0x114>)
 800146e:	4413      	add	r3, r2
 8001470:	3301      	adds	r3, #1
 8001472:	461a      	mov	r2, r3
 8001474:	4912      	ldr	r1, [pc, #72]	; (80014c0 <MUSIC_Select+0x11c>)
 8001476:	6838      	ldr	r0, [r7, #0]
 8001478:	f006 fb54 	bl	8007b24 <siprintf>
	else
	{
		sprintf(line1,"%s   ",alarm_music[pos].music_title);
		sprintf(line2,"%s   ",alarm_music[0].music_title);
	}
}
 800147c:	e014      	b.n	80014a8 <MUSIC_Select+0x104>
		sprintf(line1,"%s   ",alarm_music[pos].music_title);
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <MUSIC_Select+0x110>)
 8001480:	f993 3000 	ldrsb.w	r3, [r3]
 8001484:	461a      	mov	r2, r3
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <MUSIC_Select+0x114>)
 8001490:	4413      	add	r3, r2
 8001492:	3301      	adds	r3, #1
 8001494:	461a      	mov	r2, r3
 8001496:	490a      	ldr	r1, [pc, #40]	; (80014c0 <MUSIC_Select+0x11c>)
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f006 fb43 	bl	8007b24 <siprintf>
		sprintf(line2,"%s   ",alarm_music[0].music_title);
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <MUSIC_Select+0x120>)
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <MUSIC_Select+0x11c>)
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f006 fb3e 	bl	8007b24 <siprintf>
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000318 	.word	0x20000318
 80014b4:	20000207 	.word	0x20000207
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	080084a4 	.word	0x080084a4
 80014c0:	080084ac 	.word	0x080084ac
 80014c4:	2000000d 	.word	0x2000000d

080014c8 <_12_Cvt>:

void _12_Cvt(TimeTypeDef* time, char str[17])  //12시제 컨버터
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	if(alFlag == 0)
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <_12_Cvt+0xec>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d132      	bne.n	8001540 <_12_Cvt+0x78>
	{
		if(time->hours <= 12)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f993 3000 	ldrsb.w	r3, [r3]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	dc13      	bgt.n	800150c <_12_Cvt+0x44>
		{
			sprintf(str,"%s %02d:%02d:%02d     ",ampm, time->hours, time->minutes, time->seconds);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ea:	4619      	mov	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014f2:	461a      	mov	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	9200      	str	r2, [sp, #0]
 80014fe:	460b      	mov	r3, r1
 8001500:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <_12_Cvt+0xf0>)
 8001502:	492e      	ldr	r1, [pc, #184]	; (80015bc <_12_Cvt+0xf4>)
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f006 fb0d 	bl	8007b24 <siprintf>
		else if(time->hours > 12)
		{
			sprintf(str,"%s %02d:%02d:%02d AL",ampm, time->hours-12, time->minutes, time->seconds);
		}
	}
}
 800150a:	e04f      	b.n	80015ac <_12_Cvt+0xe4>
		else if(time->hours > 12)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f993 3000 	ldrsb.w	r3, [r3]
 8001512:	2b0c      	cmp	r3, #12
 8001514:	dd4a      	ble.n	80015ac <_12_Cvt+0xe4>
			sprintf(str,"%s %02d:%02d:%02d     ",ampm, time->hours-12, time->minutes, time->seconds);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f993 3000 	ldrsb.w	r3, [r3]
 800151c:	f1a3 020c 	sub.w	r2, r3, #12
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001526:	4619      	mov	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	9100      	str	r1, [sp, #0]
 8001532:	4613      	mov	r3, r2
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <_12_Cvt+0xf0>)
 8001536:	4921      	ldr	r1, [pc, #132]	; (80015bc <_12_Cvt+0xf4>)
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f006 faf3 	bl	8007b24 <siprintf>
}
 800153e:	e035      	b.n	80015ac <_12_Cvt+0xe4>
	else if(alFlag == 1)
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <_12_Cvt+0xec>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d131      	bne.n	80015ac <_12_Cvt+0xe4>
		if(time->hours <= 12)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f993 3000 	ldrsb.w	r3, [r3]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	dc13      	bgt.n	800157a <_12_Cvt+0xb2>
			sprintf(str,"%s %02d:%02d:%02d AL",ampm, time->hours, time->minutes, time->seconds);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f993 3000 	ldrsb.w	r3, [r3]
 8001558:	4619      	mov	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	9200      	str	r2, [sp, #0]
 800156c:	460b      	mov	r3, r1
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_12_Cvt+0xf0>)
 8001570:	4913      	ldr	r1, [pc, #76]	; (80015c0 <_12_Cvt+0xf8>)
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f006 fad6 	bl	8007b24 <siprintf>
}
 8001578:	e018      	b.n	80015ac <_12_Cvt+0xe4>
		else if(time->hours > 12)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f993 3000 	ldrsb.w	r3, [r3]
 8001580:	2b0c      	cmp	r3, #12
 8001582:	dd13      	ble.n	80015ac <_12_Cvt+0xe4>
			sprintf(str,"%s %02d:%02d:%02d AL",ampm, time->hours-12, time->minutes, time->seconds);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f993 3000 	ldrsb.w	r3, [r3]
 800158a:	f1a3 020c 	sub.w	r2, r3, #12
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001594:	4619      	mov	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	9100      	str	r1, [sp, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_12_Cvt+0xf0>)
 80015a4:	4906      	ldr	r1, [pc, #24]	; (80015c0 <_12_Cvt+0xf8>)
 80015a6:	6838      	ldr	r0, [r7, #0]
 80015a8:	f006 fabc 	bl	8007b24 <siprintf>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000203 	.word	0x20000203
 80015b8:	20000168 	.word	0x20000168
 80015bc:	080083c0 	.word	0x080083c0
 80015c0:	08008438 	.word	0x08008438

080015c4 <LCD_Display>:

void LCD_Display()  //Display
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
	char time_str[17];
	char mode_str[17];

	switch(current_state.mode)
 80015ca:	4b27      	ldr	r3, [pc, #156]	; (8001668 <LCD_Display+0xa4>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d836      	bhi.n	8001640 <LCD_Display+0x7c>
 80015d2:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <LCD_Display+0x14>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	08001601 	.word	0x08001601
 80015e0:	08001619 	.word	0x08001619
 80015e4:	08001631 	.word	0x08001631
	{
	case NORMAL_STATE:
		_12_Cvt(&ctime, time_str);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	481f      	ldr	r0, [pc, #124]	; (800166c <LCD_Display+0xa8>)
 80015f0:	f7ff ff6a 	bl	80014c8 <_12_Cvt>
		sprintf(mode_str,"LEE ALARM CLOCK ");
 80015f4:	463b      	mov	r3, r7
 80015f6:	491e      	ldr	r1, [pc, #120]	; (8001670 <LCD_Display+0xac>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f006 fa93 	bl	8007b24 <siprintf>
		break;
 80015fe:	e023      	b.n	8001648 <LCD_Display+0x84>
	case TIME_SETTING:
		sprintf(mode_str,"TIME SET MODE   ");
 8001600:	463b      	mov	r3, r7
 8001602:	491c      	ldr	r1, [pc, #112]	; (8001674 <LCD_Display+0xb0>)
 8001604:	4618      	mov	r0, r3
 8001606:	f006 fa8d 	bl	8007b24 <siprintf>
		TIME_Setting(&stime, time_str);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4819      	ldr	r0, [pc, #100]	; (8001678 <LCD_Display+0xb4>)
 8001612:	f7ff fddd 	bl	80011d0 <TIME_Setting>
		break;
 8001616:	e017      	b.n	8001648 <LCD_Display+0x84>
	case ALARM_TIME_SETTING:
		sprintf(mode_str,"ALARM SET MODE  ");
 8001618:	463b      	mov	r3, r7
 800161a:	4918      	ldr	r1, [pc, #96]	; (800167c <LCD_Display+0xb8>)
 800161c:	4618      	mov	r0, r3
 800161e:	f006 fa81 	bl	8007b24 <siprintf>
		TIME_Setting(&atime, time_str);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4815      	ldr	r0, [pc, #84]	; (8001680 <LCD_Display+0xbc>)
 800162a:	f7ff fdd1 	bl	80011d0 <TIME_Setting>
		break;
 800162e:	e00b      	b.n	8001648 <LCD_Display+0x84>
	case MUSIC_SELECT:
		MUSIC_Select(mode_str, time_str);
 8001630:	f107 0214 	add.w	r2, r7, #20
 8001634:	463b      	mov	r3, r7
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff feb3 	bl	80013a4 <MUSIC_Select>
		break;
 800163e:	e003      	b.n	8001648 <LCD_Display+0x84>
	default:
		current_state.mode = NORMAL_STATE;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <LCD_Display+0xa4>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
		break;
 8001646:	bf00      	nop
	}
	LCD_Print(0, mode_str);
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff f8c0 	bl	80007d2 <LCD_Print>
	LCD_Print(1, time_str);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff f8ba 	bl	80007d2 <LCD_Print>
}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000318 	.word	0x20000318
 800166c:	2000036c 	.word	0x2000036c
 8001670:	080084b4 	.word	0x080084b4
 8001674:	080084c8 	.word	0x080084c8
 8001678:	200001fc 	.word	0x200001fc
 800167c:	080084dc 	.word	0x080084dc
 8001680:	20000200 	.word	0x20000200

08001684 <ADC_Button>:

void ADC_Button()  //ADC button operate
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001688:	4833      	ldr	r0, [pc, #204]	; (8001758 <ADC_Button+0xd4>)
 800168a:	f001 f981 	bl	8002990 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1,20) == HAL_OK) ADC_value = HAL_ADC_GetValue(&hadc1);
 800168e:	2114      	movs	r1, #20
 8001690:	4831      	ldr	r0, [pc, #196]	; (8001758 <ADC_Button+0xd4>)
 8001692:	f001 fa4f 	bl	8002b34 <HAL_ADC_PollForConversion>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <ADC_Button+0x24>
 800169c:	482e      	ldr	r0, [pc, #184]	; (8001758 <ADC_Button+0xd4>)
 800169e:	f001 fad4 	bl	8002c4a <HAL_ADC_GetValue>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a2d      	ldr	r2, [pc, #180]	; (800175c <ADC_Button+0xd8>)
 80016a6:	6013      	str	r3, [r2, #0]
	if(ADC_value <= UP_KEY_MAX || key_value == 1)
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <ADC_Button+0xd8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b32      	cmp	r3, #50	; 0x32
 80016ae:	d903      	bls.n	80016b8 <ADC_Button+0x34>
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <ADC_Button+0xdc>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d106      	bne.n	80016c6 <ADC_Button+0x42>
	{
		current_state.button = UP;
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <ADC_Button+0xe0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	705a      	strb	r2, [r3, #1]
		key_value = 0;
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <ADC_Button+0xdc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e046      	b.n	8001754 <ADC_Button+0xd0>
		//printf("UP\r\n");
	}
	else if((ADC_value>= DOWN_KEY_MIN && ADC_value<=DOWN_KEY_MAX) || key_value == 2)
 80016c6:	4b25      	ldr	r3, [pc, #148]	; (800175c <ADC_Button+0xd8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016ce:	d304      	bcc.n	80016da <ADC_Button+0x56>
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <ADC_Button+0xd8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80016d8:	d903      	bls.n	80016e2 <ADC_Button+0x5e>
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <ADC_Button+0xdc>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d106      	bne.n	80016f0 <ADC_Button+0x6c>
	{
		current_state.button = DOWN;
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <ADC_Button+0xe0>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	705a      	strb	r2, [r3, #1]
		key_value = 0;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <ADC_Button+0xdc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e031      	b.n	8001754 <ADC_Button+0xd0>
		//printf("DOWN\r\n");
	}
	else if((ADC_value>= LEFT_KEY_MIN && ADC_value<=LEFT_KEY_MAX) || key_value == 3)
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <ADC_Button+0xd8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f240 7239 	movw	r2, #1849	; 0x739
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d905      	bls.n	8001708 <ADC_Button+0x84>
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <ADC_Button+0xd8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f640 0202 	movw	r2, #2050	; 0x802
 8001704:	4293      	cmp	r3, r2
 8001706:	d903      	bls.n	8001710 <ADC_Button+0x8c>
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <ADC_Button+0xdc>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d106      	bne.n	800171e <ADC_Button+0x9a>
    {
    	current_state.button = LEFT;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <ADC_Button+0xe0>)
 8001712:	2203      	movs	r2, #3
 8001714:	705a      	strb	r2, [r3, #1]
    	key_value = 0;
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <ADC_Button+0xdc>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e01a      	b.n	8001754 <ADC_Button+0xd0>
    	//printf("LEFT\r\n");
    }
	else if((ADC_value>= RIGHT_KEY_MIN && ADC_value<=RIGHT_KEY_MAX) || key_value == 4)
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <ADC_Button+0xd8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f640 3253 	movw	r2, #2899	; 0xb53
 8001726:	4293      	cmp	r3, r2
 8001728:	d905      	bls.n	8001736 <ADC_Button+0xb2>
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <ADC_Button+0xd8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001732:	4293      	cmp	r3, r2
 8001734:	d903      	bls.n	800173e <ADC_Button+0xba>
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <ADC_Button+0xdc>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b04      	cmp	r3, #4
 800173c:	d106      	bne.n	800174c <ADC_Button+0xc8>
    {
    	current_state.button = RIGHT;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <ADC_Button+0xe0>)
 8001740:	2202      	movs	r2, #2
 8001742:	705a      	strb	r2, [r3, #1]
    	key_value = 0;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <ADC_Button+0xdc>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	e003      	b.n	8001754 <ADC_Button+0xd0>
    	//printf("RIGHT\r\n");
    }
	else
	{
		current_state.button = NO_KEY;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <ADC_Button+0xe0>)
 800174e:	2204      	movs	r2, #4
 8001750:	705a      	strb	r2, [r3, #1]
	}
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000370 	.word	0x20000370
 800175c:	20000368 	.word	0x20000368
 8001760:	2000031b 	.word	0x2000031b
 8001764:	20000318 	.word	0x20000318

08001768 <TIME_Init>:

void TIME_Init()  //Time initiate
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	if(nv_items->magic_num == MAGIC_NUM) //
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <TIME_Init+0x8c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <TIME_Init+0x90>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d135      	bne.n	80017e2 <TIME_Init+0x7a>
	{
		memcpy(&default_nvitem,nv_items,sizeof(NVitemTypeDef));
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <TIME_Init+0x94>)
 8001778:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <TIME_Init+0x8c>)
 800177a:	ca07      	ldmia	r2, {r0, r1, r2}
 800177c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    ctime.hours = default_nvitem.setting_time.hours;
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <TIME_Init+0x94>)
 8001782:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <TIME_Init+0x98>)
 8001788:	701a      	strb	r2, [r3, #0]
		ctime.minutes = default_nvitem.setting_time.minutes;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <TIME_Init+0x94>)
 800178c:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <TIME_Init+0x98>)
 8001792:	705a      	strb	r2, [r3, #1]
		ctime.seconds = default_nvitem.setting_time.seconds;
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <TIME_Init+0x94>)
 8001796:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <TIME_Init+0x98>)
 800179c:	709a      	strb	r2, [r3, #2]

	    stime.hours = default_nvitem.setting_time.hours;
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <TIME_Init+0x94>)
 80017a0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <TIME_Init+0x9c>)
 80017a6:	701a      	strb	r2, [r3, #0]
		stime.minutes = default_nvitem.setting_time.minutes;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <TIME_Init+0x94>)
 80017aa:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <TIME_Init+0x9c>)
 80017b0:	705a      	strb	r2, [r3, #1]
		stime.seconds = default_nvitem.setting_time.seconds;
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <TIME_Init+0x94>)
 80017b4:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <TIME_Init+0x9c>)
 80017ba:	709a      	strb	r2, [r3, #2]

	    atime.hours = default_nvitem.alarm_time.hours;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <TIME_Init+0x94>)
 80017be:	f993 2007 	ldrsb.w	r2, [r3, #7]
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <TIME_Init+0xa0>)
 80017c4:	701a      	strb	r2, [r3, #0]
		atime.minutes = default_nvitem.alarm_time.minutes;
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <TIME_Init+0x94>)
 80017c8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <TIME_Init+0xa0>)
 80017ce:	705a      	strb	r2, [r3, #1]
		atime.seconds = default_nvitem.alarm_time.seconds;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <TIME_Init+0x94>)
 80017d2:	f993 2009 	ldrsb.w	r2, [r3, #9]
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <TIME_Init+0xa0>)
 80017d8:	709a      	strb	r2, [r3, #2]

		current_state.mode = NORMAL_STATE;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <TIME_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e002      	b.n	80017e8 <TIME_Init+0x80>
	}
	else
	{
		current_state.mode = TIME_SETTING;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <TIME_Init+0xa4>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
	}
	_60_Cvt(&ctime);
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <TIME_Init+0x98>)
 80017ea:	f7ff f873 	bl	80008d4 <_60_Cvt>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	081e0000 	.word	0x081e0000
 80017f8:	deadbeef 	.word	0xdeadbeef
 80017fc:	20000000 	.word	0x20000000
 8001800:	2000036c 	.word	0x2000036c
 8001804:	200001fc 	.word	0x200001fc
 8001808:	20000200 	.word	0x20000200
 800180c:	20000318 	.word	0x20000318

08001810 <MUSIC_Play>:

void MUSIC_Play(_BUZZER music[])  //Play music
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	uint16_t melody = (uint16_t)(1000000 / music[seq].freq);
 8001818:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <MUSIC_Play+0xd8>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <MUSIC_Play+0xdc>)
 8001828:	fb93 f3f2 	sdiv	r3, r3, r2
 800182c:	81bb      	strh	r3, [r7, #12]
	uint8_t num = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]

	if(default_nvitem.alarm_music_num == 0) num = MEL_NUM;
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <MUSIC_Play+0xe0>)
 8001834:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <MUSIC_Play+0x32>
 800183c:	2318      	movs	r3, #24
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e00e      	b.n	8001860 <MUSIC_Play+0x50>
	else if(default_nvitem.alarm_music_num == 1) num = MEL_NUM;
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <MUSIC_Play+0xe0>)
 8001844:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d102      	bne.n	8001852 <MUSIC_Play+0x42>
 800184c:	2318      	movs	r3, #24
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e006      	b.n	8001860 <MUSIC_Play+0x50>
	else if(default_nvitem.alarm_music_num == 2) num = MEL_NUM+1;
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <MUSIC_Play+0xe0>)
 8001854:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d101      	bne.n	8001860 <MUSIC_Play+0x50>
 800185c:	2319      	movs	r3, #25
 800185e:	73fb      	strb	r3, [r7, #15]

	if(stop == 1)
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <MUSIC_Play+0xe4>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10b      	bne.n	8001880 <MUSIC_Play+0x70>
	{
		TIM4->ARR = 2000;
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <MUSIC_Play+0xe8>)
 800186a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001870:	2104      	movs	r1, #4
 8001872:	4822      	ldr	r0, [pc, #136]	; (80018fc <MUSIC_Play+0xec>)
 8001874:	f004 fa1a 	bl	8005cac <HAL_TIM_PWM_Stop>
		stop = 0;
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <MUSIC_Play+0xe4>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]

			seq++;
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		}
	}
}
 800187e:	e02e      	b.n	80018de <MUSIC_Play+0xce>
		if(seq == num)
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <MUSIC_Play+0xd8>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	429a      	cmp	r2, r3
 8001888:	d103      	bne.n	8001892 <MUSIC_Play+0x82>
			seq = 0;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MUSIC_Play+0xd8>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
}
 8001890:	e025      	b.n	80018de <MUSIC_Play+0xce>
			TIM3->ARR = melody;
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <MUSIC_Play+0xf0>)
 8001894:	89bb      	ldrh	r3, [r7, #12]
 8001896:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR2 = melody / 2;
 8001898:	89bb      	ldrh	r3, [r7, #12]
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MUSIC_Play+0xf0>)
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->ARR = music[seq].delay * 2000;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MUSIC_Play+0xd8>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	885b      	ldrh	r3, [r3, #2]
 80018ae:	461a      	mov	r2, r3
 80018b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018b4:	fb03 f202 	mul.w	r2, r3, r2
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MUSIC_Play+0xe8>)
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018bc:	2104      	movs	r1, #4
 80018be:	480f      	ldr	r0, [pc, #60]	; (80018fc <MUSIC_Play+0xec>)
 80018c0:	f004 f92c 	bl	8005b1c <HAL_TIM_PWM_Start>
			stop = 1;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MUSIC_Play+0xe4>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
			seq++;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MUSIC_Play+0xd8>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <MUSIC_Play+0xd8>)
 80018d4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <MUSIC_Play+0xf4>)
 80018da:	f002 fa78 	bl	8003dce <HAL_GPIO_TogglePin>
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000205 	.word	0x20000205
 80018ec:	000f4240 	.word	0x000f4240
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000206 	.word	0x20000206
 80018f8:	40000800 	.word	0x40000800
 80018fc:	20000320 	.word	0x20000320
 8001900:	40000400 	.word	0x40000400
 8001904:	40020400 	.word	0x40020400

08001908 <ALARM_Check>:

void ALARM_Check()  //Alarm check
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	if(ctime.seconds == atime.seconds && ctime.minutes == atime.minutes && ctime.hours == atime.hours)
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <ALARM_Check+0x50>)
 800190e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <ALARM_Check+0x54>)
 8001914:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001918:	429a      	cmp	r2, r3
 800191a:	d116      	bne.n	800194a <ALARM_Check+0x42>
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <ALARM_Check+0x50>)
 800191e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <ALARM_Check+0x54>)
 8001924:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001928:	429a      	cmp	r2, r3
 800192a:	d10e      	bne.n	800194a <ALARM_Check+0x42>
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <ALARM_Check+0x50>)
 800192e:	f993 2000 	ldrsb.w	r2, [r3]
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <ALARM_Check+0x54>)
 8001934:	f993 3000 	ldrsb.w	r3, [r3]
 8001938:	429a      	cmp	r2, r3
 800193a:	d106      	bne.n	800194a <ALARM_Check+0x42>
	{
		if(alFlag == 1) musicOn = 1;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <ALARM_Check+0x58>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <ALARM_Check+0x42>
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <ALARM_Check+0x5c>)
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&musicOn,sizeof(musicOn));
 800194a:	2201      	movs	r2, #1
 800194c:	4905      	ldr	r1, [pc, #20]	; (8001964 <ALARM_Check+0x5c>)
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <ALARM_Check+0x60>)
 8001950:	f005 f955 	bl	8006bfe <HAL_UART_Transmit_IT>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000036c 	.word	0x2000036c
 800195c:	20000200 	.word	0x20000200
 8001960:	20000203 	.word	0x20000203
 8001964:	200001f8 	.word	0x200001f8
 8001968:	200003dc 	.word	0x200003dc

0800196c <BT_Button>:

void BT_Button()  //bluetooth button operate (pc13 User button)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	if(key_value > 4)
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <BT_Button+0x70>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b04      	cmp	r3, #4
 8001976:	d92f      	bls.n	80019d8 <BT_Button+0x6c>
	{
		switch(key_value)
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <BT_Button+0x70>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3b05      	subs	r3, #5
 800197e:	2b05      	cmp	r3, #5
 8001980:	d824      	bhi.n	80019cc <BT_Button+0x60>
 8001982:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <BT_Button+0x1c>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	080019a1 	.word	0x080019a1
 800198c:	080019a7 	.word	0x080019a7
 8001990:	080019ad 	.word	0x080019ad
 8001994:	080019b3 	.word	0x080019b3
 8001998:	080019b9 	.word	0x080019b9
 800199c:	080019bf 	.word	0x080019bf
		{
		case 5:
			Select_Key();
 80019a0:	f7ff f876 	bl	8000a90 <Select_Key>
			break;
 80019a4:	e015      	b.n	80019d2 <BT_Button+0x66>
		case 6:
			Long_Key();
 80019a6:	f7ff f8ef 	bl	8000b88 <Long_Key>
			break;
 80019aa:	e012      	b.n	80019d2 <BT_Button+0x66>
		case 7:
			Double_Click();
 80019ac:	f7ff f902 	bl	8000bb4 <Double_Click>
			break;
 80019b0:	e00f      	b.n	80019d2 <BT_Button+0x66>
		case 8:
			Select_Key();
 80019b2:	f7ff f86d 	bl	8000a90 <Select_Key>
			break;
 80019b6:	e00c      	b.n	80019d2 <BT_Button+0x66>
		case 9:
			Double_Click();
 80019b8:	f7ff f8fc 	bl	8000bb4 <Double_Click>
			break;
 80019bc:	e009      	b.n	80019d2 <BT_Button+0x66>
		case 10:
			if(musicOn == 1) Select_Key();
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <BT_Button+0x74>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d104      	bne.n	80019d0 <BT_Button+0x64>
 80019c6:	f7ff f863 	bl	8000a90 <Select_Key>
			break;
 80019ca:	e001      	b.n	80019d0 <BT_Button+0x64>
		default:
			break;
 80019cc:	bf00      	nop
 80019ce:	e000      	b.n	80019d2 <BT_Button+0x66>
			break;
 80019d0:	bf00      	nop
		}
		key_value = 0;
 80019d2:	4b02      	ldr	r3, [pc, #8]	; (80019dc <BT_Button+0x70>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
	}
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000031b 	.word	0x2000031b
 80019e0:	200001f8 	.word	0x200001f8

080019e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6)  //bluetooth signal get.(0 = no_key, 1~4 = ADC key, 5~10 = pc13 user button)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_UART_RxCpltCallback+0x28>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d106      	bne.n	8001a04 <HAL_UART_RxCpltCallback+0x20>
	{
		/* Receive one byte in interrupt mode */
		BT_Button();
 80019f6:	f7ff ffb9 	bl	800196c <BT_Button>
		HAL_UART_Receive_IT(&huart6, &key_value, 1);
 80019fa:	2201      	movs	r2, #1
 80019fc:	4904      	ldr	r1, [pc, #16]	; (8001a10 <HAL_UART_RxCpltCallback+0x2c>)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_UART_RxCpltCallback+0x30>)
 8001a00:	f005 f942 	bl	8006c88 <HAL_UART_Receive_IT>
	}
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40011400 	.word	0x40011400
 8001a10:	2000031b 	.word	0x2000031b
 8001a14:	200003dc 	.word	0x200003dc

08001a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a1c:	f000 fede 	bl	80027dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a20:	f000 f834 	bl	8001a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a24:	f000 faee 	bl	8002004 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a28:	f000 fa98 	bl	8001f5c <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001a2c:	f000 f95e 	bl	8001cec <MX_RTC_Init>
  MX_I2C1_Init();
 8001a30:	f000 f91c 	bl	8001c6c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001a34:	f000 f8c8 	bl	8001bc8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001a38:	f000 f97e 	bl	8001d38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a3c:	f000 f9ca 	bl	8001dd4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a40:	f000 fa3e 	bl	8001ec0 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001a44:	f000 fab4 	bl	8001fb0 <MX_USART6_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a48:	f000 f892 	bl	8001b70 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim2);
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <main+0x64>)
 8001a4e:	f003 ff4c 	bl	80058ea <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a52:	480a      	ldr	r0, [pc, #40]	; (8001a7c <main+0x64>)
 8001a54:	f003 ff98 	bl	8005988 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001a58:	4809      	ldr	r0, [pc, #36]	; (8001a80 <main+0x68>)
 8001a5a:	f003 ff95 	bl	8005988 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_UART_Receive_IT(&huart6,&key_value,1);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4908      	ldr	r1, [pc, #32]	; (8001a84 <main+0x6c>)
 8001a62:	4809      	ldr	r0, [pc, #36]	; (8001a88 <main+0x70>)
 8001a64:	f005 f910 	bl	8006c88 <HAL_UART_Receive_IT>
  init();  //lcd initiate
 8001a68:	f7fe fed3 	bl	8000812 <init>
  TIME_Init();
 8001a6c:	f7ff fe7c 	bl	8001768 <TIME_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_Button();
 8001a70:	f7ff fe08 	bl	8001684 <ADC_Button>
	  LCD_Display();
 8001a74:	f7ff fda6 	bl	80015c4 <LCD_Display>
	  ADC_Button();
 8001a78:	e7fa      	b.n	8001a70 <main+0x58>
 8001a7a:	bf00      	nop
 8001a7c:	20000420 	.word	0x20000420
 8001a80:	20000234 	.word	0x20000234
 8001a84:	2000031b 	.word	0x2000031b
 8001a88:	200003dc 	.word	0x200003dc

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b094      	sub	sp, #80	; 0x50
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	2230      	movs	r2, #48	; 0x30
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f006 f806 	bl	8007aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <SystemClock_Config+0xdc>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <SystemClock_Config+0xdc>)
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <SystemClock_Config+0xdc>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <SystemClock_Config+0xe0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <SystemClock_Config+0xe0>)
 8001ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <SystemClock_Config+0xe0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001ae8:	2306      	movs	r3, #6
 8001aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001aec:	2301      	movs	r3, #1
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af4:	2310      	movs	r3, #16
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af8:	2302      	movs	r3, #2
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001afc:	2300      	movs	r3, #0
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b00:	2308      	movs	r3, #8
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b04:	23b4      	movs	r3, #180	; 0xb4
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b10:	f107 0320 	add.w	r3, r7, #32
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 ffd1 	bl	8004abc <HAL_RCC_OscConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b20:	f000 fb80 	bl	8002224 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b24:	f002 ff7a 	bl	8004a1c <HAL_PWREx_EnableOverDrive>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b2e:	f000 fb79 	bl	8002224 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b32:	230f      	movs	r3, #15
 8001b34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b36:	2302      	movs	r3, #2
 8001b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2105      	movs	r1, #5
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 fa2b 	bl	8004fac <HAL_RCC_ClockConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b5c:	f000 fb62 	bl	8002224 <Error_Handler>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3750      	adds	r7, #80	; 0x50
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000

08001b70 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2028      	movs	r0, #40	; 0x28
 8001b7a:	f001 fb7c 	bl	8003276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b7e:	2028      	movs	r0, #40	; 0x28
 8001b80:	f001 fb95 	bl	80032ae <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	201c      	movs	r0, #28
 8001b8a:	f001 fb74 	bl	8003276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b8e:	201c      	movs	r0, #28
 8001b90:	f001 fb8d 	bl	80032ae <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	201e      	movs	r0, #30
 8001b9a:	f001 fb6c 	bl	8003276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b9e:	201e      	movs	r0, #30
 8001ba0:	f001 fb85 	bl	80032ae <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2047      	movs	r0, #71	; 0x47
 8001baa:	f001 fb64 	bl	8003276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bae:	2047      	movs	r0, #71	; 0x47
 8001bb0:	f001 fb7d 	bl	80032ae <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2027      	movs	r0, #39	; 0x27
 8001bba:	f001 fb5c 	bl	8003276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bbe:	2027      	movs	r0, #39	; 0x27
 8001bc0:	f001 fb75 	bl	80032ae <HAL_NVIC_EnableIRQ>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <MX_ADC1_Init+0x9c>)
 8001bde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001be2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <MX_ADC1_Init+0xa0>)
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c2a:	f000 fe6d 	bl	8002908 <HAL_ADC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c34:	f000 faf6 	bl	8002224 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c44:	463b      	mov	r3, r7
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c4a:	f001 f80b 	bl	8002c64 <HAL_ADC_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c54:	f000 fae6 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000370 	.word	0x20000370
 8001c64:	40012000 	.word	0x40012000
 8001c68:	0f000001 	.word	0x0f000001

08001c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_I2C1_Init+0x78>)
 8001c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <MX_I2C1_Init+0x7c>)
 8001c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001caa:	f002 f8c3 	bl	8003e34 <HAL_I2C_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cb4:	f000 fab6 	bl	8002224 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001cbc:	f002 fe33 	bl	8004926 <HAL_I2CEx_ConfigAnalogFilter>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001cc6:	f000 faad 	bl	8002224 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001cce:	f002 fe66 	bl	800499e <HAL_I2CEx_ConfigDigitalFilter>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001cd8:	f000 faa4 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200002c0 	.word	0x200002c0
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	000186a0 	.word	0x000186a0

08001cec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_RTC_Init+0x44>)
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <MX_RTC_Init+0x48>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_RTC_Init+0x44>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_RTC_Init+0x44>)
 8001cfe:	227f      	movs	r2, #127	; 0x7f
 8001d00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <MX_RTC_Init+0x44>)
 8001d04:	22ff      	movs	r2, #255	; 0xff
 8001d06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_RTC_Init+0x44>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <MX_RTC_Init+0x44>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_RTC_Init+0x44>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_RTC_Init+0x44>)
 8001d1c:	f003 fd00 	bl	8005720 <HAL_RTC_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001d26:	f000 fa7d 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200003b8 	.word	0x200003b8
 8001d34:	40002800 	.word	0x40002800

08001d38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <MX_TIM2_Init+0x98>)
 8001d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_TIM2_Init+0x98>)
 8001d5e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001d62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_TIM2_Init+0x98>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_TIM2_Init+0x98>)
 8001d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_TIM2_Init+0x98>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_TIM2_Init+0x98>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <MX_TIM2_Init+0x98>)
 8001d80:	f003 fdb3 	bl	80058ea <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d8a:	f000 fa4b 	bl	8002224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_TIM2_Init+0x98>)
 8001d9c:	f004 f9c0 	bl	8006120 <HAL_TIM_ConfigClockSource>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001da6:	f000 fa3d 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db2:	463b      	mov	r3, r7
 8001db4:	4619      	mov	r1, r3
 8001db6:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <MX_TIM2_Init+0x98>)
 8001db8:	f004 fdb2 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001dc2:	f000 fa2f 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000420 	.word	0x20000420

08001dd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08e      	sub	sp, #56	; 0x38
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	615a      	str	r2, [r3, #20]
 8001e02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e06:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e0c:	2259      	movs	r2, #89	; 0x59
 8001e0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8001e16:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e18:	22c7      	movs	r2, #199	; 0xc7
 8001e1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e22:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e28:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e2a:	f003 fd5e 	bl	80058ea <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001e34:	f000 f9f6 	bl	8002224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e42:	4619      	mov	r1, r3
 8001e44:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e46:	f004 f96b 	bl	8006120 <HAL_TIM_ConfigClockSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001e50:	f000 f9e8 	bl	8002224 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e54:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e56:	f003 fe07 	bl	8005a68 <HAL_TIM_PWM_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001e60:	f000 f9e0 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	4619      	mov	r1, r3
 8001e72:	4811      	ldr	r0, [pc, #68]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e74:	f004 fd54 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001e7e:	f000 f9d1 	bl	8002224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e82:	2360      	movs	r3, #96	; 0x60
 8001e84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2204      	movs	r2, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001e9a:	f004 f87f 	bl	8005f9c <HAL_TIM_PWM_ConfigChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001ea4:	f000 f9be 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ea8:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_TIM3_Init+0xe4>)
 8001eaa:	f000 fb11 	bl	80024d0 <HAL_TIM_MspPostInit>

}
 8001eae:	bf00      	nop
 8001eb0:	3738      	adds	r7, #56	; 0x38
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000320 	.word	0x20000320
 8001ebc:	40000400 	.word	0x40000400

08001ec0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0308 	add.w	r3, r7, #8
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <MX_TIM4_Init+0x94>)
 8001ede:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <MX_TIM4_Init+0x98>)
 8001ee0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <MX_TIM4_Init+0x94>)
 8001ee4:	f242 3228 	movw	r2, #9000	; 0x2328
 8001ee8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <MX_TIM4_Init+0x94>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <MX_TIM4_Init+0x94>)
 8001ef2:	22c8      	movs	r2, #200	; 0xc8
 8001ef4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <MX_TIM4_Init+0x94>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <MX_TIM4_Init+0x94>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f02:	4814      	ldr	r0, [pc, #80]	; (8001f54 <MX_TIM4_Init+0x94>)
 8001f04:	f003 fcf1 	bl	80058ea <HAL_TIM_Base_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001f0e:	f000 f989 	bl	8002224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480d      	ldr	r0, [pc, #52]	; (8001f54 <MX_TIM4_Init+0x94>)
 8001f20:	f004 f8fe 	bl	8006120 <HAL_TIM_ConfigClockSource>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001f2a:	f000 f97b 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f36:	463b      	mov	r3, r7
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <MX_TIM4_Init+0x94>)
 8001f3c:	f004 fcf0 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001f46:	f000 f96d 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000234 	.word	0x20000234
 8001f58:	40000800 	.word	0x40000800

08001f5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <MX_USART3_UART_Init+0x50>)
 8001f64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f94:	f004 fd54 	bl	8006a40 <HAL_UART_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f9e:	f000 f941 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000027c 	.word	0x2000027c
 8001fac:	40004800 	.word	0x40004800

08001fb0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <MX_USART6_UART_Init+0x50>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fe8:	f004 fd2a 	bl	8006a40 <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ff2:	f000 f917 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200003dc 	.word	0x200003dc
 8002000:	40011400 	.word	0x40011400

08002004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	; 0x30
 8002008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	4b7c      	ldr	r3, [pc, #496]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a7b      	ldr	r2, [pc, #492]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b79      	ldr	r3, [pc, #484]	; (8002210 <MX_GPIO_Init+0x20c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	4b75      	ldr	r3, [pc, #468]	; (8002210 <MX_GPIO_Init+0x20c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a74      	ldr	r2, [pc, #464]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b72      	ldr	r3, [pc, #456]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a6d      	ldr	r2, [pc, #436]	; (8002210 <MX_GPIO_Init+0x20c>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b67      	ldr	r3, [pc, #412]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a66      	ldr	r2, [pc, #408]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b64      	ldr	r3, [pc, #400]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b60      	ldr	r3, [pc, #384]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a5f      	ldr	r2, [pc, #380]	; (8002210 <MX_GPIO_Init+0x20c>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <MX_GPIO_Init+0x20c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b59      	ldr	r3, [pc, #356]	; (8002210 <MX_GPIO_Init+0x20c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a58      	ldr	r2, [pc, #352]	; (8002210 <MX_GPIO_Init+0x20c>)
 80020b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b56      	ldr	r3, [pc, #344]	; (8002210 <MX_GPIO_Init+0x20c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80020c8:	4852      	ldr	r0, [pc, #328]	; (8002214 <MX_GPIO_Init+0x210>)
 80020ca:	f001 fe67 	bl	8003d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2140      	movs	r1, #64	; 0x40
 80020d2:	4851      	ldr	r0, [pc, #324]	; (8002218 <MX_GPIO_Init+0x214>)
 80020d4:	f001 fe62 	bl	8003d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80020d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80020de:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80020e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	484b      	ldr	r0, [pc, #300]	; (800221c <MX_GPIO_Init+0x218>)
 80020f0:	f001 fc90 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020f4:	2332      	movs	r3, #50	; 0x32
 80020f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002104:	230b      	movs	r3, #11
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4619      	mov	r1, r3
 800210e:	4843      	ldr	r0, [pc, #268]	; (800221c <MX_GPIO_Init+0x218>)
 8002110:	f001 fc80 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8002114:	2306      	movs	r3, #6
 8002116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002124:	230b      	movs	r3, #11
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	483c      	ldr	r0, [pc, #240]	; (8002220 <MX_GPIO_Init+0x21c>)
 8002130:	f001 fc70 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002146:	230b      	movs	r3, #11
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	4830      	ldr	r0, [pc, #192]	; (8002214 <MX_GPIO_Init+0x210>)
 8002152:	f001 fc5f 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002156:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800215a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215c:	2301      	movs	r3, #1
 800215e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	4829      	ldr	r0, [pc, #164]	; (8002214 <MX_GPIO_Init+0x210>)
 8002170:	f001 fc50 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002174:	2340      	movs	r3, #64	; 0x40
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 031c 	add.w	r3, r7, #28
 8002188:	4619      	mov	r1, r3
 800218a:	4823      	ldr	r0, [pc, #140]	; (8002218 <MX_GPIO_Init+0x214>)
 800218c:	f001 fc42 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	481d      	ldr	r0, [pc, #116]	; (8002218 <MX_GPIO_Init+0x214>)
 80021a4:	f001 fc36 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80021ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021ba:	230a      	movs	r3, #10
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	4816      	ldr	r0, [pc, #88]	; (8002220 <MX_GPIO_Init+0x21c>)
 80021c6:	f001 fc25 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	4810      	ldr	r0, [pc, #64]	; (8002220 <MX_GPIO_Init+0x21c>)
 80021e0:	f001 fc18 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80021e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021f6:	230b      	movs	r3, #11
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_GPIO_Init+0x214>)
 8002202:	f001 fc07 	bl	8003a14 <HAL_GPIO_Init>

}
 8002206:	bf00      	nop
 8002208:	3730      	adds	r7, #48	; 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40020400 	.word	0x40020400
 8002218:	40021800 	.word	0x40021800
 800221c:	40020800 	.word	0x40020800
 8002220:	40020000 	.word	0x40020000

08002224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002228:	b672      	cpsid	i
}
 800222a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800222c:	e7fe      	b.n	800222c <Error_Handler+0x8>
	...

08002230 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_MspInit+0x4c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a0f      	ldr	r2, [pc, #60]	; (800227c <HAL_MspInit+0x4c>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_MspInit+0x4c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_MspInit+0x4c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <HAL_MspInit+0x4c>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_MspInit+0x4c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_ADC_MspInit+0x7c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d127      	bne.n	80022f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_ADC_MspInit+0x80>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <HAL_ADC_MspInit+0x80>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_ADC_MspInit+0x80>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_ADC_MspInit+0x80>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_ADC_MspInit+0x80>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_ADC_MspInit+0x80>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022da:	2308      	movs	r3, #8
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022de:	2303      	movs	r3, #3
 80022e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4805      	ldr	r0, [pc, #20]	; (8002304 <HAL_ADC_MspInit+0x84>)
 80022ee:	f001 fb91 	bl	8003a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	; 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40012000 	.word	0x40012000
 8002300:	40023800 	.word	0x40023800
 8002304:	40020000 	.word	0x40020000

08002308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_I2C_MspInit+0x84>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12c      	bne.n	8002384 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234c:	2312      	movs	r3, #18
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002350:	2301      	movs	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002358:	2304      	movs	r3, #4
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <HAL_I2C_MspInit+0x8c>)
 8002364:	f001 fb56 	bl	8003a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002376:	6413      	str	r3, [r2, #64]	; 0x40
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	3728      	adds	r7, #40	; 0x28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40005400 	.word	0x40005400
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400

08002398 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	; 0x38
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	2230      	movs	r2, #48	; 0x30
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f005 fb7f 	bl	8007aac <memset>
  if(hrtc->Instance==RTC)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <HAL_RTC_MspInit+0x4c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d111      	bne.n	80023dc <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023b8:	2320      	movs	r3, #32
 80023ba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 ffec 	bl	80053a4 <HAL_RCCEx_PeriphCLKConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80023d2:	f7ff ff27 	bl	8002224 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <HAL_RTC_MspInit+0x50>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3738      	adds	r7, #56	; 0x38
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40002800 	.word	0x40002800
 80023e8:	42470e3c 	.word	0x42470e3c

080023ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	; 0x30
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d10e      	bne.n	800242c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800242a:	e044      	b.n	80024b6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <HAL_TIM_Base_MspInit+0xd8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d12c      	bne.n	8002490 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800246e:	2301      	movs	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800247e:	2302      	movs	r3, #2
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	480f      	ldr	r0, [pc, #60]	; (80024c8 <HAL_TIM_Base_MspInit+0xdc>)
 800248a:	f001 fac3 	bl	8003a14 <HAL_GPIO_Init>
}
 800248e:	e012      	b.n	80024b6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_TIM_Base_MspInit+0xe0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10d      	bne.n	80024b6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_TIM_Base_MspInit+0xd4>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
}
 80024b6:	bf00      	nop
 80024b8:	3730      	adds	r7, #48	; 0x30
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40000400 	.word	0x40000400
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40000800 	.word	0x40000800

080024d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_TIM_MspPostInit+0x68>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d11d      	bne.n	800252e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_TIM_MspPostInit+0x6c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_TIM_MspPostInit+0x6c>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_TIM_MspPostInit+0x6c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800251e:	2302      	movs	r3, #2
 8002520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <HAL_TIM_MspPostInit+0x70>)
 800252a:	f001 fa73 	bl	8003a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40000400 	.word	0x40000400
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a33      	ldr	r2, [pc, #204]	; (8002630 <HAL_UART_MspInit+0xec>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d12d      	bne.n	80025c2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_UART_MspInit+0xf0>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a31      	ldr	r2, [pc, #196]	; (8002634 <HAL_UART_MspInit+0xf0>)
 8002570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_UART_MspInit+0xf0>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_UART_MspInit+0xf0>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <HAL_UART_MspInit+0xf0>)
 800258c:	f043 0308 	orr.w	r3, r3, #8
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_UART_MspInit+0xf0>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800259e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025b0:	2307      	movs	r3, #7
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	4619      	mov	r1, r3
 80025ba:	481f      	ldr	r0, [pc, #124]	; (8002638 <HAL_UART_MspInit+0xf4>)
 80025bc:	f001 fa2a 	bl	8003a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025c0:	e031      	b.n	8002626 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_UART_MspInit+0xf8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d12c      	bne.n	8002626 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_UART_MspInit+0xf0>)
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <HAL_UART_MspInit+0xf0>)
 80025d6:	f043 0320 	orr.w	r3, r3, #32
 80025da:	6453      	str	r3, [r2, #68]	; 0x44
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_UART_MspInit+0xf0>)
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_UART_MspInit+0xf0>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a10      	ldr	r2, [pc, #64]	; (8002634 <HAL_UART_MspInit+0xf0>)
 80025f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_UART_MspInit+0xf0>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002604:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002616:	2308      	movs	r3, #8
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	4619      	mov	r1, r3
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <HAL_UART_MspInit+0xfc>)
 8002622:	f001 f9f7 	bl	8003a14 <HAL_GPIO_Init>
}
 8002626:	bf00      	nop
 8002628:	3730      	adds	r7, #48	; 0x30
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40004800 	.word	0x40004800
 8002634:	40023800 	.word	0x40023800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40011400 	.word	0x40011400
 8002640:	40021800 	.word	0x40021800

08002644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <NMI_Handler+0x4>

0800264a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264e:	e7fe      	b.n	800264e <HardFault_Handler+0x4>

08002650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002654:	e7fe      	b.n	8002654 <MemManage_Handler+0x4>

08002656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265a:	e7fe      	b.n	800265a <BusFault_Handler+0x4>

0800265c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <UsageFault_Handler+0x4>

08002662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002690:	f000 f8f6 	bl	8002880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}

08002698 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <TIM2_IRQHandler+0x10>)
 800269e:	f003 fb75 	bl	8005d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000420 	.word	0x20000420

080026ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM4_IRQHandler+0x10>)
 80026b2:	f003 fb6b 	bl	8005d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000234 	.word	0x20000234

080026c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <USART3_IRQHandler+0x10>)
 80026c6:	f004 fb0f 	bl	8006ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000027c 	.word	0x2000027c

080026d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80026d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026dc:	f001 fb92 	bl	8003e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <USART6_IRQHandler+0x10>)
 80026ea:	f004 fafd 	bl	8006ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200003dc 	.word	0x200003dc

080026f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002700:	4a14      	ldr	r2, [pc, #80]	; (8002754 <_sbrk+0x5c>)
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <_sbrk+0x60>)
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <_sbrk+0x64>)
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <_sbrk+0x68>)
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <_sbrk+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	429a      	cmp	r2, r3
 8002726:	d207      	bcs.n	8002738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002728:	f005 f996 	bl	8007a58 <__errno>
 800272c:	4603      	mov	r3, r0
 800272e:	220c      	movs	r2, #12
 8002730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	e009      	b.n	800274c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <_sbrk+0x64>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <_sbrk+0x64>)
 8002748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20030000 	.word	0x20030000
 8002758:	00000400 	.word	0x00000400
 800275c:	20000210 	.word	0x20000210
 8002760:	200004a8 	.word	0x200004a8

08002764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <SystemInit+0x20>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <SystemInit+0x20>)
 8002770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800278c:	480d      	ldr	r0, [pc, #52]	; (80027c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800278e:	490e      	ldr	r1, [pc, #56]	; (80027c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002790:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002794:	e002      	b.n	800279c <LoopCopyDataInit>

08002796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279a:	3304      	adds	r3, #4

0800279c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800279c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a0:	d3f9      	bcc.n	8002796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a2:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027a4:	4c0b      	ldr	r4, [pc, #44]	; (80027d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a8:	e001      	b.n	80027ae <LoopFillZerobss>

080027aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ac:	3204      	adds	r2, #4

080027ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b0:	d3fb      	bcc.n	80027aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027b2:	f7ff ffd7 	bl	8002764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027b6:	f005 f955 	bl	8007a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ba:	f7ff f92d 	bl	8001a18 <main>
  bx  lr    
 80027be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80027c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80027cc:	0800854c 	.word	0x0800854c
  ldr r2, =_sbss
 80027d0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80027d4:	200004a4 	.word	0x200004a4

080027d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d8:	e7fe      	b.n	80027d8 <ADC_IRQHandler>
	...

080027dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_Init+0x40>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_Init+0x40>)
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_Init+0x40>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002804:	2003      	movs	r0, #3
 8002806:	f000 fd2b 	bl	8003260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280a:	2000      	movs	r0, #0
 800280c:	f000 f808 	bl	8002820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002810:	f7ff fd0e 	bl	8002230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00

08002820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_InitTick+0x54>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_InitTick+0x58>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002836:	fbb3 f3f1 	udiv	r3, r3, r1
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fd43 	bl	80032ca <HAL_SYSTICK_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e00e      	b.n	800286c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d80a      	bhi.n	800286a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002854:	2200      	movs	r2, #0
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f000 fd0b 	bl	8003276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <HAL_InitTick+0x5c>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	2000016c 	.word	0x2000016c
 8002878:	20000174 	.word	0x20000174
 800287c:	20000170 	.word	0x20000170

08002880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x20>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x24>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4413      	add	r3, r2
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_IncTick+0x24>)
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000174 	.word	0x20000174
 80028a4:	20000470 	.word	0x20000470

080028a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return uwTick;
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_GetTick+0x14>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000470 	.word	0x20000470

080028c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7ff ffee 	bl	80028a8 <HAL_GetTick>
 80028cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d005      	beq.n	80028e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_Delay+0x44>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028e6:	bf00      	nop
 80028e8:	f7ff ffde 	bl	80028a8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d8f7      	bhi.n	80028e8 <HAL_Delay+0x28>
  {
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000174 	.word	0x20000174

08002908 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e033      	b.n	8002986 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fcaa 	bl	8002280 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800294e:	f023 0302 	bic.w	r3, r3, #2
 8002952:	f043 0202 	orr.w	r2, r3, #2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fab4 	bl	8002ec8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
 8002976:	e001      	b.n	800297c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_Start+0x1a>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e0b2      	b.n	8002b10 <HAL_ADC_Start+0x180>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d018      	beq.n	80029f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029d0:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <HAL_ADC_Start+0x18c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_ADC_Start+0x190>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0c9a      	lsrs	r2, r3, #18
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d17a      	bne.n	8002af6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3e:	d106      	bne.n	8002a4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	f023 0206 	bic.w	r2, r3, #6
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a4c:	e002      	b.n	8002a54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_ADC_Start+0x194>)
 8002a5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d12a      	bne.n	8002acc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2b      	ldr	r2, [pc, #172]	; (8002b28 <HAL_ADC_Start+0x198>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d015      	beq.n	8002aac <HAL_ADC_Start+0x11c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a29      	ldr	r2, [pc, #164]	; (8002b2c <HAL_ADC_Start+0x19c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d105      	bne.n	8002a96 <HAL_ADC_Start+0x106>
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_ADC_Start+0x194>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_ADC_Start+0x1a0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d136      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_ADC_Start+0x194>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d130      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d129      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	e020      	b.n	8002b0e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_ADC_Start+0x198>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d11b      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d114      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	e00b      	b.n	8002b0e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f043 0210 	orr.w	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	2000016c 	.word	0x2000016c
 8002b20:	431bde83 	.word	0x431bde83
 8002b24:	40012300 	.word	0x40012300
 8002b28:	40012000 	.word	0x40012000
 8002b2c:	40012100 	.word	0x40012100
 8002b30:	40012200 	.word	0x40012200

08002b34 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b50:	d113      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b60:	d10b      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e063      	b.n	8002c42 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b7a:	f7ff fe95 	bl	80028a8 <HAL_GetTick>
 8002b7e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b80:	e021      	b.n	8002bc6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d01d      	beq.n	8002bc6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_ADC_PollForConversion+0x6c>
 8002b90:	f7ff fe8a 	bl	80028a8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d212      	bcs.n	8002bc6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d00b      	beq.n	8002bc6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0204 	orr.w	r2, r3, #4
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e03d      	b.n	8002c42 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d1d6      	bne.n	8002b82 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0212 	mvn.w	r2, #18
 8002bdc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d123      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d11f      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d111      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1c>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e113      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x244>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b09      	cmp	r3, #9
 8002c8e:	d925      	bls.n	8002cdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68d9      	ldr	r1, [r3, #12]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b1e      	subs	r3, #30
 8002ca6:	2207      	movs	r2, #7
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43da      	mvns	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68d9      	ldr	r1, [r3, #12]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	4603      	mov	r3, r0
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4403      	add	r3, r0
 8002cce:	3b1e      	subs	r3, #30
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	e022      	b.n	8002d22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6919      	ldr	r1, [r3, #16]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6919      	ldr	r1, [r3, #16]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4403      	add	r3, r0
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d824      	bhi.n	8002d74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b05      	subs	r3, #5
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	400a      	ands	r2, r1
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	3b05      	subs	r3, #5
 8002d66:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34
 8002d72:	e04c      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d824      	bhi.n	8002dc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b23      	subs	r3, #35	; 0x23
 8002d8e:	221f      	movs	r2, #31
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43da      	mvns	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	3b23      	subs	r3, #35	; 0x23
 8002db8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc4:	e023      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b41      	subs	r3, #65	; 0x41
 8002dd8:	221f      	movs	r2, #31
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	400a      	ands	r2, r1
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	4618      	mov	r0, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b41      	subs	r3, #65	; 0x41
 8002e02:	fa00 f203 	lsl.w	r2, r0, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_ADC_ConfigChannel+0x250>)
 8002e10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_ADC_ConfigChannel+0x254>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d10f      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x1d8>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b12      	cmp	r3, #18
 8002e22:	d10b      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_ADC_ConfigChannel+0x254>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d12b      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x23a>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_ADC_ConfigChannel+0x258>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <HAL_ADC_ConfigChannel+0x1f4>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b11      	cmp	r3, #17
 8002e56:	d122      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_ADC_ConfigChannel+0x258>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d111      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_ADC_ConfigChannel+0x260>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	0c9a      	lsrs	r2, r3, #18
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e90:	e002      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f9      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40012300 	.word	0x40012300
 8002eb8:	40012000 	.word	0x40012000
 8002ebc:	10000012 	.word	0x10000012
 8002ec0:	2000016c 	.word	0x2000016c
 8002ec4:	431bde83 	.word	0x431bde83

08002ec8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed0:	4b79      	ldr	r3, [pc, #484]	; (80030b8 <ADC_Init+0x1f0>)
 8002ed2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	021a      	lsls	r2, r3, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6899      	ldr	r1, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	4a58      	ldr	r2, [pc, #352]	; (80030bc <ADC_Init+0x1f4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6899      	ldr	r1, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6899      	ldr	r1, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	e00f      	b.n	8002fc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0202 	bic.w	r2, r2, #2
 8002fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6899      	ldr	r1, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7e1b      	ldrb	r3, [r3, #24]
 8002fe0:	005a      	lsls	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01b      	beq.n	800302c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003002:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003012:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	3b01      	subs	r3, #1
 8003020:	035a      	lsls	r2, r3, #13
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	e007      	b.n	800303c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	3b01      	subs	r3, #1
 8003058:	051a      	lsls	r2, r3, #20
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800307e:	025a      	lsls	r2, r3, #9
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	029a      	lsls	r2, r3, #10
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40012300 	.word	0x40012300
 80030bc:	0f000001 	.word	0x0f000001

080030c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f2:	4a04      	ldr	r2, [pc, #16]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60d3      	str	r3, [r2, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <__NVIC_GetPriorityGrouping+0x18>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0307 	and.w	r3, r3, #7
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	db0b      	blt.n	800314e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	4907      	ldr	r1, [pc, #28]	; (800315c <__NVIC_EnableIRQ+0x38>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2001      	movs	r0, #1
 8003146:	fa00 f202 	lsl.w	r2, r0, r2
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000e100 	.word	0xe000e100

08003160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	6039      	str	r1, [r7, #0]
 800316a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	2b00      	cmp	r3, #0
 8003172:	db0a      	blt.n	800318a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	490c      	ldr	r1, [pc, #48]	; (80031ac <__NVIC_SetPriority+0x4c>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	440b      	add	r3, r1
 8003184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003188:	e00a      	b.n	80031a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4908      	ldr	r1, [pc, #32]	; (80031b0 <__NVIC_SetPriority+0x50>)
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	3b04      	subs	r3, #4
 8003198:	0112      	lsls	r2, r2, #4
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	440b      	add	r3, r1
 800319e:	761a      	strb	r2, [r3, #24]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000e100 	.word	0xe000e100
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f1c3 0307 	rsb	r3, r3, #7
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	bf28      	it	cs
 80031d2:	2304      	movcs	r3, #4
 80031d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3304      	adds	r3, #4
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d902      	bls.n	80031e4 <NVIC_EncodePriority+0x30>
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3b03      	subs	r3, #3
 80031e2:	e000      	b.n	80031e6 <NVIC_EncodePriority+0x32>
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e8:	f04f 32ff 	mov.w	r2, #4294967295
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43da      	mvns	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	401a      	ands	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	43d9      	mvns	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	4313      	orrs	r3, r2
         );
}
 800320e:	4618      	mov	r0, r3
 8003210:	3724      	adds	r7, #36	; 0x24
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800322c:	d301      	bcc.n	8003232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800322e:	2301      	movs	r3, #1
 8003230:	e00f      	b.n	8003252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <SysTick_Config+0x40>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323a:	210f      	movs	r1, #15
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	f7ff ff8e 	bl	8003160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <SysTick_Config+0x40>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <SysTick_Config+0x40>)
 800324c:	2207      	movs	r2, #7
 800324e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	e000e010 	.word	0xe000e010

08003260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff29 	bl	80030c0 <__NVIC_SetPriorityGrouping>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003288:	f7ff ff3e 	bl	8003108 <__NVIC_GetPriorityGrouping>
 800328c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f7ff ff8e 	bl	80031b4 <NVIC_EncodePriority>
 8003298:	4602      	mov	r2, r0
 800329a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff5d 	bl	8003160 <__NVIC_SetPriority>
}
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff31 	bl	8003124 <__NVIC_EnableIRQ>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ffa2 	bl	800321c <SysTick_Config>
 80032d8:	4603      	mov	r3, r0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032f0:	f7ff fada 	bl	80028a8 <HAL_GetTick>
 80032f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d008      	beq.n	8003314 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e052      	b.n	80033ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0216 	bic.w	r2, r2, #22
 8003322:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003332:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <HAL_DMA_Abort+0x62>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0208 	bic.w	r2, r2, #8
 8003352:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003364:	e013      	b.n	800338e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003366:	f7ff fa9f 	bl	80028a8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b05      	cmp	r3, #5
 8003372:	d90c      	bls.n	800338e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2203      	movs	r2, #3
 800337e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e015      	b.n	80033ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e4      	bne.n	8003366 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	223f      	movs	r2, #63	; 0x3f
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d004      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e00c      	b.n	80033fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2205      	movs	r2, #5
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_FLASH_Program+0xa0>)
 800341c:	7e1b      	ldrb	r3, [r3, #24]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_FLASH_Program+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e03b      	b.n	800349e <HAL_FLASH_Program+0x96>
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_FLASH_Program+0xa0>)
 8003428:	2201      	movs	r2, #1
 800342a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800342c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003430:	f000 f870 	bl	8003514 <FLASH_WaitForLastOperation>
 8003434:	4603      	mov	r3, r0
 8003436:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d12b      	bne.n	8003496 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003444:	783b      	ldrb	r3, [r7, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	68b8      	ldr	r0, [r7, #8]
 800344a:	f000 f91b 	bl	8003684 <FLASH_Program_Byte>
 800344e:	e016      	b.n	800347e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003456:	883b      	ldrh	r3, [r7, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	68b8      	ldr	r0, [r7, #8]
 800345c:	f000 f8ee 	bl	800363c <FLASH_Program_HalfWord>
 8003460:	e00d      	b.n	800347e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d105      	bne.n	8003474 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	68b8      	ldr	r0, [r7, #8]
 800346e:	f000 f8c3 	bl	80035f8 <FLASH_Program_Word>
 8003472:	e004      	b.n	800347e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f000 f88b 	bl	8003594 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800347e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003482:	f000 f847 	bl	8003514 <FLASH_WaitForLastOperation>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <HAL_FLASH_Program+0xa4>)
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	4a07      	ldr	r2, [pc, #28]	; (80034ac <HAL_FLASH_Program+0xa4>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_FLASH_Program+0xa0>)
 8003498:	2200      	movs	r2, #0
 800349a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000474 	.word	0x20000474
 80034ac:	40023c00 	.word	0x40023c00

080034b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_FLASH_Unlock+0x38>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da0b      	bge.n	80034da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_FLASH_Unlock+0x38>)
 80034c4:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_FLASH_Unlock+0x3c>)
 80034c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <HAL_FLASH_Unlock+0x38>)
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <HAL_FLASH_Unlock+0x40>)
 80034cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_FLASH_Unlock+0x38>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da01      	bge.n	80034da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80034da:	79fb      	ldrb	r3, [r7, #7]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40023c00 	.word	0x40023c00
 80034ec:	45670123 	.word	0x45670123
 80034f0:	cdef89ab 	.word	0xcdef89ab

080034f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_FLASH_Lock+0x1c>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <HAL_FLASH_Lock+0x1c>)
 80034fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003502:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40023c00 	.word	0x40023c00

08003514 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <FLASH_WaitForLastOperation+0x78>)
 8003522:	2200      	movs	r2, #0
 8003524:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003526:	f7ff f9bf 	bl	80028a8 <HAL_GetTick>
 800352a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800352c:	e010      	b.n	8003550 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d00c      	beq.n	8003550 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <FLASH_WaitForLastOperation+0x38>
 800353c:	f7ff f9b4 	bl	80028a8 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	d201      	bcs.n	8003550 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e019      	b.n	8003584 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <FLASH_WaitForLastOperation+0x7c>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e8      	bne.n	800352e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <FLASH_WaitForLastOperation+0x7c>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <FLASH_WaitForLastOperation+0x7c>)
 800356a:	2201      	movs	r2, #1
 800356c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <FLASH_WaitForLastOperation+0x7c>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800357a:	f000 f8a5 	bl	80036c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
  
}  
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000474 	.word	0x20000474
 8003590:	40023c00 	.word	0x40023c00

08003594 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <FLASH_Program_DoubleWord+0x60>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <FLASH_Program_DoubleWord+0x60>)
 80035a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <FLASH_Program_DoubleWord+0x60>)
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <FLASH_Program_DoubleWord+0x60>)
 80035b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <FLASH_Program_DoubleWord+0x60>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <FLASH_Program_DoubleWord+0x60>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80035ca:	f3bf 8f6f 	isb	sy
}
 80035ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80035d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	000a      	movs	r2, r1
 80035de:	2300      	movs	r3, #0
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	3104      	adds	r1, #4
 80035e4:	4613      	mov	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40023c00 	.word	0x40023c00

080035f8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <FLASH_Program_Word+0x40>)
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	4a0c      	ldr	r2, [pc, #48]	; (8003638 <FLASH_Program_Word+0x40>)
 8003608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <FLASH_Program_Word+0x40>)
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <FLASH_Program_Word+0x40>)
 8003614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003618:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <FLASH_Program_Word+0x40>)
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	4a06      	ldr	r2, [pc, #24]	; (8003638 <FLASH_Program_Word+0x40>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	601a      	str	r2, [r3, #0]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40023c00 	.word	0x40023c00

0800363c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003648:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <FLASH_Program_HalfWord+0x44>)
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <FLASH_Program_HalfWord+0x44>)
 800364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <FLASH_Program_HalfWord+0x44>)
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	4a09      	ldr	r2, [pc, #36]	; (8003680 <FLASH_Program_HalfWord+0x44>)
 800365a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <FLASH_Program_HalfWord+0x44>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	4a06      	ldr	r2, [pc, #24]	; (8003680 <FLASH_Program_HalfWord+0x44>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	801a      	strh	r2, [r3, #0]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40023c00 	.word	0x40023c00

08003684 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <FLASH_Program_Byte+0x40>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <FLASH_Program_Byte+0x40>)
 8003696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <FLASH_Program_Byte+0x40>)
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <FLASH_Program_Byte+0x40>)
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <FLASH_Program_Byte+0x40>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	4a06      	ldr	r2, [pc, #24]	; (80036c4 <FLASH_Program_Byte+0x40>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	701a      	strb	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40023c00 	.word	0x40023c00

080036c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80036cc:	4b2f      	ldr	r3, [pc, #188]	; (800378c <FLASH_SetErrorCode+0xc4>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036d8:	4b2d      	ldr	r3, [pc, #180]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f043 0310 	orr.w	r3, r3, #16
 80036e0:	4a2b      	ldr	r2, [pc, #172]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 80036e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80036e4:	4b29      	ldr	r3, [pc, #164]	; (800378c <FLASH_SetErrorCode+0xc4>)
 80036e6:	2210      	movs	r2, #16
 80036e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80036ea:	4b28      	ldr	r3, [pc, #160]	; (800378c <FLASH_SetErrorCode+0xc4>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f043 0308 	orr.w	r3, r3, #8
 80036fe:	4a24      	ldr	r2, [pc, #144]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 8003700:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003702:	4b22      	ldr	r3, [pc, #136]	; (800378c <FLASH_SetErrorCode+0xc4>)
 8003704:	2220      	movs	r2, #32
 8003706:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003708:	4b20      	ldr	r3, [pc, #128]	; (800378c <FLASH_SetErrorCode+0xc4>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f043 0304 	orr.w	r3, r3, #4
 800371c:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 800371e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <FLASH_SetErrorCode+0xc4>)
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003726:	4b19      	ldr	r3, [pc, #100]	; (800378c <FLASH_SetErrorCode+0xc4>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	4a15      	ldr	r2, [pc, #84]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 800373c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <FLASH_SetErrorCode+0xc4>)
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <FLASH_SetErrorCode+0xc4>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	4a0d      	ldr	r2, [pc, #52]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 800375a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <FLASH_SetErrorCode+0xc4>)
 800375e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003762:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <FLASH_SetErrorCode+0xc4>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f043 0320 	orr.w	r3, r3, #32
 8003778:	4a05      	ldr	r2, [pc, #20]	; (8003790 <FLASH_SetErrorCode+0xc8>)
 800377a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <FLASH_SetErrorCode+0xc4>)
 800377e:	2202      	movs	r2, #2
 8003780:	60da      	str	r2, [r3, #12]
  }
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40023c00 	.word	0x40023c00
 8003790:	20000474 	.word	0x20000474

08003794 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037a6:	4b32      	ldr	r3, [pc, #200]	; (8003870 <HAL_FLASHEx_Erase+0xdc>)
 80037a8:	7e1b      	ldrb	r3, [r3, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_FLASHEx_Erase+0x1e>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e05a      	b.n	8003868 <HAL_FLASHEx_Erase+0xd4>
 80037b2:	4b2f      	ldr	r3, [pc, #188]	; (8003870 <HAL_FLASHEx_Erase+0xdc>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037bc:	f7ff feaa 	bl	8003514 <FLASH_WaitForLastOperation>
 80037c0:	4603      	mov	r3, r0
 80037c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d14a      	bne.n	8003860 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f04f 32ff 	mov.w	r2, #4294967295
 80037d0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d117      	bne.n	800380a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 f846 	bl	8003878 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037f0:	f7ff fe90 	bl	8003514 <FLASH_WaitForLastOperation>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_FLASHEx_Erase+0xe0>)
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <HAL_FLASHEx_Erase+0xe0>)
 80037fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003802:	f023 0304 	bic.w	r3, r3, #4
 8003806:	6113      	str	r3, [r2, #16]
 8003808:	e028      	b.n	800385c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	e01c      	b.n	800384c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	4619      	mov	r1, r3
 800381a:	68b8      	ldr	r0, [r7, #8]
 800381c:	f000 f866 	bl	80038ec <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003820:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003824:	f7ff fe76 	bl	8003514 <FLASH_WaitForLastOperation>
 8003828:	4603      	mov	r3, r0
 800382a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_FLASHEx_Erase+0xe0>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HAL_FLASHEx_Erase+0xe0>)
 8003832:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003836:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	601a      	str	r2, [r3, #0]
          break;
 8003844:	e00a      	b.n	800385c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3301      	adds	r3, #1
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4413      	add	r3, r2
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	429a      	cmp	r2, r3
 800385a:	d3da      	bcc.n	8003812 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800385c:	f000 f894 	bl	8003988 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_FLASHEx_Erase+0xdc>)
 8003862:	2200      	movs	r2, #0
 8003864:	761a      	strb	r2, [r3, #24]

  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000474 	.word	0x20000474
 8003874:	40023c00 	.word	0x40023c00

08003878 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <FLASH_MassErase+0x70>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <FLASH_MassErase+0x70>)
 800388a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388e:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d108      	bne.n	80038a8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003896:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <FLASH_MassErase+0x70>)
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <FLASH_MassErase+0x70>)
 800389c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	6113      	str	r3, [r2, #16]
 80038a6:	e00f      	b.n	80038c8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d106      	bne.n	80038bc <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <FLASH_MassErase+0x70>)
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <FLASH_MassErase+0x70>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6113      	str	r3, [r2, #16]
 80038ba:	e005      	b.n	80038c8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <FLASH_MassErase+0x70>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <FLASH_MassErase+0x70>)
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <FLASH_MassErase+0x70>)
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	4313      	orrs	r3, r2
 80038d2:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <FLASH_MassErase+0x70>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6113      	str	r3, [r2, #16]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40023c00 	.word	0x40023c00

080038ec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e010      	b.n	800392a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d103      	bne.n	8003916 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800390e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	e009      	b.n	800392a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d103      	bne.n	8003924 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800391c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e002      	b.n	800392a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003924:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b0b      	cmp	r3, #11
 800392e:	d902      	bls.n	8003936 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <FLASH_Erase_Sector+0x98>)
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <FLASH_Erase_Sector+0x98>)
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003940:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <FLASH_Erase_Sector+0x98>)
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	490f      	ldr	r1, [pc, #60]	; (8003984 <FLASH_Erase_Sector+0x98>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800394e:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <FLASH_Erase_Sector+0x98>)
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <FLASH_Erase_Sector+0x98>)
 8003954:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003958:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <FLASH_Erase_Sector+0x98>)
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4313      	orrs	r3, r2
 8003964:	4a07      	ldr	r2, [pc, #28]	; (8003984 <FLASH_Erase_Sector+0x98>)
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <FLASH_Erase_Sector+0x98>)
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <FLASH_Erase_Sector+0x98>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	6113      	str	r3, [r2, #16]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40023c00 	.word	0x40023c00

08003988 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800398c:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <FLASH_FlushCaches+0x88>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003994:	2b00      	cmp	r3, #0
 8003996:	d017      	beq.n	80039c8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <FLASH_FlushCaches+0x88>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <FLASH_FlushCaches+0x88>)
 800399e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80039a4:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d017      	beq.n	8003a04 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039de:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <FLASH_FlushCaches+0x88>)
 80039fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a02:	6013      	str	r3, [r2, #0]
  }
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023c00 	.word	0x40023c00

08003a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b089      	sub	sp, #36	; 0x24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e177      	b.n	8003d20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a30:	2201      	movs	r2, #1
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	f040 8166 	bne.w	8003d1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d005      	beq.n	8003a66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d130      	bne.n	8003ac8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	2203      	movs	r2, #3
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 0201 	and.w	r2, r3, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d017      	beq.n	8003b04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	2203      	movs	r2, #3
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d123      	bne.n	8003b58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	08da      	lsrs	r2, r3, #3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3208      	adds	r2, #8
 8003b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	220f      	movs	r2, #15
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	08da      	lsrs	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3208      	adds	r2, #8
 8003b52:	69b9      	ldr	r1, [r7, #24]
 8003b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0203 	and.w	r2, r3, #3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80c0 	beq.w	8003d1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <HAL_GPIO_Init+0x324>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <HAL_GPIO_Init+0x324>)
 8003ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8003baa:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_GPIO_Init+0x324>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bb6:	4a61      	ldr	r2, [pc, #388]	; (8003d3c <HAL_GPIO_Init+0x328>)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	220f      	movs	r2, #15
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_GPIO_Init+0x32c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d037      	beq.n	8003c52 <HAL_GPIO_Init+0x23e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a57      	ldr	r2, [pc, #348]	; (8003d44 <HAL_GPIO_Init+0x330>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d031      	beq.n	8003c4e <HAL_GPIO_Init+0x23a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a56      	ldr	r2, [pc, #344]	; (8003d48 <HAL_GPIO_Init+0x334>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02b      	beq.n	8003c4a <HAL_GPIO_Init+0x236>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a55      	ldr	r2, [pc, #340]	; (8003d4c <HAL_GPIO_Init+0x338>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d025      	beq.n	8003c46 <HAL_GPIO_Init+0x232>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a54      	ldr	r2, [pc, #336]	; (8003d50 <HAL_GPIO_Init+0x33c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01f      	beq.n	8003c42 <HAL_GPIO_Init+0x22e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a53      	ldr	r2, [pc, #332]	; (8003d54 <HAL_GPIO_Init+0x340>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d019      	beq.n	8003c3e <HAL_GPIO_Init+0x22a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <HAL_GPIO_Init+0x344>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_GPIO_Init+0x226>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a51      	ldr	r2, [pc, #324]	; (8003d5c <HAL_GPIO_Init+0x348>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00d      	beq.n	8003c36 <HAL_GPIO_Init+0x222>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a50      	ldr	r2, [pc, #320]	; (8003d60 <HAL_GPIO_Init+0x34c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <HAL_GPIO_Init+0x21e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4f      	ldr	r2, [pc, #316]	; (8003d64 <HAL_GPIO_Init+0x350>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <HAL_GPIO_Init+0x21a>
 8003c2a:	2309      	movs	r3, #9
 8003c2c:	e012      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c2e:	230a      	movs	r3, #10
 8003c30:	e010      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c32:	2308      	movs	r3, #8
 8003c34:	e00e      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c36:	2307      	movs	r3, #7
 8003c38:	e00c      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c3a:	2306      	movs	r3, #6
 8003c3c:	e00a      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c3e:	2305      	movs	r3, #5
 8003c40:	e008      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c42:	2304      	movs	r3, #4
 8003c44:	e006      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c46:	2303      	movs	r3, #3
 8003c48:	e004      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e002      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_GPIO_Init+0x240>
 8003c52:	2300      	movs	r3, #0
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	f002 0203 	and.w	r2, r2, #3
 8003c5a:	0092      	lsls	r2, r2, #2
 8003c5c:	4093      	lsls	r3, r2
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c64:	4935      	ldr	r1, [pc, #212]	; (8003d3c <HAL_GPIO_Init+0x328>)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	089b      	lsrs	r3, r3, #2
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c72:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <HAL_GPIO_Init+0x354>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c96:	4a34      	ldr	r2, [pc, #208]	; (8003d68 <HAL_GPIO_Init+0x354>)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c9c:	4b32      	ldr	r3, [pc, #200]	; (8003d68 <HAL_GPIO_Init+0x354>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <HAL_GPIO_Init+0x354>)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cc6:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <HAL_GPIO_Init+0x354>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cea:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <HAL_GPIO_Init+0x354>)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_GPIO_Init+0x354>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <HAL_GPIO_Init+0x354>)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b0f      	cmp	r3, #15
 8003d24:	f67f ae84 	bls.w	8003a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40013800 	.word	0x40013800
 8003d40:	40020000 	.word	0x40020000
 8003d44:	40020400 	.word	0x40020400
 8003d48:	40020800 	.word	0x40020800
 8003d4c:	40020c00 	.word	0x40020c00
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40021400 	.word	0x40021400
 8003d58:	40021800 	.word	0x40021800
 8003d5c:	40021c00 	.word	0x40021c00
 8003d60:	40022000 	.word	0x40022000
 8003d64:	40022400 	.word	0x40022400
 8003d68:	40013c00 	.word	0x40013c00

08003d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
 8003d88:	e001      	b.n	8003d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]
 8003da8:	4613      	mov	r3, r2
 8003daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dac:	787b      	ldrb	r3, [r7, #1]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003db8:	e003      	b.n	8003dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dba:	887b      	ldrh	r3, [r7, #2]
 8003dbc:	041a      	lsls	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	619a      	str	r2, [r3, #24]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003de0:	887a      	ldrh	r2, [r7, #2]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4013      	ands	r3, r2
 8003de6:	041a      	lsls	r2, r3, #16
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	43d9      	mvns	r1, r3
 8003dec:	887b      	ldrh	r3, [r7, #2]
 8003dee:	400b      	ands	r3, r1
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e0e:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e1a:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fef2 	bl	8000c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40013c00 	.word	0x40013c00

08003e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e12b      	b.n	800409e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fa54 	bl	8002308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e98:	f001 fa5c 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4a81      	ldr	r2, [pc, #516]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d807      	bhi.n	8003eb8 <HAL_I2C_Init+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a80      	ldr	r2, [pc, #512]	; (80040ac <HAL_I2C_Init+0x278>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	bf94      	ite	ls
 8003eb0:	2301      	movls	r3, #1
 8003eb2:	2300      	movhi	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e006      	b.n	8003ec6 <HAL_I2C_Init+0x92>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a7d      	ldr	r2, [pc, #500]	; (80040b0 <HAL_I2C_Init+0x27c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bf94      	ite	ls
 8003ec0:	2301      	movls	r3, #1
 8003ec2:	2300      	movhi	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0e7      	b.n	800409e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a78      	ldr	r2, [pc, #480]	; (80040b4 <HAL_I2C_Init+0x280>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0c9b      	lsrs	r3, r3, #18
 8003ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d802      	bhi.n	8003f08 <HAL_I2C_Init+0xd4>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3301      	adds	r3, #1
 8003f06:	e009      	b.n	8003f1c <HAL_I2C_Init+0xe8>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	4a69      	ldr	r2, [pc, #420]	; (80040b8 <HAL_I2C_Init+0x284>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	495c      	ldr	r1, [pc, #368]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	d819      	bhi.n	8003f70 <HAL_I2C_Init+0x13c>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e59      	subs	r1, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f4a:	1c59      	adds	r1, r3, #1
 8003f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f50:	400b      	ands	r3, r1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_I2C_Init+0x138>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1e59      	subs	r1, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f64:	3301      	adds	r3, #1
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	e051      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	e04f      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d111      	bne.n	8003f9c <HAL_I2C_Init+0x168>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1e58      	subs	r0, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	440b      	add	r3, r1
 8003f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e012      	b.n	8003fc2 <HAL_I2C_Init+0x18e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1e58      	subs	r0, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	0099      	lsls	r1, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_Init+0x196>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e022      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_I2C_Init+0x1bc>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1e58      	subs	r0, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	440b      	add	r3, r1
 8003fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fee:	e00f      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e58      	subs	r0, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	0099      	lsls	r1, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	fbb0 f3f3 	udiv	r3, r0, r3
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	6809      	ldr	r1, [r1, #0]
 8004014:	4313      	orrs	r3, r2
 8004016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800403e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6911      	ldr	r1, [r2, #16]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68d2      	ldr	r2, [r2, #12]
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	430b      	orrs	r3, r1
 8004052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	000186a0 	.word	0x000186a0
 80040ac:	001e847f 	.word	0x001e847f
 80040b0:	003d08ff 	.word	0x003d08ff
 80040b4:	431bde83 	.word	0x431bde83
 80040b8:	10624dd3 	.word	0x10624dd3

080040bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	461a      	mov	r2, r3
 80040c8:	460b      	mov	r3, r1
 80040ca:	817b      	strh	r3, [r7, #10]
 80040cc:	4613      	mov	r3, r2
 80040ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d0:	f7fe fbea 	bl	80028a8 <HAL_GetTick>
 80040d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b20      	cmp	r3, #32
 80040e0:	f040 80e0 	bne.w	80042a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2319      	movs	r3, #25
 80040ea:	2201      	movs	r2, #1
 80040ec:	4970      	ldr	r1, [pc, #448]	; (80042b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fa92 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
 80040fc:	e0d3      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_I2C_Master_Transmit+0x50>
 8004108:	2302      	movs	r3, #2
 800410a:	e0cc      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d007      	beq.n	8004132 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2221      	movs	r2, #33	; 0x21
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2210      	movs	r2, #16
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	893a      	ldrh	r2, [r7, #8]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a50      	ldr	r2, [pc, #320]	; (80042b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004174:	8979      	ldrh	r1, [r7, #10]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f9ca 	bl	8004514 <I2C_MasterRequestWrite>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e08d      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041a0:	e066      	b.n	8004270 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	6a39      	ldr	r1, [r7, #32]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fb0c 	bl	80047c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00d      	beq.n	80041ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d107      	bne.n	80041ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06b      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d11b      	bne.n	8004244 <HAL_I2C_Master_Transmit+0x188>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	d017      	beq.n	8004244 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	6a39      	ldr	r1, [r7, #32]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fafc 	bl	8004846 <I2C_WaitOnBTFFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b04      	cmp	r3, #4
 800425a:	d107      	bne.n	800426c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e01a      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d194      	bne.n	80041a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	00100002 	.word	0x00100002
 80042b4:	ffff0000 	.word	0xffff0000

080042b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	460b      	mov	r3, r1
 80042c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80042c8:	f7fe faee 	bl	80028a8 <HAL_GetTick>
 80042cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80042ce:	2301      	movs	r3, #1
 80042d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b20      	cmp	r3, #32
 80042dc:	f040 8111 	bne.w	8004502 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2319      	movs	r3, #25
 80042e6:	2201      	movs	r2, #1
 80042e8:	4988      	ldr	r1, [pc, #544]	; (800450c <HAL_I2C_IsDeviceReady+0x254>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f994 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
 80042f8:	e104      	b.n	8004504 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_I2C_IsDeviceReady+0x50>
 8004304:	2302      	movs	r3, #2
 8004306:	e0fd      	b.n	8004504 <HAL_I2C_IsDeviceReady+0x24c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d007      	beq.n	800432e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2224      	movs	r2, #36	; 0x24
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a70      	ldr	r2, [pc, #448]	; (8004510 <HAL_I2C_IsDeviceReady+0x258>)
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2200      	movs	r2, #0
 800436a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f952 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004388:	d103      	bne.n	8004392 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0b6      	b.n	8004504 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004396:	897b      	ldrh	r3, [r7, #10]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80043a6:	f7fe fa7f 	bl	80028a8 <HAL_GetTick>
 80043aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043da:	e025      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fe fa64 	bl	80028a8 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <HAL_I2C_IsDeviceReady+0x13a>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	22a0      	movs	r2, #160	; 0xa0
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b02      	cmp	r3, #2
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2ba0      	cmp	r3, #160	; 0xa0
 8004432:	d005      	beq.n	8004440 <HAL_I2C_IsDeviceReady+0x188>
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <HAL_I2C_IsDeviceReady+0x188>
 800443a:	7dbb      	ldrb	r3, [r7, #22]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0cd      	beq.n	80043dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d129      	bne.n	80044aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004464:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2319      	movs	r3, #25
 8004482:	2201      	movs	r2, #1
 8004484:	4921      	ldr	r1, [pc, #132]	; (800450c <HAL_I2C_IsDeviceReady+0x254>)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f8c6 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e036      	b.n	8004504 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e02c      	b.n	8004504 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2319      	movs	r3, #25
 80044ca:	2201      	movs	r2, #1
 80044cc:	490f      	ldr	r1, [pc, #60]	; (800450c <HAL_I2C_IsDeviceReady+0x254>)
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f8a2 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e012      	b.n	8004504 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	3301      	adds	r3, #1
 80044e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	f4ff af32 	bcc.w	8004352 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3720      	adds	r7, #32
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	00100002 	.word	0x00100002
 8004510:	ffff0000 	.word	0xffff0000

08004514 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	460b      	mov	r3, r1
 8004522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d006      	beq.n	800453e <I2C_MasterRequestWrite+0x2a>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d003      	beq.n	800453e <I2C_MasterRequestWrite+0x2a>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800453c:	d108      	bne.n	8004550 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e00b      	b.n	8004568 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	2b12      	cmp	r3, #18
 8004556:	d107      	bne.n	8004568 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004566:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f84f 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00d      	beq.n	800459c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458e:	d103      	bne.n	8004598 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e035      	b.n	8004608 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a4:	d108      	bne.n	80045b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045a6:	897b      	ldrh	r3, [r7, #10]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045b4:	611a      	str	r2, [r3, #16]
 80045b6:	e01b      	b.n	80045f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045b8:	897b      	ldrh	r3, [r7, #10]
 80045ba:	11db      	asrs	r3, r3, #7
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0306 	and.w	r3, r3, #6
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f063 030f 	orn	r3, r3, #15
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <I2C_MasterRequestWrite+0xfc>)
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f875 	bl	80046c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e010      	b.n	8004608 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045e6:	897b      	ldrh	r3, [r7, #10]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4907      	ldr	r1, [pc, #28]	; (8004614 <I2C_MasterRequestWrite+0x100>)
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f865 	bl	80046c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	00010008 	.word	0x00010008
 8004614:	00010002 	.word	0x00010002

08004618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004628:	e025      	b.n	8004676 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d021      	beq.n	8004676 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fe f939 	bl	80028a8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d116      	bne.n	8004676 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e023      	b.n	80046be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10d      	bne.n	800469c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	43da      	mvns	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4013      	ands	r3, r2
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	bf0c      	ite	eq
 8004692:	2301      	moveq	r3, #1
 8004694:	2300      	movne	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	e00c      	b.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	43da      	mvns	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4013      	ands	r3, r2
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bf0c      	ite	eq
 80046ae:	2301      	moveq	r3, #1
 80046b0:	2300      	movne	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d0b6      	beq.n	800462a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046d4:	e051      	b.n	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e4:	d123      	bne.n	800472e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e046      	b.n	80047bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d021      	beq.n	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7fe f8b7 	bl	80028a8 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d116      	bne.n	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f043 0220 	orr.w	r2, r3, #32
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e020      	b.n	80047bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	d10c      	bne.n	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	43da      	mvns	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4013      	ands	r3, r2
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	bf14      	ite	ne
 8004796:	2301      	movne	r3, #1
 8004798:	2300      	moveq	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	e00b      	b.n	80047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	43da      	mvns	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d18d      	bne.n	80046d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047d0:	e02d      	b.n	800482e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f878 	bl	80048c8 <I2C_IsAcknowledgeFailed>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e02d      	b.n	800483e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d021      	beq.n	800482e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fe f85d 	bl	80028a8 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d116      	bne.n	800482e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e007      	b.n	800483e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d1ca      	bne.n	80047d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004852:	e02d      	b.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f837 	bl	80048c8 <I2C_IsAcknowledgeFailed>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e02d      	b.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d021      	beq.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486c:	f7fe f81c 	bl	80028a8 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	d302      	bcc.n	8004882 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d116      	bne.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e007      	b.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d1ca      	bne.n	8004854 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048de:	d11b      	bne.n	8004918 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	f043 0204 	orr.w	r2, r3, #4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b20      	cmp	r3, #32
 800493a:	d129      	bne.n	8004990 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2224      	movs	r2, #36	; 0x24
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0210 	bic.w	r2, r2, #16
 8004962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d12a      	bne.n	8004a0e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2224      	movs	r2, #36	; 0x24
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	f023 030f 	bic.w	r3, r3, #15
 80049de:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	89fa      	ldrh	r2, [r7, #14]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e000      	b.n	8004a10 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
  }
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4b20      	ldr	r3, [pc, #128]	; (8004aac <HAL_PWREx_EnableOverDrive+0x90>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <HAL_PWREx_EnableOverDrive+0x90>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	; 0x40
 8004a36:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <HAL_PWREx_EnableOverDrive+0x90>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a48:	f7fd ff2e 	bl	80028a8 <HAL_GetTick>
 8004a4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a4e:	e009      	b.n	8004a64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a50:	f7fd ff2a 	bl	80028a8 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a5e:	d901      	bls.n	8004a64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e01f      	b.n	8004aa4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a64:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d1ee      	bne.n	8004a50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a78:	f7fd ff16 	bl	80028a8 <HAL_GetTick>
 8004a7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a7e:	e009      	b.n	8004a94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a80:	f7fd ff12 	bl	80028a8 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a8e:	d901      	bls.n	8004a94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e007      	b.n	8004aa4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa0:	d1ee      	bne.n	8004a80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	420e0040 	.word	0x420e0040
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	420e0044 	.word	0x420e0044

08004abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e264      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d075      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ada:	4ba3      	ldr	r3, [pc, #652]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d00c      	beq.n	8004b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae6:	4ba0      	ldr	r3, [pc, #640]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d112      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4b9d      	ldr	r3, [pc, #628]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004afe:	d10b      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	4b99      	ldr	r3, [pc, #612]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d05b      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x108>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d157      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e23f      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x74>
 8004b22:	4b91      	ldr	r3, [pc, #580]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a90      	ldr	r2, [pc, #576]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e01d      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x98>
 8004b3a:	4b8b      	ldr	r3, [pc, #556]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a8a      	ldr	r2, [pc, #552]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4b88      	ldr	r3, [pc, #544]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a87      	ldr	r2, [pc, #540]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e00b      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b54:	4b84      	ldr	r3, [pc, #528]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a83      	ldr	r2, [pc, #524]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b81      	ldr	r3, [pc, #516]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a80      	ldr	r2, [pc, #512]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fd fe98 	bl	80028a8 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fd fe94 	bl	80028a8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	; 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e204      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0xc0>
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fe84 	bl	80028a8 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd fe80 	bl	80028a8 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1f0      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	4b6c      	ldr	r3, [pc, #432]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0xe8>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bd2:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d11c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b5f      	ldr	r3, [pc, #380]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d116      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf6:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1c4      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0e:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4952      	ldr	r1, [pc, #328]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	e03a      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2c:	4b4f      	ldr	r3, [pc, #316]	; (8004d6c <HAL_RCC_OscConfig+0x2b0>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fd fe39 	bl	80028a8 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fd fe35 	bl	80028a8 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e1a5      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b43      	ldr	r3, [pc, #268]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4940      	ldr	r1, [pc, #256]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_RCC_OscConfig+0x2b0>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd fe18 	bl	80028a8 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fd fe14 	bl	80028a8 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e184      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d030      	beq.n	8004d08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_RCC_OscConfig+0x2b4>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd fdf8 	bl	80028a8 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fd fdf4 	bl	80028a8 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e164      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x200>
 8004cda:	e015      	b.n	8004d08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <HAL_RCC_OscConfig+0x2b4>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd fde1 	bl	80028a8 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cea:	f7fd fddd 	bl	80028a8 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e14d      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80a0 	beq.w	8004e56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a0e      	ldr	r2, [pc, #56]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d121      	bne.n	8004d96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fda3 	bl	80028a8 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e011      	b.n	8004d8a <HAL_RCC_OscConfig+0x2ce>
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	42470000 	.word	0x42470000
 8004d70:	42470e80 	.word	0x42470e80
 8004d74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d78:	f7fd fd96 	bl	80028a8 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e106      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <HAL_RCC_OscConfig+0x4e4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x2f0>
 8004d9e:	4b81      	ldr	r3, [pc, #516]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a80      	ldr	r2, [pc, #512]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70
 8004daa:	e01c      	b.n	8004de6 <HAL_RCC_OscConfig+0x32a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d10c      	bne.n	8004dce <HAL_RCC_OscConfig+0x312>
 8004db4:	4b7b      	ldr	r3, [pc, #492]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	4a7a      	ldr	r2, [pc, #488]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dba:	f043 0304 	orr.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc0:	4b78      	ldr	r3, [pc, #480]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a77      	ldr	r2, [pc, #476]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	e00b      	b.n	8004de6 <HAL_RCC_OscConfig+0x32a>
 8004dce:	4b75      	ldr	r3, [pc, #468]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a74      	ldr	r2, [pc, #464]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b72      	ldr	r3, [pc, #456]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a71      	ldr	r2, [pc, #452]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d015      	beq.n	8004e1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dee:	f7fd fd5b 	bl	80028a8 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fd fd57 	bl	80028a8 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e0c5      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ee      	beq.n	8004df6 <HAL_RCC_OscConfig+0x33a>
 8004e18:	e014      	b.n	8004e44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fd45 	bl	80028a8 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd fd41 	bl	80028a8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0af      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	4b5a      	ldr	r3, [pc, #360]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ee      	bne.n	8004e22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d105      	bne.n	8004e56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4a:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	4a55      	ldr	r2, [pc, #340]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 809b 	beq.w	8004f96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e60:	4b50      	ldr	r3, [pc, #320]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d05c      	beq.n	8004f26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d141      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e74:	4b4c      	ldr	r3, [pc, #304]	; (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7a:	f7fd fd15 	bl	80028a8 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e82:	f7fd fd11 	bl	80028a8 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e081      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	019b      	lsls	r3, r3, #6
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	4937      	ldr	r1, [pc, #220]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fd fcea 	bl	80028a8 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fd fce6 	bl	80028a8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e056      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x41c>
 8004ef6:	e04e      	b.n	8004f96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fd fcd3 	bl	80028a8 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f06:	f7fd fccf 	bl	80028a8 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e03f      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f18:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCC_OscConfig+0x44a>
 8004f24:	e037      	b.n	8004f96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e032      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f32:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d028      	beq.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d121      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d11a      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f62:	4013      	ands	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d111      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d001      	beq.n	8004f96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	42470060 	.word	0x42470060

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0cc      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b68      	ldr	r3, [pc, #416]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d90c      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b65      	ldr	r3, [pc, #404]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b63      	ldr	r3, [pc, #396]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0b8      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b59      	ldr	r3, [pc, #356]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a58      	ldr	r2, [pc, #352]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800500a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005018:	4b53      	ldr	r3, [pc, #332]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a52      	ldr	r2, [pc, #328]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b50      	ldr	r3, [pc, #320]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	494d      	ldr	r1, [pc, #308]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d044      	beq.n	80050cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d119      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d003      	beq.n	800506a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	2b03      	cmp	r3, #3
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e067      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800508a:	4b37      	ldr	r3, [pc, #220]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4934      	ldr	r1, [pc, #208]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800509c:	f7fd fc04 	bl	80028a8 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fd fc00 	bl	80028a8 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e04f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 020c 	and.w	r2, r3, #12
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1eb      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050cc:	4b25      	ldr	r3, [pc, #148]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d20c      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b22      	ldr	r3, [pc, #136]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b20      	ldr	r3, [pc, #128]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e032      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4916      	ldr	r1, [pc, #88]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	490e      	ldr	r1, [pc, #56]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005132:	f000 f821 	bl	8005178 <HAL_RCC_GetSysClockFreq>
 8005136:	4602      	mov	r2, r0
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	490a      	ldr	r1, [pc, #40]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	5ccb      	ldrb	r3, [r1, r3]
 8005146:	fa22 f303 	lsr.w	r3, r2, r3
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800514c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fb64 	bl	8002820 <HAL_InitTick>

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40023c00 	.word	0x40023c00
 8005168:	40023800 	.word	0x40023800
 800516c:	080084f0 	.word	0x080084f0
 8005170:	2000016c 	.word	0x2000016c
 8005174:	20000170 	.word	0x20000170

08005178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005178:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	607b      	str	r3, [r7, #4]
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	2300      	movs	r3, #0
 800518a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005190:	4b67      	ldr	r3, [pc, #412]	; (8005330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b08      	cmp	r3, #8
 800519a:	d00d      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x40>
 800519c:	2b08      	cmp	r3, #8
 800519e:	f200 80bd 	bhi.w	800531c <HAL_RCC_GetSysClockFreq+0x1a4>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x34>
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051aa:	e0b7      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051ac:	4b61      	ldr	r3, [pc, #388]	; (8005334 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051ae:	60bb      	str	r3, [r7, #8]
       break;
 80051b0:	e0b7      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051b2:	4b61      	ldr	r3, [pc, #388]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80051b4:	60bb      	str	r3, [r7, #8]
      break;
 80051b6:	e0b4      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b8:	4b5d      	ldr	r3, [pc, #372]	; (8005330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051c2:	4b5b      	ldr	r3, [pc, #364]	; (8005330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d04d      	beq.n	800526a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ce:	4b58      	ldr	r3, [pc, #352]	; (8005330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	099b      	lsrs	r3, r3, #6
 80051d4:	461a      	mov	r2, r3
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051de:	f04f 0100 	mov.w	r1, #0
 80051e2:	ea02 0800 	and.w	r8, r2, r0
 80051e6:	ea03 0901 	and.w	r9, r3, r1
 80051ea:	4640      	mov	r0, r8
 80051ec:	4649      	mov	r1, r9
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	014b      	lsls	r3, r1, #5
 80051f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051fc:	0142      	lsls	r2, r0, #5
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	ebb0 0008 	subs.w	r0, r0, r8
 8005206:	eb61 0109 	sbc.w	r1, r1, r9
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	018b      	lsls	r3, r1, #6
 8005214:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005218:	0182      	lsls	r2, r0, #6
 800521a:	1a12      	subs	r2, r2, r0
 800521c:	eb63 0301 	sbc.w	r3, r3, r1
 8005220:	f04f 0000 	mov.w	r0, #0
 8005224:	f04f 0100 	mov.w	r1, #0
 8005228:	00d9      	lsls	r1, r3, #3
 800522a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800522e:	00d0      	lsls	r0, r2, #3
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	eb12 0208 	adds.w	r2, r2, r8
 8005238:	eb43 0309 	adc.w	r3, r3, r9
 800523c:	f04f 0000 	mov.w	r0, #0
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	0259      	lsls	r1, r3, #9
 8005246:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800524a:	0250      	lsls	r0, r2, #9
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4610      	mov	r0, r2
 8005252:	4619      	mov	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	461a      	mov	r2, r3
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	f7fb f820 	bl	80002a0 <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4613      	mov	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e04a      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526a:	4b31      	ldr	r3, [pc, #196]	; (8005330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	099b      	lsrs	r3, r3, #6
 8005270:	461a      	mov	r2, r3
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	f240 10ff 	movw	r0, #511	; 0x1ff
 800527a:	f04f 0100 	mov.w	r1, #0
 800527e:	ea02 0400 	and.w	r4, r2, r0
 8005282:	ea03 0501 	and.w	r5, r3, r1
 8005286:	4620      	mov	r0, r4
 8005288:	4629      	mov	r1, r5
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	014b      	lsls	r3, r1, #5
 8005294:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005298:	0142      	lsls	r2, r0, #5
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	1b00      	subs	r0, r0, r4
 80052a0:	eb61 0105 	sbc.w	r1, r1, r5
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	018b      	lsls	r3, r1, #6
 80052ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052b2:	0182      	lsls	r2, r0, #6
 80052b4:	1a12      	subs	r2, r2, r0
 80052b6:	eb63 0301 	sbc.w	r3, r3, r1
 80052ba:	f04f 0000 	mov.w	r0, #0
 80052be:	f04f 0100 	mov.w	r1, #0
 80052c2:	00d9      	lsls	r1, r3, #3
 80052c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c8:	00d0      	lsls	r0, r2, #3
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	1912      	adds	r2, r2, r4
 80052d0:	eb45 0303 	adc.w	r3, r5, r3
 80052d4:	f04f 0000 	mov.w	r0, #0
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	0299      	lsls	r1, r3, #10
 80052de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052e2:	0290      	lsls	r0, r2, #10
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4610      	mov	r0, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	f7fa ffd4 	bl	80002a0 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	3301      	adds	r3, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	60bb      	str	r3, [r7, #8]
      break;
 800531a:	e002      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800531e:	60bb      	str	r3, [r7, #8]
      break;
 8005320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005322:	68bb      	ldr	r3, [r7, #8]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800532e:	bf00      	nop
 8005330:	40023800 	.word	0x40023800
 8005334:	00f42400 	.word	0x00f42400
 8005338:	007a1200 	.word	0x007a1200

0800533c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <HAL_RCC_GetHCLKFreq+0x14>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	2000016c 	.word	0x2000016c

08005354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005358:	f7ff fff0 	bl	800533c <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0a9b      	lsrs	r3, r3, #10
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	08008500 	.word	0x08008500

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005380:	f7ff ffdc 	bl	800533c <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0b5b      	lsrs	r3, r3, #13
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	08008500 	.word	0x08008500

080053a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10b      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d105      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d075      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053d8:	4bad      	ldr	r3, [pc, #692]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053de:	f7fd fa63 	bl	80028a8 <HAL_GetTick>
 80053e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053e4:	e008      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053e6:	f7fd fa5f 	bl	80028a8 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e18b      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053f8:	4ba6      	ldr	r3, [pc, #664]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1f0      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	019a      	lsls	r2, r3, #6
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	071b      	lsls	r3, r3, #28
 800541c:	499d      	ldr	r1, [pc, #628]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01f      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005430:	4b98      	ldr	r3, [pc, #608]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005436:	0f1b      	lsrs	r3, r3, #28
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	019a      	lsls	r2, r3, #6
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	061b      	lsls	r3, r3, #24
 800544a:	431a      	orrs	r2, r3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	071b      	lsls	r3, r3, #28
 8005450:	4990      	ldr	r1, [pc, #576]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005458:	4b8e      	ldr	r3, [pc, #568]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800545a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800545e:	f023 021f 	bic.w	r2, r3, #31
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	3b01      	subs	r3, #1
 8005468:	498a      	ldr	r1, [pc, #552]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00d      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	019a      	lsls	r2, r3, #6
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	071b      	lsls	r3, r3, #28
 8005490:	4980      	ldr	r1, [pc, #512]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005498:	4b7d      	ldr	r3, [pc, #500]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800549e:	f7fd fa03 	bl	80028a8 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054a6:	f7fd f9ff 	bl	80028a8 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e12b      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054b8:	4b76      	ldr	r3, [pc, #472]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d079      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054dc:	4b6e      	ldr	r3, [pc, #440]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054e2:	f7fd f9e1 	bl	80028a8 <HAL_GetTick>
 80054e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054e8:	e008      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80054ea:	f7fd f9dd 	bl	80028a8 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d901      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e109      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054fc:	4b65      	ldr	r3, [pc, #404]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005508:	d0ef      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d020      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005516:	4b5f      	ldr	r3, [pc, #380]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	0f1b      	lsrs	r3, r3, #28
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	019a      	lsls	r2, r3, #6
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	061b      	lsls	r3, r3, #24
 8005530:	431a      	orrs	r2, r3
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	071b      	lsls	r3, r3, #28
 8005536:	4957      	ldr	r1, [pc, #348]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800553e:	4b55      	ldr	r3, [pc, #340]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005544:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	3b01      	subs	r3, #1
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	4950      	ldr	r1, [pc, #320]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01e      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005564:	4b4b      	ldr	r3, [pc, #300]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	0e1b      	lsrs	r3, r3, #24
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	019a      	lsls	r2, r3, #6
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	061b      	lsls	r3, r3, #24
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	071b      	lsls	r3, r3, #28
 8005584:	4943      	ldr	r1, [pc, #268]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800558c:	4b41      	ldr	r3, [pc, #260]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800558e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	493e      	ldr	r1, [pc, #248]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055a2:	4b3d      	ldr	r3, [pc, #244]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055a8:	f7fd f97e 	bl	80028a8 <HAL_GetTick>
 80055ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80055b0:	f7fd f97a 	bl	80028a8 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e0a6      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055c2:	4b34      	ldr	r3, [pc, #208]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ce:	d1ef      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 808d 	beq.w	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	4b2c      	ldr	r3, [pc, #176]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	4a2b      	ldr	r2, [pc, #172]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ec:	6413      	str	r3, [r2, #64]	; 0x40
 80055ee:	4b29      	ldr	r3, [pc, #164]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055fa:	4b28      	ldr	r3, [pc, #160]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a27      	ldr	r2, [pc, #156]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005604:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005606:	f7fd f94f 	bl	80028a8 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800560e:	f7fd f94b 	bl	80028a8 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e077      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005620:	4b1e      	ldr	r3, [pc, #120]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005634:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d039      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	429a      	cmp	r2, r3
 8005648:	d032      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005660:	4a0c      	ldr	r2, [pc, #48]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d11e      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005672:	f7fd f919 	bl	80028a8 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005678:	e014      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fd f915 	bl	80028a8 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	; 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d90b      	bls.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e03f      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005690:	42470068 	.word	0x42470068
 8005694:	40023800 	.word	0x40023800
 8005698:	42470070 	.word	0x42470070
 800569c:	40007000 	.word	0x40007000
 80056a0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a4:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0e4      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056bc:	d10d      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x336>
 80056be:	4b16      	ldr	r3, [pc, #88]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80056ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d2:	4911      	ldr	r1, [pc, #68]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	608b      	str	r3, [r1, #8]
 80056d8:	e005      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	4a0e      	ldr	r2, [pc, #56]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056e4:	6093      	str	r3, [r2, #8]
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f2:	4909      	ldr	r1, [pc, #36]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800570a:	4b04      	ldr	r3, [pc, #16]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800570c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40023800 	.word	0x40023800
 800571c:	424711e0 	.word	0x424711e0

08005720 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e083      	b.n	800583a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	7f5b      	ldrb	r3, [r3, #29]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d105      	bne.n	8005748 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fc fe28 	bl	8002398 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	22ca      	movs	r2, #202	; 0xca
 8005754:	625a      	str	r2, [r3, #36]	; 0x24
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2253      	movs	r2, #83	; 0x53
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f897 	bl	8005892 <RTC_EnterInitMode>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	22ff      	movs	r2, #255	; 0xff
 8005770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e05e      	b.n	800583a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800578a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6899      	ldr	r1, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68d2      	ldr	r2, [r2, #12]
 80057b6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6919      	ldr	r1, [r3, #16]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	041a      	lsls	r2, r3, #16
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10e      	bne.n	8005808 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f829 	bl	8005842 <HAL_RTC_WaitForSynchro>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2204      	movs	r2, #4
 8005802:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e018      	b.n	800583a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005816:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	22ff      	movs	r2, #255	; 0xff
 8005830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005838:	2300      	movs	r3, #0
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800585c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800585e:	f7fd f823 	bl	80028a8 <HAL_GetTick>
 8005862:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005864:	e009      	b.n	800587a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005866:	f7fd f81f 	bl	80028a8 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005874:	d901      	bls.n	800587a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e007      	b.n	800588a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ee      	beq.n	8005866 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d119      	bne.n	80058e0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f04f 32ff 	mov.w	r2, #4294967295
 80058b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058b6:	f7fc fff7 	bl	80028a8 <HAL_GetTick>
 80058ba:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058bc:	e009      	b.n	80058d2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058be:	f7fc fff3 	bl	80028a8 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058cc:	d901      	bls.n	80058d2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e007      	b.n	80058e2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0ee      	beq.n	80058be <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e041      	b.n	8005980 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fc fd6b 	bl	80023ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3304      	adds	r3, #4
 8005926:	4619      	mov	r1, r3
 8005928:	4610      	mov	r0, r2
 800592a:	f000 fce9 	bl	8006300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	d001      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e04e      	b.n	8005a3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d022      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x80>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ca:	d01d      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x80>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x80>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x80>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x80>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x80>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x80>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d111      	bne.n	8005a2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b06      	cmp	r3, #6
 8005a18:	d010      	beq.n	8005a3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2a:	e007      	b.n	8005a3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40001800 	.word	0x40001800

08005a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e041      	b.n	8005afe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f839 	bl	8005b06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f000 fc2a 	bl	8006300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <HAL_TIM_PWM_Start+0x24>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	bf14      	ite	ne
 8005b38:	2301      	movne	r3, #1
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e022      	b.n	8005b86 <HAL_TIM_PWM_Start+0x6a>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d109      	bne.n	8005b5a <HAL_TIM_PWM_Start+0x3e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	bf14      	ite	ne
 8005b52:	2301      	movne	r3, #1
 8005b54:	2300      	moveq	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	e015      	b.n	8005b86 <HAL_TIM_PWM_Start+0x6a>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d109      	bne.n	8005b74 <HAL_TIM_PWM_Start+0x58>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e008      	b.n	8005b86 <HAL_TIM_PWM_Start+0x6a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07c      	b.n	8005c88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <HAL_TIM_PWM_Start+0x82>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9c:	e013      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xaa>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d104      	bne.n	8005bae <HAL_TIM_PWM_Start+0x92>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bac:	e00b      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xaa>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d104      	bne.n	8005bbe <HAL_TIM_PWM_Start+0xa2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbc:	e003      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xaa>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fe80 	bl	80068d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <HAL_TIM_PWM_Start+0x174>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_TIM_PWM_Start+0xcc>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a2c      	ldr	r2, [pc, #176]	; (8005c94 <HAL_TIM_PWM_Start+0x178>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_PWM_Start+0xd0>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_TIM_PWM_Start+0xd2>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a22      	ldr	r2, [pc, #136]	; (8005c90 <HAL_TIM_PWM_Start+0x174>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d022      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c14:	d01d      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	; (8005c98 <HAL_TIM_PWM_Start+0x17c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d018      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1d      	ldr	r2, [pc, #116]	; (8005c9c <HAL_TIM_PWM_Start+0x180>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <HAL_TIM_PWM_Start+0x184>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00e      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <HAL_TIM_PWM_Start+0x178>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <HAL_TIM_PWM_Start+0x188>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <HAL_TIM_PWM_Start+0x18c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d111      	bne.n	8005c76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b06      	cmp	r3, #6
 8005c62:	d010      	beq.n	8005c86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c74:	e007      	b.n	8005c86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800
 8005ca0:	40000c00 	.word	0x40000c00
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40001800 	.word	0x40001800

08005cac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fe08 	bl	80068d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2e      	ldr	r2, [pc, #184]	; (8005d84 <HAL_TIM_PWM_Stop+0xd8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_PWM_Stop+0x2c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2d      	ldr	r2, [pc, #180]	; (8005d88 <HAL_TIM_PWM_Stop+0xdc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_PWM_Stop+0x30>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_TIM_PWM_Stop+0x32>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d017      	beq.n	8005d12 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6a1a      	ldr	r2, [r3, #32]
 8005ce8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cec:	4013      	ands	r3, r2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10f      	bne.n	8005d12 <HAL_TIM_PWM_Stop+0x66>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a1a      	ldr	r2, [r3, #32]
 8005cf8:	f240 4344 	movw	r3, #1092	; 0x444
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d107      	bne.n	8005d12 <HAL_TIM_PWM_Stop+0x66>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6a1a      	ldr	r2, [r3, #32]
 8005d18:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <HAL_TIM_PWM_Stop+0x96>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a1a      	ldr	r2, [r3, #32]
 8005d28:	f240 4344 	movw	r3, #1092	; 0x444
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d107      	bne.n	8005d42 <HAL_TIM_PWM_Stop+0x96>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0201 	bic.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_PWM_Stop+0xa6>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d50:	e013      	b.n	8005d7a <HAL_TIM_PWM_Stop+0xce>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d104      	bne.n	8005d62 <HAL_TIM_PWM_Stop+0xb6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d60:	e00b      	b.n	8005d7a <HAL_TIM_PWM_Stop+0xce>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d104      	bne.n	8005d72 <HAL_TIM_PWM_Stop+0xc6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d70:	e003      	b.n	8005d7a <HAL_TIM_PWM_Stop+0xce>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40010400 	.word	0x40010400

08005d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d122      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d11b      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0202 	mvn.w	r2, #2
 8005db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa77 	bl	80062c2 <HAL_TIM_IC_CaptureCallback>
 8005dd4:	e005      	b.n	8005de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa69 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fa7a 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d122      	bne.n	8005e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d11b      	bne.n	8005e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0204 	mvn.w	r2, #4
 8005e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa4d 	bl	80062c2 <HAL_TIM_IC_CaptureCallback>
 8005e28:	e005      	b.n	8005e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa3f 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fa50 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d122      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d11b      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f06f 0208 	mvn.w	r2, #8
 8005e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2204      	movs	r2, #4
 8005e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fa23 	bl	80062c2 <HAL_TIM_IC_CaptureCallback>
 8005e7c:	e005      	b.n	8005e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa15 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fa26 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d122      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d11b      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0210 	mvn.w	r2, #16
 8005eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2208      	movs	r2, #8
 8005eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f9f9 	bl	80062c2 <HAL_TIM_IC_CaptureCallback>
 8005ed0:	e005      	b.n	8005ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f9eb 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f9fc 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d10e      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d107      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0201 	mvn.w	r2, #1
 8005f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fa fd56 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1a:	2b80      	cmp	r3, #128	; 0x80
 8005f1c:	d10e      	bne.n	8005f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	d107      	bne.n	8005f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fd78 	bl	8006a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d10e      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d107      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f9c1 	bl	80062ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d10e      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d107      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0220 	mvn.w	r2, #32
 8005f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fd42 	bl	8006a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e0ae      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b0c      	cmp	r3, #12
 8005fc6:	f200 809f 	bhi.w	8006108 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08006005 	.word	0x08006005
 8005fd4:	08006109 	.word	0x08006109
 8005fd8:	08006109 	.word	0x08006109
 8005fdc:	08006109 	.word	0x08006109
 8005fe0:	08006045 	.word	0x08006045
 8005fe4:	08006109 	.word	0x08006109
 8005fe8:	08006109 	.word	0x08006109
 8005fec:	08006109 	.word	0x08006109
 8005ff0:	08006087 	.word	0x08006087
 8005ff4:	08006109 	.word	0x08006109
 8005ff8:	08006109 	.word	0x08006109
 8005ffc:	08006109 	.word	0x08006109
 8006000:	080060c7 	.word	0x080060c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fa18 	bl	8006440 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0208 	orr.w	r2, r2, #8
 800601e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0204 	bic.w	r2, r2, #4
 800602e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6999      	ldr	r1, [r3, #24]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	619a      	str	r2, [r3, #24]
      break;
 8006042:	e064      	b.n	800610e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fa68 	bl	8006520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6999      	ldr	r1, [r3, #24]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	021a      	lsls	r2, r3, #8
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	619a      	str	r2, [r3, #24]
      break;
 8006084:	e043      	b.n	800610e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fabd 	bl	800660c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0208 	orr.w	r2, r2, #8
 80060a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0204 	bic.w	r2, r2, #4
 80060b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69d9      	ldr	r1, [r3, #28]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	61da      	str	r2, [r3, #28]
      break;
 80060c4:	e023      	b.n	800610e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fb11 	bl	80066f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69d9      	ldr	r1, [r3, #28]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	021a      	lsls	r2, r3, #8
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	61da      	str	r2, [r3, #28]
      break;
 8006106:	e002      	b.n	800610e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	75fb      	strb	r3, [r7, #23]
      break;
 800610c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006116:	7dfb      	ldrb	r3, [r7, #23]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_TIM_ConfigClockSource+0x1c>
 8006138:	2302      	movs	r3, #2
 800613a:	e0b4      	b.n	80062a6 <HAL_TIM_ConfigClockSource+0x186>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800615a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006174:	d03e      	beq.n	80061f4 <HAL_TIM_ConfigClockSource+0xd4>
 8006176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800617a:	f200 8087 	bhi.w	800628c <HAL_TIM_ConfigClockSource+0x16c>
 800617e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006182:	f000 8086 	beq.w	8006292 <HAL_TIM_ConfigClockSource+0x172>
 8006186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618a:	d87f      	bhi.n	800628c <HAL_TIM_ConfigClockSource+0x16c>
 800618c:	2b70      	cmp	r3, #112	; 0x70
 800618e:	d01a      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0xa6>
 8006190:	2b70      	cmp	r3, #112	; 0x70
 8006192:	d87b      	bhi.n	800628c <HAL_TIM_ConfigClockSource+0x16c>
 8006194:	2b60      	cmp	r3, #96	; 0x60
 8006196:	d050      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x11a>
 8006198:	2b60      	cmp	r3, #96	; 0x60
 800619a:	d877      	bhi.n	800628c <HAL_TIM_ConfigClockSource+0x16c>
 800619c:	2b50      	cmp	r3, #80	; 0x50
 800619e:	d03c      	beq.n	800621a <HAL_TIM_ConfigClockSource+0xfa>
 80061a0:	2b50      	cmp	r3, #80	; 0x50
 80061a2:	d873      	bhi.n	800628c <HAL_TIM_ConfigClockSource+0x16c>
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d058      	beq.n	800625a <HAL_TIM_ConfigClockSource+0x13a>
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d86f      	bhi.n	800628c <HAL_TIM_ConfigClockSource+0x16c>
 80061ac:	2b30      	cmp	r3, #48	; 0x30
 80061ae:	d064      	beq.n	800627a <HAL_TIM_ConfigClockSource+0x15a>
 80061b0:	2b30      	cmp	r3, #48	; 0x30
 80061b2:	d86b      	bhi.n	800628c <HAL_TIM_ConfigClockSource+0x16c>
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d060      	beq.n	800627a <HAL_TIM_ConfigClockSource+0x15a>
 80061b8:	2b20      	cmp	r3, #32
 80061ba:	d867      	bhi.n	800628c <HAL_TIM_ConfigClockSource+0x16c>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d05c      	beq.n	800627a <HAL_TIM_ConfigClockSource+0x15a>
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	d05a      	beq.n	800627a <HAL_TIM_ConfigClockSource+0x15a>
 80061c4:	e062      	b.n	800628c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6899      	ldr	r1, [r3, #8]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f000 fb5d 	bl	8006894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	609a      	str	r2, [r3, #8]
      break;
 80061f2:	e04f      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6899      	ldr	r1, [r3, #8]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f000 fb46 	bl	8006894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006216:	609a      	str	r2, [r3, #8]
      break;
 8006218:	e03c      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6859      	ldr	r1, [r3, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	461a      	mov	r2, r3
 8006228:	f000 faba 	bl	80067a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2150      	movs	r1, #80	; 0x50
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fb13 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 8006238:	e02c      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	6859      	ldr	r1, [r3, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	461a      	mov	r2, r3
 8006248:	f000 fad9 	bl	80067fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2160      	movs	r1, #96	; 0x60
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fb03 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 8006258:	e01c      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6859      	ldr	r1, [r3, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	461a      	mov	r2, r3
 8006268:	f000 fa9a 	bl	80067a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2140      	movs	r1, #64	; 0x40
 8006272:	4618      	mov	r0, r3
 8006274:	f000 faf3 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 8006278:	e00c      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4619      	mov	r1, r3
 8006284:	4610      	mov	r0, r2
 8006286:	f000 faea 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 800628a:	e003      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
      break;
 8006290:	e000      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a40      	ldr	r2, [pc, #256]	; (8006414 <TIM_Base_SetConfig+0x114>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d013      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631e:	d00f      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a3d      	ldr	r2, [pc, #244]	; (8006418 <TIM_Base_SetConfig+0x118>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00b      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a3c      	ldr	r2, [pc, #240]	; (800641c <TIM_Base_SetConfig+0x11c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a3b      	ldr	r2, [pc, #236]	; (8006420 <TIM_Base_SetConfig+0x120>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3a      	ldr	r2, [pc, #232]	; (8006424 <TIM_Base_SetConfig+0x124>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d108      	bne.n	8006352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a2f      	ldr	r2, [pc, #188]	; (8006414 <TIM_Base_SetConfig+0x114>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d02b      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006360:	d027      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a2c      	ldr	r2, [pc, #176]	; (8006418 <TIM_Base_SetConfig+0x118>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d023      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2b      	ldr	r2, [pc, #172]	; (800641c <TIM_Base_SetConfig+0x11c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01f      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2a      	ldr	r2, [pc, #168]	; (8006420 <TIM_Base_SetConfig+0x120>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d01b      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a29      	ldr	r2, [pc, #164]	; (8006424 <TIM_Base_SetConfig+0x124>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d017      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a28      	ldr	r2, [pc, #160]	; (8006428 <TIM_Base_SetConfig+0x128>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a27      	ldr	r2, [pc, #156]	; (800642c <TIM_Base_SetConfig+0x12c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00f      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a26      	ldr	r2, [pc, #152]	; (8006430 <TIM_Base_SetConfig+0x130>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00b      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a25      	ldr	r2, [pc, #148]	; (8006434 <TIM_Base_SetConfig+0x134>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d007      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a24      	ldr	r2, [pc, #144]	; (8006438 <TIM_Base_SetConfig+0x138>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a23      	ldr	r2, [pc, #140]	; (800643c <TIM_Base_SetConfig+0x13c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d108      	bne.n	80063c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a0a      	ldr	r2, [pc, #40]	; (8006414 <TIM_Base_SetConfig+0x114>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_Base_SetConfig+0xf8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a0c      	ldr	r2, [pc, #48]	; (8006424 <TIM_Base_SetConfig+0x124>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d103      	bne.n	8006400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	615a      	str	r2, [r3, #20]
}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40010000 	.word	0x40010000
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40000c00 	.word	0x40000c00
 8006424:	40010400 	.word	0x40010400
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800
 8006434:	40001800 	.word	0x40001800
 8006438:	40001c00 	.word	0x40001c00
 800643c:	40002000 	.word	0x40002000

08006440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f023 0201 	bic.w	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f023 0302 	bic.w	r3, r3, #2
 8006488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a20      	ldr	r2, [pc, #128]	; (8006518 <TIM_OC1_SetConfig+0xd8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC1_SetConfig+0x64>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a1f      	ldr	r2, [pc, #124]	; (800651c <TIM_OC1_SetConfig+0xdc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d10c      	bne.n	80064be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f023 0308 	bic.w	r3, r3, #8
 80064aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a15      	ldr	r2, [pc, #84]	; (8006518 <TIM_OC1_SetConfig+0xd8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d003      	beq.n	80064ce <TIM_OC1_SetConfig+0x8e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a14      	ldr	r2, [pc, #80]	; (800651c <TIM_OC1_SetConfig+0xdc>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d111      	bne.n	80064f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	621a      	str	r2, [r3, #32]
}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	40010000 	.word	0x40010000
 800651c:	40010400 	.word	0x40010400

08006520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	f023 0210 	bic.w	r2, r3, #16
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4313      	orrs	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f023 0320 	bic.w	r3, r3, #32
 800656a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a22      	ldr	r2, [pc, #136]	; (8006604 <TIM_OC2_SetConfig+0xe4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d003      	beq.n	8006588 <TIM_OC2_SetConfig+0x68>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a21      	ldr	r2, [pc, #132]	; (8006608 <TIM_OC2_SetConfig+0xe8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d10d      	bne.n	80065a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800658e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a17      	ldr	r2, [pc, #92]	; (8006604 <TIM_OC2_SetConfig+0xe4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_OC2_SetConfig+0x94>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a16      	ldr	r2, [pc, #88]	; (8006608 <TIM_OC2_SetConfig+0xe8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d113      	bne.n	80065dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40010400 	.word	0x40010400

0800660c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a21      	ldr	r2, [pc, #132]	; (80066ec <TIM_OC3_SetConfig+0xe0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_OC3_SetConfig+0x66>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a20      	ldr	r2, [pc, #128]	; (80066f0 <TIM_OC3_SetConfig+0xe4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d10d      	bne.n	800668e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800668c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a16      	ldr	r2, [pc, #88]	; (80066ec <TIM_OC3_SetConfig+0xe0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_OC3_SetConfig+0x92>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a15      	ldr	r2, [pc, #84]	; (80066f0 <TIM_OC3_SetConfig+0xe4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d113      	bne.n	80066c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	621a      	str	r2, [r3, #32]
}
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	40010000 	.word	0x40010000
 80066f0:	40010400 	.word	0x40010400

080066f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800673e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	031b      	lsls	r3, r3, #12
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a12      	ldr	r2, [pc, #72]	; (8006798 <TIM_OC4_SetConfig+0xa4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC4_SetConfig+0x68>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a11      	ldr	r2, [pc, #68]	; (800679c <TIM_OC4_SetConfig+0xa8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d109      	bne.n	8006770 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	019b      	lsls	r3, r3, #6
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40010400 	.word	0x40010400

080067a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f023 0201 	bic.w	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 030a 	bic.w	r3, r3, #10
 80067dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067fe:	b480      	push	{r7}
 8006800:	b087      	sub	sp, #28
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	f023 0210 	bic.w	r2, r3, #16
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	031b      	lsls	r3, r3, #12
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800683a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	f043 0307 	orr.w	r3, r3, #7
 8006880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	609a      	str	r2, [r3, #8]
}
 8006888:	bf00      	nop
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	021a      	lsls	r2, r3, #8
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	431a      	orrs	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	609a      	str	r2, [r3, #8]
}
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	2201      	movs	r2, #1
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a1a      	ldr	r2, [r3, #32]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	401a      	ands	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	fa01 f303 	lsl.w	r3, r1, r3
 800690c:	431a      	orrs	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
	...

08006920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e05a      	b.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a21      	ldr	r2, [pc, #132]	; (80069fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d022      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006984:	d01d      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1d      	ldr	r2, [pc, #116]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d018      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1b      	ldr	r2, [pc, #108]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1a      	ldr	r2, [pc, #104]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d10c      	bne.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40010400 	.word	0x40010400
 8006a10:	40014000 	.word	0x40014000
 8006a14:	40001800 	.word	0x40001800

08006a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e03f      	b.n	8006ad2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fb fd6c 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2224      	movs	r2, #36	; 0x24
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fe1f 	bl	80076c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695a      	ldr	r2, [r3, #20]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b08a      	sub	sp, #40	; 0x28
 8006ade:	af02      	add	r7, sp, #8
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d17c      	bne.n	8006bf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <HAL_UART_Transmit+0x2c>
 8006b00:	88fb      	ldrh	r3, [r7, #6]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e075      	b.n	8006bf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_UART_Transmit+0x3e>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e06e      	b.n	8006bf6 <HAL_UART_Transmit+0x11c>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2221      	movs	r2, #33	; 0x21
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b2e:	f7fb febb 	bl	80028a8 <HAL_GetTick>
 8006b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	88fa      	ldrh	r2, [r7, #6]
 8006b38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	88fa      	ldrh	r2, [r7, #6]
 8006b3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b48:	d108      	bne.n	8006b5c <HAL_UART_Transmit+0x82>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d104      	bne.n	8006b5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	e003      	b.n	8006b64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b6c:	e02a      	b.n	8006bc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	2180      	movs	r1, #128	; 0x80
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fb63 	bl	8007244 <UART_WaitOnFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e036      	b.n	8006bf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10b      	bne.n	8006ba6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	61bb      	str	r3, [r7, #24]
 8006ba4:	e007      	b.n	8006bb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1cf      	bne.n	8006b6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2140      	movs	r1, #64	; 0x40
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fb33 	bl	8007244 <UART_WaitOnFlagUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e006      	b.n	8006bf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e000      	b.n	8006bf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bf4:	2302      	movs	r3, #2
  }
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	d130      	bne.n	8006c7a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_UART_Transmit_IT+0x26>
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e029      	b.n	8006c7c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_UART_Transmit_IT+0x38>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e022      	b.n	8006c7c <HAL_UART_Transmit_IT+0x7e>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	88fa      	ldrh	r2, [r7, #6]
 8006c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	88fa      	ldrh	r2, [r7, #6]
 8006c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2221      	movs	r2, #33	; 0x21
 8006c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e000      	b.n	8006c7c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006c7a:	2302      	movs	r3, #2
  }
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d11d      	bne.n	8006cde <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <HAL_UART_Receive_IT+0x26>
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e016      	b.n	8006ce0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_UART_Receive_IT+0x38>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e00f      	b.n	8006ce0 <HAL_UART_Receive_IT+0x58>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68b9      	ldr	r1, [r7, #8]
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fb23 	bl	8007320 <UART_Start_Receive_IT>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	e000      	b.n	8006ce0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006cde:	2302      	movs	r3, #2
  }
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b0ba      	sub	sp, #232	; 0xe8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1e:	f003 030f 	and.w	r3, r3, #15
 8006d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d009      	beq.n	8006d4e <HAL_UART_IRQHandler+0x66>
 8006d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fc03 	bl	8007552 <UART_Receive_IT>
      return;
 8006d4c:	e256      	b.n	80071fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80de 	beq.w	8006f14 <HAL_UART_IRQHandler+0x22c>
 8006d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d106      	bne.n	8006d72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80d1 	beq.w	8006f14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <HAL_UART_IRQHandler+0xae>
 8006d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f043 0201 	orr.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <HAL_UART_IRQHandler+0xd2>
 8006da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f043 0202 	orr.w	r2, r3, #2
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <HAL_UART_IRQHandler+0xf6>
 8006dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	f043 0204 	orr.w	r2, r3, #4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d011      	beq.n	8006e0e <HAL_UART_IRQHandler+0x126>
 8006dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d105      	bne.n	8006e02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d005      	beq.n	8006e0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	f043 0208 	orr.w	r2, r3, #8
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 81ed 	beq.w	80071f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <HAL_UART_IRQHandler+0x14e>
 8006e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb8e 	bl	8007552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e40:	2b40      	cmp	r3, #64	; 0x40
 8006e42:	bf0c      	ite	eq
 8006e44:	2301      	moveq	r3, #1
 8006e46:	2300      	movne	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <HAL_UART_IRQHandler+0x17a>
 8006e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d04f      	beq.n	8006f02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa96 	bl	8007394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d141      	bne.n	8006efa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3314      	adds	r3, #20
 8006e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3314      	adds	r3, #20
 8006e9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ea2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1d9      	bne.n	8006e76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d013      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	4a7d      	ldr	r2, [pc, #500]	; (80070c4 <HAL_UART_IRQHandler+0x3dc>)
 8006ed0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fc fa73 	bl	80033c2 <HAL_DMA_Abort_IT>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d016      	beq.n	8006f10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef0:	e00e      	b.n	8006f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f990 	bl	8007218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef8:	e00a      	b.n	8006f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f98c 	bl	8007218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	e006      	b.n	8006f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f988 	bl	8007218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f0e:	e170      	b.n	80071f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f10:	bf00      	nop
    return;
 8006f12:	e16e      	b.n	80071f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f040 814a 	bne.w	80071b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8143 	beq.w	80071b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 813c 	beq.w	80071b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60bb      	str	r3, [r7, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	f040 80b4 	bne.w	80070c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 8140 	beq.w	80071f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	f080 8139 	bcs.w	80071f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f96:	f000 8088 	beq.w	80070aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1d9      	bne.n	8006f9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3314      	adds	r3, #20
 8006fec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3314      	adds	r3, #20
 8007006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800700a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800700e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800701c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e1      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3314      	adds	r3, #20
 8007028:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3314      	adds	r3, #20
 8007042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007046:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800704c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e3      	bne.n	8007022 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	330c      	adds	r3, #12
 800706e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707a:	f023 0310 	bic.w	r3, r3, #16
 800707e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800708c:	65ba      	str	r2, [r7, #88]	; 0x58
 800708e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007092:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800709a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e3      	bne.n	8007068 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fc f91c 	bl	80032e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f8b6 	bl	800722c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070c0:	e099      	b.n	80071f6 <HAL_UART_IRQHandler+0x50e>
 80070c2:	bf00      	nop
 80070c4:	0800745b 	.word	0x0800745b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 808b 	beq.w	80071fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80070e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8086 	beq.w	80071fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	330c      	adds	r3, #12
 80070f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007104:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007112:	647a      	str	r2, [r7, #68]	; 0x44
 8007114:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e3      	bne.n	80070ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3314      	adds	r3, #20
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	623b      	str	r3, [r7, #32]
   return(result);
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3314      	adds	r3, #20
 8007146:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800714a:	633a      	str	r2, [r7, #48]	; 0x30
 800714c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e3      	bne.n	8007126 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	60fb      	str	r3, [r7, #12]
   return(result);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0310 	bic.w	r3, r3, #16
 8007182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	330c      	adds	r3, #12
 800718c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007190:	61fa      	str	r2, [r7, #28]
 8007192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	69b9      	ldr	r1, [r7, #24]
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	617b      	str	r3, [r7, #20]
   return(result);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e3      	bne.n	800716c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f83e 	bl	800722c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071b0:	e023      	b.n	80071fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <HAL_UART_IRQHandler+0x4ea>
 80071be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f959 	bl	8007482 <UART_Transmit_IT>
    return;
 80071d0:	e014      	b.n	80071fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00e      	beq.n	80071fc <HAL_UART_IRQHandler+0x514>
 80071de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d008      	beq.n	80071fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f999 	bl	8007522 <UART_EndTransmit_IT>
    return;
 80071f0:	e004      	b.n	80071fc <HAL_UART_IRQHandler+0x514>
    return;
 80071f2:	bf00      	nop
 80071f4:	e002      	b.n	80071fc <HAL_UART_IRQHandler+0x514>
      return;
 80071f6:	bf00      	nop
 80071f8:	e000      	b.n	80071fc <HAL_UART_IRQHandler+0x514>
      return;
 80071fa:	bf00      	nop
  }
}
 80071fc:	37e8      	adds	r7, #232	; 0xe8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop

08007204 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b090      	sub	sp, #64	; 0x40
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	4613      	mov	r3, r2
 8007252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007254:	e050      	b.n	80072f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d04c      	beq.n	80072f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800725e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <UART_WaitOnFlagUntilTimeout+0x30>
 8007264:	f7fb fb20 	bl	80028a8 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007270:	429a      	cmp	r2, r3
 8007272:	d241      	bcs.n	80072f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	330c      	adds	r3, #12
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	330c      	adds	r3, #12
 8007292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007294:	637a      	str	r2, [r7, #52]	; 0x34
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800729a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3314      	adds	r3, #20
 80072ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	613b      	str	r3, [r7, #16]
   return(result);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f023 0301 	bic.w	r3, r3, #1
 80072be:	63bb      	str	r3, [r7, #56]	; 0x38
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3314      	adds	r3, #20
 80072c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072c8:	623a      	str	r2, [r7, #32]
 80072ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	69f9      	ldr	r1, [r7, #28]
 80072ce:	6a3a      	ldr	r2, [r7, #32]
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e5      	bne.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2220      	movs	r2, #32
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e00f      	b.n	8007318 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	4013      	ands	r3, r2
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	429a      	cmp	r2, r3
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	429a      	cmp	r2, r3
 8007314:	d09f      	beq.n	8007256 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3740      	adds	r7, #64	; 0x40
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	4613      	mov	r3, r2
 800732c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	88fa      	ldrh	r2, [r7, #6]
 800733e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2222      	movs	r2, #34	; 0x22
 800734a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007364:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695a      	ldr	r2, [r3, #20]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0220 	orr.w	r2, r2, #32
 8007384:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007394:	b480      	push	{r7}
 8007396:	b095      	sub	sp, #84	; 0x54
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	330c      	adds	r3, #12
 80073a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073bc:	643a      	str	r2, [r7, #64]	; 0x40
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e5      	bne.n	800739c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3314      	adds	r3, #20
 80073d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	61fb      	str	r3, [r7, #28]
   return(result);
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f023 0301 	bic.w	r3, r3, #1
 80073e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3314      	adds	r3, #20
 80073ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e5      	bne.n	80073d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	2b01      	cmp	r3, #1
 800740a:	d119      	bne.n	8007440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	330c      	adds	r3, #12
 8007412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	60bb      	str	r3, [r7, #8]
   return(result);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f023 0310 	bic.w	r3, r3, #16
 8007422:	647b      	str	r3, [r7, #68]	; 0x44
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800742c:	61ba      	str	r2, [r7, #24]
 800742e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6979      	ldr	r1, [r7, #20]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	613b      	str	r3, [r7, #16]
   return(result);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800744e:	bf00      	nop
 8007450:	3754      	adds	r7, #84	; 0x54
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fecf 	bl	8007218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b21      	cmp	r3, #33	; 0x21
 8007494:	d13e      	bne.n	8007514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749e:	d114      	bne.n	80074ca <UART_Transmit_IT+0x48>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d110      	bne.n	80074ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	1c9a      	adds	r2, r3, #2
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	621a      	str	r2, [r3, #32]
 80074c8:	e008      	b.n	80074dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	1c59      	adds	r1, r3, #1
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6211      	str	r1, [r2, #32]
 80074d4:	781a      	ldrb	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4619      	mov	r1, r3
 80074ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10f      	bne.n	8007510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800750e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	e000      	b.n	8007516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007514:	2302      	movs	r3, #2
  }
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff fe5e 	bl	8007204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b08c      	sub	sp, #48	; 0x30
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b22      	cmp	r3, #34	; 0x22
 8007564:	f040 80ab 	bne.w	80076be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007570:	d117      	bne.n	80075a2 <UART_Receive_IT+0x50>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d113      	bne.n	80075a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007590:	b29a      	uxth	r2, r3
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	1c9a      	adds	r2, r3, #2
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	629a      	str	r2, [r3, #40]	; 0x28
 80075a0:	e026      	b.n	80075f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075a8:	2300      	movs	r3, #0
 80075aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b4:	d007      	beq.n	80075c6 <UART_Receive_IT+0x74>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <UART_Receive_IT+0x82>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e008      	b.n	80075e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	4619      	mov	r1, r3
 80075fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007600:	2b00      	cmp	r3, #0
 8007602:	d15a      	bne.n	80076ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0220 	bic.w	r2, r2, #32
 8007612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695a      	ldr	r2, [r3, #20]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0201 	bic.w	r2, r2, #1
 8007632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007640:	2b01      	cmp	r3, #1
 8007642:	d135      	bne.n	80076b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	613b      	str	r3, [r7, #16]
   return(result);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f023 0310 	bic.w	r3, r3, #16
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	623a      	str	r2, [r7, #32]
 800766c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	69f9      	ldr	r1, [r7, #28]
 8007670:	6a3a      	ldr	r2, [r7, #32]
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	61bb      	str	r3, [r7, #24]
   return(result);
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e5      	bne.n	800764a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b10      	cmp	r3, #16
 800768a:	d10a      	bne.n	80076a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff fdbf 	bl	800722c <HAL_UARTEx_RxEventCallback>
 80076ae:	e002      	b.n	80076b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7fa f997 	bl	80019e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	e002      	b.n	80076c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e000      	b.n	80076c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80076be:	2302      	movs	r3, #2
  }
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3730      	adds	r7, #48	; 0x30
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	b09f      	sub	sp, #124	; 0x7c
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076de:	68d9      	ldr	r1, [r3, #12]
 80076e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	ea40 0301 	orr.w	r3, r0, r1
 80076e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	4313      	orrs	r3, r2
 8007700:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800770c:	f021 010c 	bic.w	r1, r1, #12
 8007710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007716:	430b      	orrs	r3, r1
 8007718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800771a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007726:	6999      	ldr	r1, [r3, #24]
 8007728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	ea40 0301 	orr.w	r3, r0, r1
 8007730:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	4bc5      	ldr	r3, [pc, #788]	; (8007a4c <UART_SetConfig+0x384>)
 8007738:	429a      	cmp	r2, r3
 800773a:	d004      	beq.n	8007746 <UART_SetConfig+0x7e>
 800773c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	4bc3      	ldr	r3, [pc, #780]	; (8007a50 <UART_SetConfig+0x388>)
 8007742:	429a      	cmp	r2, r3
 8007744:	d103      	bne.n	800774e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007746:	f7fd fe19 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 800774a:	6778      	str	r0, [r7, #116]	; 0x74
 800774c:	e002      	b.n	8007754 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800774e:	f7fd fe01 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 8007752:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800775c:	f040 80b6 	bne.w	80078cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007762:	461c      	mov	r4, r3
 8007764:	f04f 0500 	mov.w	r5, #0
 8007768:	4622      	mov	r2, r4
 800776a:	462b      	mov	r3, r5
 800776c:	1891      	adds	r1, r2, r2
 800776e:	6439      	str	r1, [r7, #64]	; 0x40
 8007770:	415b      	adcs	r3, r3
 8007772:	647b      	str	r3, [r7, #68]	; 0x44
 8007774:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007778:	1912      	adds	r2, r2, r4
 800777a:	eb45 0303 	adc.w	r3, r5, r3
 800777e:	f04f 0000 	mov.w	r0, #0
 8007782:	f04f 0100 	mov.w	r1, #0
 8007786:	00d9      	lsls	r1, r3, #3
 8007788:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800778c:	00d0      	lsls	r0, r2, #3
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	1911      	adds	r1, r2, r4
 8007794:	6639      	str	r1, [r7, #96]	; 0x60
 8007796:	416b      	adcs	r3, r5
 8007798:	667b      	str	r3, [r7, #100]	; 0x64
 800779a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	461a      	mov	r2, r3
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	1891      	adds	r1, r2, r2
 80077a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80077a8:	415b      	adcs	r3, r3
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80077b4:	f7f8 fd74 	bl	80002a0 <__aeabi_uldivmod>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4ba5      	ldr	r3, [pc, #660]	; (8007a54 <UART_SetConfig+0x38c>)
 80077be:	fba3 2302 	umull	r2, r3, r3, r2
 80077c2:	095b      	lsrs	r3, r3, #5
 80077c4:	011e      	lsls	r6, r3, #4
 80077c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077c8:	461c      	mov	r4, r3
 80077ca:	f04f 0500 	mov.w	r5, #0
 80077ce:	4622      	mov	r2, r4
 80077d0:	462b      	mov	r3, r5
 80077d2:	1891      	adds	r1, r2, r2
 80077d4:	6339      	str	r1, [r7, #48]	; 0x30
 80077d6:	415b      	adcs	r3, r3
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
 80077da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80077de:	1912      	adds	r2, r2, r4
 80077e0:	eb45 0303 	adc.w	r3, r5, r3
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f04f 0100 	mov.w	r1, #0
 80077ec:	00d9      	lsls	r1, r3, #3
 80077ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077f2:	00d0      	lsls	r0, r2, #3
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	1911      	adds	r1, r2, r4
 80077fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80077fc:	416b      	adcs	r3, r5
 80077fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	461a      	mov	r2, r3
 8007806:	f04f 0300 	mov.w	r3, #0
 800780a:	1891      	adds	r1, r2, r2
 800780c:	62b9      	str	r1, [r7, #40]	; 0x28
 800780e:	415b      	adcs	r3, r3
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007816:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800781a:	f7f8 fd41 	bl	80002a0 <__aeabi_uldivmod>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4b8c      	ldr	r3, [pc, #560]	; (8007a54 <UART_SetConfig+0x38c>)
 8007824:	fba3 1302 	umull	r1, r3, r3, r2
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	2164      	movs	r1, #100	; 0x64
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	3332      	adds	r3, #50	; 0x32
 8007836:	4a87      	ldr	r2, [pc, #540]	; (8007a54 <UART_SetConfig+0x38c>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	095b      	lsrs	r3, r3, #5
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007844:	441e      	add	r6, r3
 8007846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007848:	4618      	mov	r0, r3
 800784a:	f04f 0100 	mov.w	r1, #0
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	1894      	adds	r4, r2, r2
 8007854:	623c      	str	r4, [r7, #32]
 8007856:	415b      	adcs	r3, r3
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
 800785a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800785e:	1812      	adds	r2, r2, r0
 8007860:	eb41 0303 	adc.w	r3, r1, r3
 8007864:	f04f 0400 	mov.w	r4, #0
 8007868:	f04f 0500 	mov.w	r5, #0
 800786c:	00dd      	lsls	r5, r3, #3
 800786e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007872:	00d4      	lsls	r4, r2, #3
 8007874:	4622      	mov	r2, r4
 8007876:	462b      	mov	r3, r5
 8007878:	1814      	adds	r4, r2, r0
 800787a:	653c      	str	r4, [r7, #80]	; 0x50
 800787c:	414b      	adcs	r3, r1
 800787e:	657b      	str	r3, [r7, #84]	; 0x54
 8007880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	461a      	mov	r2, r3
 8007886:	f04f 0300 	mov.w	r3, #0
 800788a:	1891      	adds	r1, r2, r2
 800788c:	61b9      	str	r1, [r7, #24]
 800788e:	415b      	adcs	r3, r3
 8007890:	61fb      	str	r3, [r7, #28]
 8007892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007896:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800789a:	f7f8 fd01 	bl	80002a0 <__aeabi_uldivmod>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4b6c      	ldr	r3, [pc, #432]	; (8007a54 <UART_SetConfig+0x38c>)
 80078a4:	fba3 1302 	umull	r1, r3, r3, r2
 80078a8:	095b      	lsrs	r3, r3, #5
 80078aa:	2164      	movs	r1, #100	; 0x64
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	3332      	adds	r3, #50	; 0x32
 80078b6:	4a67      	ldr	r2, [pc, #412]	; (8007a54 <UART_SetConfig+0x38c>)
 80078b8:	fba2 2303 	umull	r2, r3, r2, r3
 80078bc:	095b      	lsrs	r3, r3, #5
 80078be:	f003 0207 	and.w	r2, r3, #7
 80078c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4432      	add	r2, r6
 80078c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078ca:	e0b9      	b.n	8007a40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ce:	461c      	mov	r4, r3
 80078d0:	f04f 0500 	mov.w	r5, #0
 80078d4:	4622      	mov	r2, r4
 80078d6:	462b      	mov	r3, r5
 80078d8:	1891      	adds	r1, r2, r2
 80078da:	6139      	str	r1, [r7, #16]
 80078dc:	415b      	adcs	r3, r3
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80078e4:	1912      	adds	r2, r2, r4
 80078e6:	eb45 0303 	adc.w	r3, r5, r3
 80078ea:	f04f 0000 	mov.w	r0, #0
 80078ee:	f04f 0100 	mov.w	r1, #0
 80078f2:	00d9      	lsls	r1, r3, #3
 80078f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078f8:	00d0      	lsls	r0, r2, #3
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	eb12 0804 	adds.w	r8, r2, r4
 8007902:	eb43 0905 	adc.w	r9, r3, r5
 8007906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	4618      	mov	r0, r3
 800790c:	f04f 0100 	mov.w	r1, #0
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	008b      	lsls	r3, r1, #2
 800791a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800791e:	0082      	lsls	r2, r0, #2
 8007920:	4640      	mov	r0, r8
 8007922:	4649      	mov	r1, r9
 8007924:	f7f8 fcbc 	bl	80002a0 <__aeabi_uldivmod>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4b49      	ldr	r3, [pc, #292]	; (8007a54 <UART_SetConfig+0x38c>)
 800792e:	fba3 2302 	umull	r2, r3, r3, r2
 8007932:	095b      	lsrs	r3, r3, #5
 8007934:	011e      	lsls	r6, r3, #4
 8007936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007938:	4618      	mov	r0, r3
 800793a:	f04f 0100 	mov.w	r1, #0
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	1894      	adds	r4, r2, r2
 8007944:	60bc      	str	r4, [r7, #8]
 8007946:	415b      	adcs	r3, r3
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800794e:	1812      	adds	r2, r2, r0
 8007950:	eb41 0303 	adc.w	r3, r1, r3
 8007954:	f04f 0400 	mov.w	r4, #0
 8007958:	f04f 0500 	mov.w	r5, #0
 800795c:	00dd      	lsls	r5, r3, #3
 800795e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007962:	00d4      	lsls	r4, r2, #3
 8007964:	4622      	mov	r2, r4
 8007966:	462b      	mov	r3, r5
 8007968:	1814      	adds	r4, r2, r0
 800796a:	64bc      	str	r4, [r7, #72]	; 0x48
 800796c:	414b      	adcs	r3, r1
 800796e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4618      	mov	r0, r3
 8007976:	f04f 0100 	mov.w	r1, #0
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	008b      	lsls	r3, r1, #2
 8007984:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007988:	0082      	lsls	r2, r0, #2
 800798a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800798e:	f7f8 fc87 	bl	80002a0 <__aeabi_uldivmod>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4b2f      	ldr	r3, [pc, #188]	; (8007a54 <UART_SetConfig+0x38c>)
 8007998:	fba3 1302 	umull	r1, r3, r3, r2
 800799c:	095b      	lsrs	r3, r3, #5
 800799e:	2164      	movs	r1, #100	; 0x64
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	3332      	adds	r3, #50	; 0x32
 80079aa:	4a2a      	ldr	r2, [pc, #168]	; (8007a54 <UART_SetConfig+0x38c>)
 80079ac:	fba2 2303 	umull	r2, r3, r2, r3
 80079b0:	095b      	lsrs	r3, r3, #5
 80079b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079b6:	441e      	add	r6, r3
 80079b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ba:	4618      	mov	r0, r3
 80079bc:	f04f 0100 	mov.w	r1, #0
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	1894      	adds	r4, r2, r2
 80079c6:	603c      	str	r4, [r7, #0]
 80079c8:	415b      	adcs	r3, r3
 80079ca:	607b      	str	r3, [r7, #4]
 80079cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d0:	1812      	adds	r2, r2, r0
 80079d2:	eb41 0303 	adc.w	r3, r1, r3
 80079d6:	f04f 0400 	mov.w	r4, #0
 80079da:	f04f 0500 	mov.w	r5, #0
 80079de:	00dd      	lsls	r5, r3, #3
 80079e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079e4:	00d4      	lsls	r4, r2, #3
 80079e6:	4622      	mov	r2, r4
 80079e8:	462b      	mov	r3, r5
 80079ea:	eb12 0a00 	adds.w	sl, r2, r0
 80079ee:	eb43 0b01 	adc.w	fp, r3, r1
 80079f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f04f 0100 	mov.w	r1, #0
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	008b      	lsls	r3, r1, #2
 8007a06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a0a:	0082      	lsls	r2, r0, #2
 8007a0c:	4650      	mov	r0, sl
 8007a0e:	4659      	mov	r1, fp
 8007a10:	f7f8 fc46 	bl	80002a0 <__aeabi_uldivmod>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <UART_SetConfig+0x38c>)
 8007a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	2164      	movs	r1, #100	; 0x64
 8007a22:	fb01 f303 	mul.w	r3, r1, r3
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	3332      	adds	r3, #50	; 0x32
 8007a2c:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <UART_SetConfig+0x38c>)
 8007a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a32:	095b      	lsrs	r3, r3, #5
 8007a34:	f003 020f 	and.w	r2, r3, #15
 8007a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4432      	add	r2, r6
 8007a3e:	609a      	str	r2, [r3, #8]
}
 8007a40:	bf00      	nop
 8007a42:	377c      	adds	r7, #124	; 0x7c
 8007a44:	46bd      	mov	sp, r7
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	bf00      	nop
 8007a4c:	40011000 	.word	0x40011000
 8007a50:	40011400 	.word	0x40011400
 8007a54:	51eb851f 	.word	0x51eb851f

08007a58 <__errno>:
 8007a58:	4b01      	ldr	r3, [pc, #4]	; (8007a60 <__errno+0x8>)
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	20000178 	.word	0x20000178

08007a64 <__libc_init_array>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	4d0d      	ldr	r5, [pc, #52]	; (8007a9c <__libc_init_array+0x38>)
 8007a68:	4c0d      	ldr	r4, [pc, #52]	; (8007aa0 <__libc_init_array+0x3c>)
 8007a6a:	1b64      	subs	r4, r4, r5
 8007a6c:	10a4      	asrs	r4, r4, #2
 8007a6e:	2600      	movs	r6, #0
 8007a70:	42a6      	cmp	r6, r4
 8007a72:	d109      	bne.n	8007a88 <__libc_init_array+0x24>
 8007a74:	4d0b      	ldr	r5, [pc, #44]	; (8007aa4 <__libc_init_array+0x40>)
 8007a76:	4c0c      	ldr	r4, [pc, #48]	; (8007aa8 <__libc_init_array+0x44>)
 8007a78:	f000 fc82 	bl	8008380 <_init>
 8007a7c:	1b64      	subs	r4, r4, r5
 8007a7e:	10a4      	asrs	r4, r4, #2
 8007a80:	2600      	movs	r6, #0
 8007a82:	42a6      	cmp	r6, r4
 8007a84:	d105      	bne.n	8007a92 <__libc_init_array+0x2e>
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8c:	4798      	blx	r3
 8007a8e:	3601      	adds	r6, #1
 8007a90:	e7ee      	b.n	8007a70 <__libc_init_array+0xc>
 8007a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a96:	4798      	blx	r3
 8007a98:	3601      	adds	r6, #1
 8007a9a:	e7f2      	b.n	8007a82 <__libc_init_array+0x1e>
 8007a9c:	08008544 	.word	0x08008544
 8007aa0:	08008544 	.word	0x08008544
 8007aa4:	08008544 	.word	0x08008544
 8007aa8:	08008548 	.word	0x08008548

08007aac <memset>:
 8007aac:	4402      	add	r2, r0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d100      	bne.n	8007ab6 <memset+0xa>
 8007ab4:	4770      	bx	lr
 8007ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aba:	e7f9      	b.n	8007ab0 <memset+0x4>

08007abc <sniprintf>:
 8007abc:	b40c      	push	{r2, r3}
 8007abe:	b530      	push	{r4, r5, lr}
 8007ac0:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <sniprintf+0x64>)
 8007ac2:	1e0c      	subs	r4, r1, #0
 8007ac4:	681d      	ldr	r5, [r3, #0]
 8007ac6:	b09d      	sub	sp, #116	; 0x74
 8007ac8:	da08      	bge.n	8007adc <sniprintf+0x20>
 8007aca:	238b      	movs	r3, #139	; 0x8b
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad2:	b01d      	add	sp, #116	; 0x74
 8007ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ad8:	b002      	add	sp, #8
 8007ada:	4770      	bx	lr
 8007adc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ae0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ae4:	bf14      	ite	ne
 8007ae6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007aea:	4623      	moveq	r3, r4
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007af4:	9002      	str	r0, [sp, #8]
 8007af6:	9006      	str	r0, [sp, #24]
 8007af8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007afc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007afe:	ab21      	add	r3, sp, #132	; 0x84
 8007b00:	a902      	add	r1, sp, #8
 8007b02:	4628      	mov	r0, r5
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	f000 f889 	bl	8007c1c <_svfiprintf_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	bfbc      	itt	lt
 8007b0e:	238b      	movlt	r3, #139	; 0x8b
 8007b10:	602b      	strlt	r3, [r5, #0]
 8007b12:	2c00      	cmp	r4, #0
 8007b14:	d0dd      	beq.n	8007ad2 <sniprintf+0x16>
 8007b16:	9b02      	ldr	r3, [sp, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
 8007b1c:	e7d9      	b.n	8007ad2 <sniprintf+0x16>
 8007b1e:	bf00      	nop
 8007b20:	20000178 	.word	0x20000178

08007b24 <siprintf>:
 8007b24:	b40e      	push	{r1, r2, r3}
 8007b26:	b500      	push	{lr}
 8007b28:	b09c      	sub	sp, #112	; 0x70
 8007b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b2c:	9002      	str	r0, [sp, #8]
 8007b2e:	9006      	str	r0, [sp, #24]
 8007b30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b34:	4809      	ldr	r0, [pc, #36]	; (8007b5c <siprintf+0x38>)
 8007b36:	9107      	str	r1, [sp, #28]
 8007b38:	9104      	str	r1, [sp, #16]
 8007b3a:	4909      	ldr	r1, [pc, #36]	; (8007b60 <siprintf+0x3c>)
 8007b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b40:	9105      	str	r1, [sp, #20]
 8007b42:	6800      	ldr	r0, [r0, #0]
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	a902      	add	r1, sp, #8
 8007b48:	f000 f868 	bl	8007c1c <_svfiprintf_r>
 8007b4c:	9b02      	ldr	r3, [sp, #8]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	b01c      	add	sp, #112	; 0x70
 8007b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b58:	b003      	add	sp, #12
 8007b5a:	4770      	bx	lr
 8007b5c:	20000178 	.word	0x20000178
 8007b60:	ffff0208 	.word	0xffff0208

08007b64 <__ssputs_r>:
 8007b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	688e      	ldr	r6, [r1, #8]
 8007b6a:	429e      	cmp	r6, r3
 8007b6c:	4682      	mov	sl, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	4690      	mov	r8, r2
 8007b72:	461f      	mov	r7, r3
 8007b74:	d838      	bhi.n	8007be8 <__ssputs_r+0x84>
 8007b76:	898a      	ldrh	r2, [r1, #12]
 8007b78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b7c:	d032      	beq.n	8007be4 <__ssputs_r+0x80>
 8007b7e:	6825      	ldr	r5, [r4, #0]
 8007b80:	6909      	ldr	r1, [r1, #16]
 8007b82:	eba5 0901 	sub.w	r9, r5, r1
 8007b86:	6965      	ldr	r5, [r4, #20]
 8007b88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b90:	3301      	adds	r3, #1
 8007b92:	444b      	add	r3, r9
 8007b94:	106d      	asrs	r5, r5, #1
 8007b96:	429d      	cmp	r5, r3
 8007b98:	bf38      	it	cc
 8007b9a:	461d      	movcc	r5, r3
 8007b9c:	0553      	lsls	r3, r2, #21
 8007b9e:	d531      	bpl.n	8007c04 <__ssputs_r+0xa0>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f000 fb47 	bl	8008234 <_malloc_r>
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	b950      	cbnz	r0, 8007bc0 <__ssputs_r+0x5c>
 8007baa:	230c      	movs	r3, #12
 8007bac:	f8ca 3000 	str.w	r3, [sl]
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb6:	81a3      	strh	r3, [r4, #12]
 8007bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc0:	6921      	ldr	r1, [r4, #16]
 8007bc2:	464a      	mov	r2, r9
 8007bc4:	f000 fabe 	bl	8008144 <memcpy>
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd2:	81a3      	strh	r3, [r4, #12]
 8007bd4:	6126      	str	r6, [r4, #16]
 8007bd6:	6165      	str	r5, [r4, #20]
 8007bd8:	444e      	add	r6, r9
 8007bda:	eba5 0509 	sub.w	r5, r5, r9
 8007bde:	6026      	str	r6, [r4, #0]
 8007be0:	60a5      	str	r5, [r4, #8]
 8007be2:	463e      	mov	r6, r7
 8007be4:	42be      	cmp	r6, r7
 8007be6:	d900      	bls.n	8007bea <__ssputs_r+0x86>
 8007be8:	463e      	mov	r6, r7
 8007bea:	4632      	mov	r2, r6
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	4641      	mov	r1, r8
 8007bf0:	f000 fab6 	bl	8008160 <memmove>
 8007bf4:	68a3      	ldr	r3, [r4, #8]
 8007bf6:	6822      	ldr	r2, [r4, #0]
 8007bf8:	1b9b      	subs	r3, r3, r6
 8007bfa:	4432      	add	r2, r6
 8007bfc:	60a3      	str	r3, [r4, #8]
 8007bfe:	6022      	str	r2, [r4, #0]
 8007c00:	2000      	movs	r0, #0
 8007c02:	e7db      	b.n	8007bbc <__ssputs_r+0x58>
 8007c04:	462a      	mov	r2, r5
 8007c06:	f000 fb6f 	bl	80082e8 <_realloc_r>
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d1e1      	bne.n	8007bd4 <__ssputs_r+0x70>
 8007c10:	6921      	ldr	r1, [r4, #16]
 8007c12:	4650      	mov	r0, sl
 8007c14:	f000 fabe 	bl	8008194 <_free_r>
 8007c18:	e7c7      	b.n	8007baa <__ssputs_r+0x46>
	...

08007c1c <_svfiprintf_r>:
 8007c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	4698      	mov	r8, r3
 8007c22:	898b      	ldrh	r3, [r1, #12]
 8007c24:	061b      	lsls	r3, r3, #24
 8007c26:	b09d      	sub	sp, #116	; 0x74
 8007c28:	4607      	mov	r7, r0
 8007c2a:	460d      	mov	r5, r1
 8007c2c:	4614      	mov	r4, r2
 8007c2e:	d50e      	bpl.n	8007c4e <_svfiprintf_r+0x32>
 8007c30:	690b      	ldr	r3, [r1, #16]
 8007c32:	b963      	cbnz	r3, 8007c4e <_svfiprintf_r+0x32>
 8007c34:	2140      	movs	r1, #64	; 0x40
 8007c36:	f000 fafd 	bl	8008234 <_malloc_r>
 8007c3a:	6028      	str	r0, [r5, #0]
 8007c3c:	6128      	str	r0, [r5, #16]
 8007c3e:	b920      	cbnz	r0, 8007c4a <_svfiprintf_r+0x2e>
 8007c40:	230c      	movs	r3, #12
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	e0d1      	b.n	8007dee <_svfiprintf_r+0x1d2>
 8007c4a:	2340      	movs	r3, #64	; 0x40
 8007c4c:	616b      	str	r3, [r5, #20]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9309      	str	r3, [sp, #36]	; 0x24
 8007c52:	2320      	movs	r3, #32
 8007c54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c58:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c5c:	2330      	movs	r3, #48	; 0x30
 8007c5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e08 <_svfiprintf_r+0x1ec>
 8007c62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c66:	f04f 0901 	mov.w	r9, #1
 8007c6a:	4623      	mov	r3, r4
 8007c6c:	469a      	mov	sl, r3
 8007c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c72:	b10a      	cbz	r2, 8007c78 <_svfiprintf_r+0x5c>
 8007c74:	2a25      	cmp	r2, #37	; 0x25
 8007c76:	d1f9      	bne.n	8007c6c <_svfiprintf_r+0x50>
 8007c78:	ebba 0b04 	subs.w	fp, sl, r4
 8007c7c:	d00b      	beq.n	8007c96 <_svfiprintf_r+0x7a>
 8007c7e:	465b      	mov	r3, fp
 8007c80:	4622      	mov	r2, r4
 8007c82:	4629      	mov	r1, r5
 8007c84:	4638      	mov	r0, r7
 8007c86:	f7ff ff6d 	bl	8007b64 <__ssputs_r>
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	f000 80aa 	beq.w	8007de4 <_svfiprintf_r+0x1c8>
 8007c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c92:	445a      	add	r2, fp
 8007c94:	9209      	str	r2, [sp, #36]	; 0x24
 8007c96:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 80a2 	beq.w	8007de4 <_svfiprintf_r+0x1c8>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007caa:	f10a 0a01 	add.w	sl, sl, #1
 8007cae:	9304      	str	r3, [sp, #16]
 8007cb0:	9307      	str	r3, [sp, #28]
 8007cb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cb6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cb8:	4654      	mov	r4, sl
 8007cba:	2205      	movs	r2, #5
 8007cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc0:	4851      	ldr	r0, [pc, #324]	; (8007e08 <_svfiprintf_r+0x1ec>)
 8007cc2:	f7f8 fa9d 	bl	8000200 <memchr>
 8007cc6:	9a04      	ldr	r2, [sp, #16]
 8007cc8:	b9d8      	cbnz	r0, 8007d02 <_svfiprintf_r+0xe6>
 8007cca:	06d0      	lsls	r0, r2, #27
 8007ccc:	bf44      	itt	mi
 8007cce:	2320      	movmi	r3, #32
 8007cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cd4:	0711      	lsls	r1, r2, #28
 8007cd6:	bf44      	itt	mi
 8007cd8:	232b      	movmi	r3, #43	; 0x2b
 8007cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cde:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce4:	d015      	beq.n	8007d12 <_svfiprintf_r+0xf6>
 8007ce6:	9a07      	ldr	r2, [sp, #28]
 8007ce8:	4654      	mov	r4, sl
 8007cea:	2000      	movs	r0, #0
 8007cec:	f04f 0c0a 	mov.w	ip, #10
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cf6:	3b30      	subs	r3, #48	; 0x30
 8007cf8:	2b09      	cmp	r3, #9
 8007cfa:	d94e      	bls.n	8007d9a <_svfiprintf_r+0x17e>
 8007cfc:	b1b0      	cbz	r0, 8007d2c <_svfiprintf_r+0x110>
 8007cfe:	9207      	str	r2, [sp, #28]
 8007d00:	e014      	b.n	8007d2c <_svfiprintf_r+0x110>
 8007d02:	eba0 0308 	sub.w	r3, r0, r8
 8007d06:	fa09 f303 	lsl.w	r3, r9, r3
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	46a2      	mov	sl, r4
 8007d10:	e7d2      	b.n	8007cb8 <_svfiprintf_r+0x9c>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	1d19      	adds	r1, r3, #4
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	9103      	str	r1, [sp, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfbb      	ittet	lt
 8007d1e:	425b      	neglt	r3, r3
 8007d20:	f042 0202 	orrlt.w	r2, r2, #2
 8007d24:	9307      	strge	r3, [sp, #28]
 8007d26:	9307      	strlt	r3, [sp, #28]
 8007d28:	bfb8      	it	lt
 8007d2a:	9204      	strlt	r2, [sp, #16]
 8007d2c:	7823      	ldrb	r3, [r4, #0]
 8007d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d30:	d10c      	bne.n	8007d4c <_svfiprintf_r+0x130>
 8007d32:	7863      	ldrb	r3, [r4, #1]
 8007d34:	2b2a      	cmp	r3, #42	; 0x2a
 8007d36:	d135      	bne.n	8007da4 <_svfiprintf_r+0x188>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	1d1a      	adds	r2, r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	9203      	str	r2, [sp, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bfb8      	it	lt
 8007d44:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d48:	3402      	adds	r4, #2
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e18 <_svfiprintf_r+0x1fc>
 8007d50:	7821      	ldrb	r1, [r4, #0]
 8007d52:	2203      	movs	r2, #3
 8007d54:	4650      	mov	r0, sl
 8007d56:	f7f8 fa53 	bl	8000200 <memchr>
 8007d5a:	b140      	cbz	r0, 8007d6e <_svfiprintf_r+0x152>
 8007d5c:	2340      	movs	r3, #64	; 0x40
 8007d5e:	eba0 000a 	sub.w	r0, r0, sl
 8007d62:	fa03 f000 	lsl.w	r0, r3, r0
 8007d66:	9b04      	ldr	r3, [sp, #16]
 8007d68:	4303      	orrs	r3, r0
 8007d6a:	3401      	adds	r4, #1
 8007d6c:	9304      	str	r3, [sp, #16]
 8007d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d72:	4826      	ldr	r0, [pc, #152]	; (8007e0c <_svfiprintf_r+0x1f0>)
 8007d74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d78:	2206      	movs	r2, #6
 8007d7a:	f7f8 fa41 	bl	8000200 <memchr>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d038      	beq.n	8007df4 <_svfiprintf_r+0x1d8>
 8007d82:	4b23      	ldr	r3, [pc, #140]	; (8007e10 <_svfiprintf_r+0x1f4>)
 8007d84:	bb1b      	cbnz	r3, 8007dce <_svfiprintf_r+0x1b2>
 8007d86:	9b03      	ldr	r3, [sp, #12]
 8007d88:	3307      	adds	r3, #7
 8007d8a:	f023 0307 	bic.w	r3, r3, #7
 8007d8e:	3308      	adds	r3, #8
 8007d90:	9303      	str	r3, [sp, #12]
 8007d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d94:	4433      	add	r3, r6
 8007d96:	9309      	str	r3, [sp, #36]	; 0x24
 8007d98:	e767      	b.n	8007c6a <_svfiprintf_r+0x4e>
 8007d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d9e:	460c      	mov	r4, r1
 8007da0:	2001      	movs	r0, #1
 8007da2:	e7a5      	b.n	8007cf0 <_svfiprintf_r+0xd4>
 8007da4:	2300      	movs	r3, #0
 8007da6:	3401      	adds	r4, #1
 8007da8:	9305      	str	r3, [sp, #20]
 8007daa:	4619      	mov	r1, r3
 8007dac:	f04f 0c0a 	mov.w	ip, #10
 8007db0:	4620      	mov	r0, r4
 8007db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007db6:	3a30      	subs	r2, #48	; 0x30
 8007db8:	2a09      	cmp	r2, #9
 8007dba:	d903      	bls.n	8007dc4 <_svfiprintf_r+0x1a8>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0c5      	beq.n	8007d4c <_svfiprintf_r+0x130>
 8007dc0:	9105      	str	r1, [sp, #20]
 8007dc2:	e7c3      	b.n	8007d4c <_svfiprintf_r+0x130>
 8007dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dc8:	4604      	mov	r4, r0
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e7f0      	b.n	8007db0 <_svfiprintf_r+0x194>
 8007dce:	ab03      	add	r3, sp, #12
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	462a      	mov	r2, r5
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <_svfiprintf_r+0x1f8>)
 8007dd6:	a904      	add	r1, sp, #16
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f3af 8000 	nop.w
 8007dde:	1c42      	adds	r2, r0, #1
 8007de0:	4606      	mov	r6, r0
 8007de2:	d1d6      	bne.n	8007d92 <_svfiprintf_r+0x176>
 8007de4:	89ab      	ldrh	r3, [r5, #12]
 8007de6:	065b      	lsls	r3, r3, #25
 8007de8:	f53f af2c 	bmi.w	8007c44 <_svfiprintf_r+0x28>
 8007dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dee:	b01d      	add	sp, #116	; 0x74
 8007df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df4:	ab03      	add	r3, sp, #12
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	462a      	mov	r2, r5
 8007dfa:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <_svfiprintf_r+0x1f8>)
 8007dfc:	a904      	add	r1, sp, #16
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f000 f87a 	bl	8007ef8 <_printf_i>
 8007e04:	e7eb      	b.n	8007dde <_svfiprintf_r+0x1c2>
 8007e06:	bf00      	nop
 8007e08:	08008508 	.word	0x08008508
 8007e0c:	08008512 	.word	0x08008512
 8007e10:	00000000 	.word	0x00000000
 8007e14:	08007b65 	.word	0x08007b65
 8007e18:	0800850e 	.word	0x0800850e

08007e1c <_printf_common>:
 8007e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	4616      	mov	r6, r2
 8007e22:	4699      	mov	r9, r3
 8007e24:	688a      	ldr	r2, [r1, #8]
 8007e26:	690b      	ldr	r3, [r1, #16]
 8007e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	bfb8      	it	lt
 8007e30:	4613      	movlt	r3, r2
 8007e32:	6033      	str	r3, [r6, #0]
 8007e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e38:	4607      	mov	r7, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	b10a      	cbz	r2, 8007e42 <_printf_common+0x26>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	6033      	str	r3, [r6, #0]
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	0699      	lsls	r1, r3, #26
 8007e46:	bf42      	ittt	mi
 8007e48:	6833      	ldrmi	r3, [r6, #0]
 8007e4a:	3302      	addmi	r3, #2
 8007e4c:	6033      	strmi	r3, [r6, #0]
 8007e4e:	6825      	ldr	r5, [r4, #0]
 8007e50:	f015 0506 	ands.w	r5, r5, #6
 8007e54:	d106      	bne.n	8007e64 <_printf_common+0x48>
 8007e56:	f104 0a19 	add.w	sl, r4, #25
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	6832      	ldr	r2, [r6, #0]
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dc26      	bgt.n	8007eb2 <_printf_common+0x96>
 8007e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e68:	1e13      	subs	r3, r2, #0
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	0692      	lsls	r2, r2, #26
 8007e72:	d42b      	bmi.n	8007ecc <_printf_common+0xb0>
 8007e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	47c0      	blx	r8
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d01e      	beq.n	8007ec0 <_printf_common+0xa4>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	68e5      	ldr	r5, [r4, #12]
 8007e86:	6832      	ldr	r2, [r6, #0]
 8007e88:	f003 0306 	and.w	r3, r3, #6
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	bf08      	it	eq
 8007e90:	1aad      	subeq	r5, r5, r2
 8007e92:	68a3      	ldr	r3, [r4, #8]
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	bf0c      	ite	eq
 8007e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e9c:	2500      	movne	r5, #0
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	bfc4      	itt	gt
 8007ea2:	1a9b      	subgt	r3, r3, r2
 8007ea4:	18ed      	addgt	r5, r5, r3
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	341a      	adds	r4, #26
 8007eaa:	42b5      	cmp	r5, r6
 8007eac:	d11a      	bne.n	8007ee4 <_printf_common+0xc8>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e008      	b.n	8007ec4 <_printf_common+0xa8>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4638      	mov	r0, r7
 8007eba:	47c0      	blx	r8
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d103      	bne.n	8007ec8 <_printf_common+0xac>
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	3501      	adds	r5, #1
 8007eca:	e7c6      	b.n	8007e5a <_printf_common+0x3e>
 8007ecc:	18e1      	adds	r1, r4, r3
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	2030      	movs	r0, #48	; 0x30
 8007ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ed6:	4422      	add	r2, r4
 8007ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	e7c7      	b.n	8007e74 <_printf_common+0x58>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c0      	blx	r8
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d0e6      	beq.n	8007ec0 <_printf_common+0xa4>
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7d9      	b.n	8007eaa <_printf_common+0x8e>
	...

08007ef8 <_printf_i>:
 8007ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	460c      	mov	r4, r1
 8007efe:	4691      	mov	r9, r2
 8007f00:	7e27      	ldrb	r7, [r4, #24]
 8007f02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f04:	2f78      	cmp	r7, #120	; 0x78
 8007f06:	4680      	mov	r8, r0
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f0e:	d807      	bhi.n	8007f20 <_printf_i+0x28>
 8007f10:	2f62      	cmp	r7, #98	; 0x62
 8007f12:	d80a      	bhi.n	8007f2a <_printf_i+0x32>
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	f000 80d8 	beq.w	80080ca <_printf_i+0x1d2>
 8007f1a:	2f58      	cmp	r7, #88	; 0x58
 8007f1c:	f000 80a3 	beq.w	8008066 <_printf_i+0x16e>
 8007f20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f28:	e03a      	b.n	8007fa0 <_printf_i+0xa8>
 8007f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f2e:	2b15      	cmp	r3, #21
 8007f30:	d8f6      	bhi.n	8007f20 <_printf_i+0x28>
 8007f32:	a001      	add	r0, pc, #4	; (adr r0, 8007f38 <_printf_i+0x40>)
 8007f34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007f38:	08007f91 	.word	0x08007f91
 8007f3c:	08007fa5 	.word	0x08007fa5
 8007f40:	08007f21 	.word	0x08007f21
 8007f44:	08007f21 	.word	0x08007f21
 8007f48:	08007f21 	.word	0x08007f21
 8007f4c:	08007f21 	.word	0x08007f21
 8007f50:	08007fa5 	.word	0x08007fa5
 8007f54:	08007f21 	.word	0x08007f21
 8007f58:	08007f21 	.word	0x08007f21
 8007f5c:	08007f21 	.word	0x08007f21
 8007f60:	08007f21 	.word	0x08007f21
 8007f64:	080080b1 	.word	0x080080b1
 8007f68:	08007fd5 	.word	0x08007fd5
 8007f6c:	08008093 	.word	0x08008093
 8007f70:	08007f21 	.word	0x08007f21
 8007f74:	08007f21 	.word	0x08007f21
 8007f78:	080080d3 	.word	0x080080d3
 8007f7c:	08007f21 	.word	0x08007f21
 8007f80:	08007fd5 	.word	0x08007fd5
 8007f84:	08007f21 	.word	0x08007f21
 8007f88:	08007f21 	.word	0x08007f21
 8007f8c:	0800809b 	.word	0x0800809b
 8007f90:	680b      	ldr	r3, [r1, #0]
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	600a      	str	r2, [r1, #0]
 8007f98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0a3      	b.n	80080ec <_printf_i+0x1f4>
 8007fa4:	6825      	ldr	r5, [r4, #0]
 8007fa6:	6808      	ldr	r0, [r1, #0]
 8007fa8:	062e      	lsls	r6, r5, #24
 8007faa:	f100 0304 	add.w	r3, r0, #4
 8007fae:	d50a      	bpl.n	8007fc6 <_printf_i+0xce>
 8007fb0:	6805      	ldr	r5, [r0, #0]
 8007fb2:	600b      	str	r3, [r1, #0]
 8007fb4:	2d00      	cmp	r5, #0
 8007fb6:	da03      	bge.n	8007fc0 <_printf_i+0xc8>
 8007fb8:	232d      	movs	r3, #45	; 0x2d
 8007fba:	426d      	negs	r5, r5
 8007fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc0:	485e      	ldr	r0, [pc, #376]	; (800813c <_printf_i+0x244>)
 8007fc2:	230a      	movs	r3, #10
 8007fc4:	e019      	b.n	8007ffa <_printf_i+0x102>
 8007fc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007fca:	6805      	ldr	r5, [r0, #0]
 8007fcc:	600b      	str	r3, [r1, #0]
 8007fce:	bf18      	it	ne
 8007fd0:	b22d      	sxthne	r5, r5
 8007fd2:	e7ef      	b.n	8007fb4 <_printf_i+0xbc>
 8007fd4:	680b      	ldr	r3, [r1, #0]
 8007fd6:	6825      	ldr	r5, [r4, #0]
 8007fd8:	1d18      	adds	r0, r3, #4
 8007fda:	6008      	str	r0, [r1, #0]
 8007fdc:	0628      	lsls	r0, r5, #24
 8007fde:	d501      	bpl.n	8007fe4 <_printf_i+0xec>
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	e002      	b.n	8007fea <_printf_i+0xf2>
 8007fe4:	0669      	lsls	r1, r5, #25
 8007fe6:	d5fb      	bpl.n	8007fe0 <_printf_i+0xe8>
 8007fe8:	881d      	ldrh	r5, [r3, #0]
 8007fea:	4854      	ldr	r0, [pc, #336]	; (800813c <_printf_i+0x244>)
 8007fec:	2f6f      	cmp	r7, #111	; 0x6f
 8007fee:	bf0c      	ite	eq
 8007ff0:	2308      	moveq	r3, #8
 8007ff2:	230a      	movne	r3, #10
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ffa:	6866      	ldr	r6, [r4, #4]
 8007ffc:	60a6      	str	r6, [r4, #8]
 8007ffe:	2e00      	cmp	r6, #0
 8008000:	bfa2      	ittt	ge
 8008002:	6821      	ldrge	r1, [r4, #0]
 8008004:	f021 0104 	bicge.w	r1, r1, #4
 8008008:	6021      	strge	r1, [r4, #0]
 800800a:	b90d      	cbnz	r5, 8008010 <_printf_i+0x118>
 800800c:	2e00      	cmp	r6, #0
 800800e:	d04d      	beq.n	80080ac <_printf_i+0x1b4>
 8008010:	4616      	mov	r6, r2
 8008012:	fbb5 f1f3 	udiv	r1, r5, r3
 8008016:	fb03 5711 	mls	r7, r3, r1, r5
 800801a:	5dc7      	ldrb	r7, [r0, r7]
 800801c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008020:	462f      	mov	r7, r5
 8008022:	42bb      	cmp	r3, r7
 8008024:	460d      	mov	r5, r1
 8008026:	d9f4      	bls.n	8008012 <_printf_i+0x11a>
 8008028:	2b08      	cmp	r3, #8
 800802a:	d10b      	bne.n	8008044 <_printf_i+0x14c>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	07df      	lsls	r7, r3, #31
 8008030:	d508      	bpl.n	8008044 <_printf_i+0x14c>
 8008032:	6923      	ldr	r3, [r4, #16]
 8008034:	6861      	ldr	r1, [r4, #4]
 8008036:	4299      	cmp	r1, r3
 8008038:	bfde      	ittt	le
 800803a:	2330      	movle	r3, #48	; 0x30
 800803c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008040:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008044:	1b92      	subs	r2, r2, r6
 8008046:	6122      	str	r2, [r4, #16]
 8008048:	f8cd a000 	str.w	sl, [sp]
 800804c:	464b      	mov	r3, r9
 800804e:	aa03      	add	r2, sp, #12
 8008050:	4621      	mov	r1, r4
 8008052:	4640      	mov	r0, r8
 8008054:	f7ff fee2 	bl	8007e1c <_printf_common>
 8008058:	3001      	adds	r0, #1
 800805a:	d14c      	bne.n	80080f6 <_printf_i+0x1fe>
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	b004      	add	sp, #16
 8008062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008066:	4835      	ldr	r0, [pc, #212]	; (800813c <_printf_i+0x244>)
 8008068:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	680e      	ldr	r6, [r1, #0]
 8008070:	061f      	lsls	r7, r3, #24
 8008072:	f856 5b04 	ldr.w	r5, [r6], #4
 8008076:	600e      	str	r6, [r1, #0]
 8008078:	d514      	bpl.n	80080a4 <_printf_i+0x1ac>
 800807a:	07d9      	lsls	r1, r3, #31
 800807c:	bf44      	itt	mi
 800807e:	f043 0320 	orrmi.w	r3, r3, #32
 8008082:	6023      	strmi	r3, [r4, #0]
 8008084:	b91d      	cbnz	r5, 800808e <_printf_i+0x196>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	f023 0320 	bic.w	r3, r3, #32
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	2310      	movs	r3, #16
 8008090:	e7b0      	b.n	8007ff4 <_printf_i+0xfc>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	f043 0320 	orr.w	r3, r3, #32
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	2378      	movs	r3, #120	; 0x78
 800809c:	4828      	ldr	r0, [pc, #160]	; (8008140 <_printf_i+0x248>)
 800809e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080a2:	e7e3      	b.n	800806c <_printf_i+0x174>
 80080a4:	065e      	lsls	r6, r3, #25
 80080a6:	bf48      	it	mi
 80080a8:	b2ad      	uxthmi	r5, r5
 80080aa:	e7e6      	b.n	800807a <_printf_i+0x182>
 80080ac:	4616      	mov	r6, r2
 80080ae:	e7bb      	b.n	8008028 <_printf_i+0x130>
 80080b0:	680b      	ldr	r3, [r1, #0]
 80080b2:	6826      	ldr	r6, [r4, #0]
 80080b4:	6960      	ldr	r0, [r4, #20]
 80080b6:	1d1d      	adds	r5, r3, #4
 80080b8:	600d      	str	r5, [r1, #0]
 80080ba:	0635      	lsls	r5, r6, #24
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	d501      	bpl.n	80080c4 <_printf_i+0x1cc>
 80080c0:	6018      	str	r0, [r3, #0]
 80080c2:	e002      	b.n	80080ca <_printf_i+0x1d2>
 80080c4:	0671      	lsls	r1, r6, #25
 80080c6:	d5fb      	bpl.n	80080c0 <_printf_i+0x1c8>
 80080c8:	8018      	strh	r0, [r3, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	4616      	mov	r6, r2
 80080d0:	e7ba      	b.n	8008048 <_printf_i+0x150>
 80080d2:	680b      	ldr	r3, [r1, #0]
 80080d4:	1d1a      	adds	r2, r3, #4
 80080d6:	600a      	str	r2, [r1, #0]
 80080d8:	681e      	ldr	r6, [r3, #0]
 80080da:	6862      	ldr	r2, [r4, #4]
 80080dc:	2100      	movs	r1, #0
 80080de:	4630      	mov	r0, r6
 80080e0:	f7f8 f88e 	bl	8000200 <memchr>
 80080e4:	b108      	cbz	r0, 80080ea <_printf_i+0x1f2>
 80080e6:	1b80      	subs	r0, r0, r6
 80080e8:	6060      	str	r0, [r4, #4]
 80080ea:	6863      	ldr	r3, [r4, #4]
 80080ec:	6123      	str	r3, [r4, #16]
 80080ee:	2300      	movs	r3, #0
 80080f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f4:	e7a8      	b.n	8008048 <_printf_i+0x150>
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	4632      	mov	r2, r6
 80080fa:	4649      	mov	r1, r9
 80080fc:	4640      	mov	r0, r8
 80080fe:	47d0      	blx	sl
 8008100:	3001      	adds	r0, #1
 8008102:	d0ab      	beq.n	800805c <_printf_i+0x164>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	079b      	lsls	r3, r3, #30
 8008108:	d413      	bmi.n	8008132 <_printf_i+0x23a>
 800810a:	68e0      	ldr	r0, [r4, #12]
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	4298      	cmp	r0, r3
 8008110:	bfb8      	it	lt
 8008112:	4618      	movlt	r0, r3
 8008114:	e7a4      	b.n	8008060 <_printf_i+0x168>
 8008116:	2301      	movs	r3, #1
 8008118:	4632      	mov	r2, r6
 800811a:	4649      	mov	r1, r9
 800811c:	4640      	mov	r0, r8
 800811e:	47d0      	blx	sl
 8008120:	3001      	adds	r0, #1
 8008122:	d09b      	beq.n	800805c <_printf_i+0x164>
 8008124:	3501      	adds	r5, #1
 8008126:	68e3      	ldr	r3, [r4, #12]
 8008128:	9903      	ldr	r1, [sp, #12]
 800812a:	1a5b      	subs	r3, r3, r1
 800812c:	42ab      	cmp	r3, r5
 800812e:	dcf2      	bgt.n	8008116 <_printf_i+0x21e>
 8008130:	e7eb      	b.n	800810a <_printf_i+0x212>
 8008132:	2500      	movs	r5, #0
 8008134:	f104 0619 	add.w	r6, r4, #25
 8008138:	e7f5      	b.n	8008126 <_printf_i+0x22e>
 800813a:	bf00      	nop
 800813c:	08008519 	.word	0x08008519
 8008140:	0800852a 	.word	0x0800852a

08008144 <memcpy>:
 8008144:	440a      	add	r2, r1
 8008146:	4291      	cmp	r1, r2
 8008148:	f100 33ff 	add.w	r3, r0, #4294967295
 800814c:	d100      	bne.n	8008150 <memcpy+0xc>
 800814e:	4770      	bx	lr
 8008150:	b510      	push	{r4, lr}
 8008152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800815a:	4291      	cmp	r1, r2
 800815c:	d1f9      	bne.n	8008152 <memcpy+0xe>
 800815e:	bd10      	pop	{r4, pc}

08008160 <memmove>:
 8008160:	4288      	cmp	r0, r1
 8008162:	b510      	push	{r4, lr}
 8008164:	eb01 0402 	add.w	r4, r1, r2
 8008168:	d902      	bls.n	8008170 <memmove+0x10>
 800816a:	4284      	cmp	r4, r0
 800816c:	4623      	mov	r3, r4
 800816e:	d807      	bhi.n	8008180 <memmove+0x20>
 8008170:	1e43      	subs	r3, r0, #1
 8008172:	42a1      	cmp	r1, r4
 8008174:	d008      	beq.n	8008188 <memmove+0x28>
 8008176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800817a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800817e:	e7f8      	b.n	8008172 <memmove+0x12>
 8008180:	4402      	add	r2, r0
 8008182:	4601      	mov	r1, r0
 8008184:	428a      	cmp	r2, r1
 8008186:	d100      	bne.n	800818a <memmove+0x2a>
 8008188:	bd10      	pop	{r4, pc}
 800818a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800818e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008192:	e7f7      	b.n	8008184 <memmove+0x24>

08008194 <_free_r>:
 8008194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008196:	2900      	cmp	r1, #0
 8008198:	d048      	beq.n	800822c <_free_r+0x98>
 800819a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800819e:	9001      	str	r0, [sp, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f1a1 0404 	sub.w	r4, r1, #4
 80081a6:	bfb8      	it	lt
 80081a8:	18e4      	addlt	r4, r4, r3
 80081aa:	f000 f8d3 	bl	8008354 <__malloc_lock>
 80081ae:	4a20      	ldr	r2, [pc, #128]	; (8008230 <_free_r+0x9c>)
 80081b0:	9801      	ldr	r0, [sp, #4]
 80081b2:	6813      	ldr	r3, [r2, #0]
 80081b4:	4615      	mov	r5, r2
 80081b6:	b933      	cbnz	r3, 80081c6 <_free_r+0x32>
 80081b8:	6063      	str	r3, [r4, #4]
 80081ba:	6014      	str	r4, [r2, #0]
 80081bc:	b003      	add	sp, #12
 80081be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081c2:	f000 b8cd 	b.w	8008360 <__malloc_unlock>
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	d90b      	bls.n	80081e2 <_free_r+0x4e>
 80081ca:	6821      	ldr	r1, [r4, #0]
 80081cc:	1862      	adds	r2, r4, r1
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bf04      	itt	eq
 80081d2:	681a      	ldreq	r2, [r3, #0]
 80081d4:	685b      	ldreq	r3, [r3, #4]
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	bf04      	itt	eq
 80081da:	1852      	addeq	r2, r2, r1
 80081dc:	6022      	streq	r2, [r4, #0]
 80081de:	602c      	str	r4, [r5, #0]
 80081e0:	e7ec      	b.n	80081bc <_free_r+0x28>
 80081e2:	461a      	mov	r2, r3
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b10b      	cbz	r3, 80081ec <_free_r+0x58>
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d9fa      	bls.n	80081e2 <_free_r+0x4e>
 80081ec:	6811      	ldr	r1, [r2, #0]
 80081ee:	1855      	adds	r5, r2, r1
 80081f0:	42a5      	cmp	r5, r4
 80081f2:	d10b      	bne.n	800820c <_free_r+0x78>
 80081f4:	6824      	ldr	r4, [r4, #0]
 80081f6:	4421      	add	r1, r4
 80081f8:	1854      	adds	r4, r2, r1
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	6011      	str	r1, [r2, #0]
 80081fe:	d1dd      	bne.n	80081bc <_free_r+0x28>
 8008200:	681c      	ldr	r4, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	6053      	str	r3, [r2, #4]
 8008206:	4421      	add	r1, r4
 8008208:	6011      	str	r1, [r2, #0]
 800820a:	e7d7      	b.n	80081bc <_free_r+0x28>
 800820c:	d902      	bls.n	8008214 <_free_r+0x80>
 800820e:	230c      	movs	r3, #12
 8008210:	6003      	str	r3, [r0, #0]
 8008212:	e7d3      	b.n	80081bc <_free_r+0x28>
 8008214:	6825      	ldr	r5, [r4, #0]
 8008216:	1961      	adds	r1, r4, r5
 8008218:	428b      	cmp	r3, r1
 800821a:	bf04      	itt	eq
 800821c:	6819      	ldreq	r1, [r3, #0]
 800821e:	685b      	ldreq	r3, [r3, #4]
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	bf04      	itt	eq
 8008224:	1949      	addeq	r1, r1, r5
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	6054      	str	r4, [r2, #4]
 800822a:	e7c7      	b.n	80081bc <_free_r+0x28>
 800822c:	b003      	add	sp, #12
 800822e:	bd30      	pop	{r4, r5, pc}
 8008230:	20000214 	.word	0x20000214

08008234 <_malloc_r>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	1ccd      	adds	r5, r1, #3
 8008238:	f025 0503 	bic.w	r5, r5, #3
 800823c:	3508      	adds	r5, #8
 800823e:	2d0c      	cmp	r5, #12
 8008240:	bf38      	it	cc
 8008242:	250c      	movcc	r5, #12
 8008244:	2d00      	cmp	r5, #0
 8008246:	4606      	mov	r6, r0
 8008248:	db01      	blt.n	800824e <_malloc_r+0x1a>
 800824a:	42a9      	cmp	r1, r5
 800824c:	d903      	bls.n	8008256 <_malloc_r+0x22>
 800824e:	230c      	movs	r3, #12
 8008250:	6033      	str	r3, [r6, #0]
 8008252:	2000      	movs	r0, #0
 8008254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008256:	f000 f87d 	bl	8008354 <__malloc_lock>
 800825a:	4921      	ldr	r1, [pc, #132]	; (80082e0 <_malloc_r+0xac>)
 800825c:	680a      	ldr	r2, [r1, #0]
 800825e:	4614      	mov	r4, r2
 8008260:	b99c      	cbnz	r4, 800828a <_malloc_r+0x56>
 8008262:	4f20      	ldr	r7, [pc, #128]	; (80082e4 <_malloc_r+0xb0>)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	b923      	cbnz	r3, 8008272 <_malloc_r+0x3e>
 8008268:	4621      	mov	r1, r4
 800826a:	4630      	mov	r0, r6
 800826c:	f000 f862 	bl	8008334 <_sbrk_r>
 8008270:	6038      	str	r0, [r7, #0]
 8008272:	4629      	mov	r1, r5
 8008274:	4630      	mov	r0, r6
 8008276:	f000 f85d 	bl	8008334 <_sbrk_r>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	d123      	bne.n	80082c6 <_malloc_r+0x92>
 800827e:	230c      	movs	r3, #12
 8008280:	6033      	str	r3, [r6, #0]
 8008282:	4630      	mov	r0, r6
 8008284:	f000 f86c 	bl	8008360 <__malloc_unlock>
 8008288:	e7e3      	b.n	8008252 <_malloc_r+0x1e>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	1b5b      	subs	r3, r3, r5
 800828e:	d417      	bmi.n	80082c0 <_malloc_r+0x8c>
 8008290:	2b0b      	cmp	r3, #11
 8008292:	d903      	bls.n	800829c <_malloc_r+0x68>
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	441c      	add	r4, r3
 8008298:	6025      	str	r5, [r4, #0]
 800829a:	e004      	b.n	80082a6 <_malloc_r+0x72>
 800829c:	6863      	ldr	r3, [r4, #4]
 800829e:	42a2      	cmp	r2, r4
 80082a0:	bf0c      	ite	eq
 80082a2:	600b      	streq	r3, [r1, #0]
 80082a4:	6053      	strne	r3, [r2, #4]
 80082a6:	4630      	mov	r0, r6
 80082a8:	f000 f85a 	bl	8008360 <__malloc_unlock>
 80082ac:	f104 000b 	add.w	r0, r4, #11
 80082b0:	1d23      	adds	r3, r4, #4
 80082b2:	f020 0007 	bic.w	r0, r0, #7
 80082b6:	1ac2      	subs	r2, r0, r3
 80082b8:	d0cc      	beq.n	8008254 <_malloc_r+0x20>
 80082ba:	1a1b      	subs	r3, r3, r0
 80082bc:	50a3      	str	r3, [r4, r2]
 80082be:	e7c9      	b.n	8008254 <_malloc_r+0x20>
 80082c0:	4622      	mov	r2, r4
 80082c2:	6864      	ldr	r4, [r4, #4]
 80082c4:	e7cc      	b.n	8008260 <_malloc_r+0x2c>
 80082c6:	1cc4      	adds	r4, r0, #3
 80082c8:	f024 0403 	bic.w	r4, r4, #3
 80082cc:	42a0      	cmp	r0, r4
 80082ce:	d0e3      	beq.n	8008298 <_malloc_r+0x64>
 80082d0:	1a21      	subs	r1, r4, r0
 80082d2:	4630      	mov	r0, r6
 80082d4:	f000 f82e 	bl	8008334 <_sbrk_r>
 80082d8:	3001      	adds	r0, #1
 80082da:	d1dd      	bne.n	8008298 <_malloc_r+0x64>
 80082dc:	e7cf      	b.n	800827e <_malloc_r+0x4a>
 80082de:	bf00      	nop
 80082e0:	20000214 	.word	0x20000214
 80082e4:	20000218 	.word	0x20000218

080082e8 <_realloc_r>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	4607      	mov	r7, r0
 80082ec:	4614      	mov	r4, r2
 80082ee:	460e      	mov	r6, r1
 80082f0:	b921      	cbnz	r1, 80082fc <_realloc_r+0x14>
 80082f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082f6:	4611      	mov	r1, r2
 80082f8:	f7ff bf9c 	b.w	8008234 <_malloc_r>
 80082fc:	b922      	cbnz	r2, 8008308 <_realloc_r+0x20>
 80082fe:	f7ff ff49 	bl	8008194 <_free_r>
 8008302:	4625      	mov	r5, r4
 8008304:	4628      	mov	r0, r5
 8008306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008308:	f000 f830 	bl	800836c <_malloc_usable_size_r>
 800830c:	42a0      	cmp	r0, r4
 800830e:	d20f      	bcs.n	8008330 <_realloc_r+0x48>
 8008310:	4621      	mov	r1, r4
 8008312:	4638      	mov	r0, r7
 8008314:	f7ff ff8e 	bl	8008234 <_malloc_r>
 8008318:	4605      	mov	r5, r0
 800831a:	2800      	cmp	r0, #0
 800831c:	d0f2      	beq.n	8008304 <_realloc_r+0x1c>
 800831e:	4631      	mov	r1, r6
 8008320:	4622      	mov	r2, r4
 8008322:	f7ff ff0f 	bl	8008144 <memcpy>
 8008326:	4631      	mov	r1, r6
 8008328:	4638      	mov	r0, r7
 800832a:	f7ff ff33 	bl	8008194 <_free_r>
 800832e:	e7e9      	b.n	8008304 <_realloc_r+0x1c>
 8008330:	4635      	mov	r5, r6
 8008332:	e7e7      	b.n	8008304 <_realloc_r+0x1c>

08008334 <_sbrk_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d06      	ldr	r5, [pc, #24]	; (8008350 <_sbrk_r+0x1c>)
 8008338:	2300      	movs	r3, #0
 800833a:	4604      	mov	r4, r0
 800833c:	4608      	mov	r0, r1
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	f7fa f9da 	bl	80026f8 <_sbrk>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_sbrk_r+0x1a>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_sbrk_r+0x1a>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000494 	.word	0x20000494

08008354 <__malloc_lock>:
 8008354:	4801      	ldr	r0, [pc, #4]	; (800835c <__malloc_lock+0x8>)
 8008356:	f000 b811 	b.w	800837c <__retarget_lock_acquire_recursive>
 800835a:	bf00      	nop
 800835c:	2000049c 	.word	0x2000049c

08008360 <__malloc_unlock>:
 8008360:	4801      	ldr	r0, [pc, #4]	; (8008368 <__malloc_unlock+0x8>)
 8008362:	f000 b80c 	b.w	800837e <__retarget_lock_release_recursive>
 8008366:	bf00      	nop
 8008368:	2000049c 	.word	0x2000049c

0800836c <_malloc_usable_size_r>:
 800836c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008370:	1f18      	subs	r0, r3, #4
 8008372:	2b00      	cmp	r3, #0
 8008374:	bfbc      	itt	lt
 8008376:	580b      	ldrlt	r3, [r1, r0]
 8008378:	18c0      	addlt	r0, r0, r3
 800837a:	4770      	bx	lr

0800837c <__retarget_lock_acquire_recursive>:
 800837c:	4770      	bx	lr

0800837e <__retarget_lock_release_recursive>:
 800837e:	4770      	bx	lr

08008380 <_init>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr

0800838c <_fini>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	bf00      	nop
 8008390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008392:	bc08      	pop	{r3}
 8008394:	469e      	mov	lr, r3
 8008396:	4770      	bx	lr
